cscope 15 $HOME/Downloads/avarice-2.10/src               0000469542
	@autoconf.h

5 
	#HAVE_ARPA_INET_H
 1

	)

8 
	#HAVE_ATEXIT
 1

	)

11 
	#HAVE_BFD_H
 1

	)

17 
	#HAVE_FCNTL_H
 1

	)

20 
	#HAVE_FORK
 1

	)

23 
	#HAVE_GETHOSTBYNAME
 1

	)

26 
	#HAVE_INET_NTOA
 1

	)

29 
	#HAVE_INTTYPES_H
 1

	)

32 
	#HAVE_LIBBFD
 1

	)

38 
	#HAVE_LIBICONV
 1

	)

41 
	#HAVE_LIBINTL
 1

	)

44 
	#HAVE_LIBUSB
 1

	)

47 
	#HAVE_MEMMOVE
 1

	)

50 
	#HAVE_MEMORY_H
 1

	)

53 
	#HAVE_MEMSET
 1

	)

56 
	#HAVE_NETDB_H
 1

	)

59 
	#HAVE_NETINET_IN_H
 1

	)

62 
	#HAVE_SELECT
 1

	)

65 
	#HAVE_SOCKET
 1

	)

72 
	#HAVE_STDBOOL_H
 1

	)

75 
	#HAVE_STDINT_H
 1

	)

78 
	#HAVE_STDLIB_H
 1

	)

81 
	#HAVE_STRCASECMP
 1

	)

84 
	#HAVE_STRERROR
 1

	)

87 
	#HAVE_STRINGS_H
 1

	)

90 
	#HAVE_STRING_H
 1

	)

93 
	#HAVE_STRTOL
 1

	)

96 
	#HAVE_SYS_SELECT_H
 1

	)

99 
	#HAVE_SYS_SOCKET_H
 1

	)

102 
	#HAVE_SYS_STAT_H
 1

	)

105 
	#HAVE_SYS_TIME_H
 1

	)

108 
	#HAVE_SYS_TYPES_H
 1

	)

111 
	#HAVE_TERMIOS_H
 1

	)

114 
	#HAVE_UNISTD_H
 1

	)

117 
	#HAVE_VFORK
 1

	)

123 
	#HAVE_VPRINTF
 1

	)

126 
	#HAVE_WORKING_FORK
 1

	)

129 
	#HAVE_WORKING_VFORK
 1

	)

132 
	#HAVE__BOOL
 1

	)

139 
	#PACKAGE
 "av¨i˚"

	)

142 
	#PACKAGE_BUGREPORT
 ""

	)

145 
	#PACKAGE_NAME
 "av¨i˚"

	)

148 
	#PACKAGE_STRING
 "av¨i˚ 2.10"

	)

151 
	#PACKAGE_TARNAME
 "av¨i˚"

	)

154 
	#PACKAGE_VERSION
 "2.10"

	)

157 
	#SELECT_TYPE_ARG1
 

	)

160 
	#SELECT_TYPE_ARG234
 (
fd_£t
 *)

	)

163 
	#SELECT_TYPE_ARG5
 (
timevÆ
 *)

	)

166 
	#STDC_HEADERS
 1

	)

169 
	#TIME_WITH_SYS_TIME
 1

	)

175 
	#VERSION
 "2.10"

	)

	@avarice.h

21 #i‚de‡
INCLUDE_AVARICE_H


22 
	#INCLUDE_AVARICE_H


	)

24 
	~<°d¨g.h
>

26 
	~"autoc⁄f.h
"

28 
	tuch¨
;

31 
boﬁ
 
debugMode
;

34 
boﬁ
 
ign‹eI¡îru±s
;

37 
vdebugOut
(c⁄° *
fmt
, 
va_li°
 
¨gs
);

38 
debugOut
(c⁄° *
fmt
, ...);

41 
v°©usOut
(c⁄° *
fmt
, 
va_li°
 
¨gs
);

42 
°©usOut
(c⁄° *
fmt
, ...);

43 
°©usFlush
();

48 
check
(
boﬁ
 
ok
, c⁄° *
fmt
, ...);

54 
unixCheck
(
°©us
, c⁄° *
fmt
, ...);

	@crc16.c

6 
	~"¸c16.h
"

9 c⁄° 
	g¸c_èbÀ
[256] = {

45 
	#CRC_INIT
 0xFFFF

	)

46 
	#CRC
(
¸cvÆ
,
√wch¨
) crcval = (crcval >> 8) ^ \

47 
¸c_èbÀ
[(
¸cvÆ
 ^ 
√wch¨
Ë& 0x00ff]

	)

50 
	$¸csum
(c⁄° * 
mesßge
, 
Àngth
,

51 
¸c
)

53 
i
;

55 
i
 = 0; i < 
Àngth
; i++)

57 
	`CRC
(
¸c
, 
mesßge
[
i
]);

59  
¸c
;

60 
	}
}

63 
	$¸cvîify
(c⁄° * 
mesßge
, 
Àngth
)

69 
ex≥˘ed
;

71 
ex≥˘ed
 = 
	`¸csum
(
mesßge
, 
Àngth
 - 2, 
CRC_INIT
);

72  (
ex≥˘ed
 & 0xffË=
mesßge
[
Àngth
 - 2] &&

73 ((
ex≥˘ed
 >> 8Ë& 0xffË=
mesßge
[
Àngth
 - 1];

74 
	}
}

77 
	$¸ˇµíd
(* 
mesßge
, 
Àngth
)

79 
¸c
;

81 
¸c
 = 
	`¸csum
(
mesßge
, 
Àngth
, 
CRC_INIT
);

82 
mesßge
[
Àngth
] = ()(
¸c
 & 0xff);

83 
mesßge
[
Àngth
+1] = ()((
¸c
 >> 8) & 0xff);

84 
	}
}

	@crc16.h

1 #i‚de‡
CRC16_H


2 
	#CRC16_H


	)

9 #i‡
deföed
(
__˝lu•lus
)

12 
¸csum
(c⁄° * 
mesßge
,

13 
Àngth
,

14 
¸c
);

19 
¸cvîify
(c⁄° * 
mesßge
,

20 
Àngth
);

26 
¸ˇµíd
(* 
mesßge
,

27 
Àngth
);

28 #i‡
deföed
(
__˝lu•lus
)

	@devdescr.cc

26 
	~<°dlib.h
>

28 
	~"av¨i˚.h
"

29 
	~"jèg.h
"

30 
	~"jèg1.h
"

32 
jèg_devi˚_def_ty≥
 *
	gglobÆ_p_devi˚_def
;

36 
jèg_devi˚_def_ty≥
 
	gdevi˚Deföôi⁄s
[] = {

43 
DEVFL_NONE
,

44 
©mega16_io_ªgi°îs
,

45 
Ál£
,

47 
JTAG_C_SET_DEVICE_DESCRIPTOR
,

71 { 
JTAG_EOM
 }

74 
CMND_SET_DEVICE_DESCRIPTOR
,

86 
fûl_b2
(128),

88 
fûl_b4
(0x1F80),

89 
fûl_b2
(0),

90 
fûl_b4
(0x4000),

95 
fûl_b2
(0x4000 / 128),

99 
fûl_b2
(0),

102 
fûl_b2
(0x60),

107 
fûl_b2
(0x1c),

117 
DEVFL_NONE
,

118 
©mega162_io_ªgi°îs
,

119 
Ál£
,

121 
JTAG_C_SET_DEVICE_DESCRIPTOR
,

145 { 
JTAG_EOM
 }

148 
CMND_SET_DEVICE_DESCRIPTOR
,

160 
fûl_b2
(128),

162 
fûl_b4
(0x1F80),

163 
fûl_b2
(0xBB),

164 
fûl_b4
(0x4000),

169 
fûl_b2
(0x4000 / 128),

173 
fûl_b2
(0),

176 
fûl_b2
(0x100),

181 
fûl_b2
(0x1c),

191 
DEVFL_NONE
,

192 
©mega169_io_ªgi°îs
,

193 
Ál£
,

195 
JTAG_C_SET_DEVICE_DESCRIPTOR
,

219 { 
JTAG_EOM
 }

222 
CMND_SET_DEVICE_DESCRIPTOR
,

234 
fûl_b2
(128),

236 
fûl_b4
(0x1F80),

237 
fûl_b2
(0xFE),

238 
fûl_b4
(0x4000),

243 
fûl_b2
(0x4000 / 128),

247 
fûl_b2
(0),

250 
fûl_b2
(0x100),

255 
fûl_b2
(0x1f),

265 
DEVFL_NONE
,

266 
NULL
,

267 
Ál£
,

269 
JTAG_C_SET_DEVICE_DESCRIPTOR
,

293 { 
JTAG_EOM
 }

296 
CMND_SET_DEVICE_DESCRIPTOR
,

308 
fûl_b2
(128),

310 
fûl_b4
(0x3F00),

311 
fûl_b2
(0),

312 
fûl_b4
(0x8000),

317 
fûl_b2
(0x8000 / 128),

321 
fûl_b2
(0),

324 
fûl_b2
(0x60),

329 
fûl_b2
(0x1c),

339 
DEVFL_NONE
,

340 
©mega32_io_ªgi°îs
,

341 
Ál£
,

343 
JTAG_C_SET_DEVICE_DESCRIPTOR
,

367 { 
JTAG_EOM
 }

370 
CMND_SET_DEVICE_DESCRIPTOR
,

382 
fûl_b2
(128),

384 
fûl_b4
(0x3F00),

385 
fûl_b2
(0),

386 
fûl_b4
(0x8000),

391 
fûl_b2
(0x8000 / 128),

395 
fûl_b2
(0),

398 
fûl_b2
(0x60),

403 
fûl_b2
(0x1c),

414 
DEVFL_NONE
,

415 
©mega128_io_ªgi°îs
,

416 
Ál£
,

418 
JTAG_C_SET_DEVICE_DESCRIPTOR
,

442 { 
JTAG_EOM
 }

445 
CMND_SET_DEVICE_DESCRIPTOR
,

457 
fûl_b2
(256),

459 
fûl_b4
(0x7E00),

460 
fûl_b2
(0x9D),

461 
fûl_b4
(0x10000),

466 
fûl_b2
(0x10000 / 256),

470 
fûl_b2
(0),

473 
fûl_b2
(0x100),

478 
fûl_b2
(0x1c),

488 
DEVFL_NO_SOFTBP
,

489 
©mega128_io_ªgi°îs
,

490 
Ál£
,

492 
JTAG_C_SET_DEVICE_DESCRIPTOR
,

516 { 
JTAG_EOM
 }

519 
CMND_SET_DEVICE_DESCRIPTOR
,

531 
fûl_b2
(256),

533 
fûl_b4
(0xFE00),

534 
fûl_b2
(0x9D),

535 
fûl_b4
(0x20000),

540 
fûl_b2
(0x20000 / 256),

544 
fûl_b2
(0),

547 
fûl_b2
(0x100),

552 
fûl_b2
(0x1c),

562 
DEVFL_NONE
,

563 
ioˇn128_io_ªgi°îs
,

564 
Ál£
,

566 
JTAG_C_SET_DEVICE_DESCRIPTOR
,

590 { 
JTAG_EOM
 }

593 
CMND_SET_DEVICE_DESCRIPTOR
,

605 
fûl_b2
(256),

607 
fûl_b4
(0xFE00),

608 
fûl_b2
(0xFA),

609 
fûl_b4
(0x20000),

614 
fûl_b2
(0x20000 / 256),

618 
fûl_b2
(0),

621 
fûl_b2
(0x100),

626 
fûl_b2
(0x1f),

636 
DEVFL_MKII_ONLY
,

637 
NULL
,

638 
Ál£
,

643 
CMND_SET_DEVICE_DESCRIPTOR
,

663 
fûl_b2
(128),

665 
fûl_b4
(0x1f80),

666 
fûl_b2
(0x00C6),

667 
fûl_b4
(16384),

672 
fûl_b2
(16384 / 128),

676 
fûl_b2
(0x00),

679 
fûl_b2
(0x100),

694 
DEVFL_MKII_ONLY
,

695 
NULL
,

696 
Ál£
,

701 
CMND_SET_DEVICE_DESCRIPTOR
,

721 
fûl_b2
(128),

723 
fûl_b4
(0x3f00),

724 
fûl_b2
(0x00C6),

725 
fûl_b4
(32768),

730 
fûl_b2
(32768 / 128),

734 
fûl_b2
(0x00),

737 
fûl_b2
(0x100),

752 
DEVFL_MKII_ONLY
,

753 
NULL
,

754 
Ál£
,

759 
CMND_SET_DEVICE_DESCRIPTOR
,

771 
fûl_b2
(256),

773 
fûl_b4
(0x7E00),

774 
fûl_b2
(0xC6),

775 
fûl_b4
(0x10000),

780 
fûl_b2
(0x10000 / 256),

784 
fûl_b2
(0),

787 
fûl_b2
(0x100),

792 
fûl_b2
(0x1f),

803 
DEVFL_MKII_ONLY
,

804 
NULL
,

805 
Ál£
,

810 
CMND_SET_DEVICE_DESCRIPTOR
,

830 
fûl_b2
(128),

832 
fûl_b4
(0x3F00),

833 
fûl_b2
(0xC6),

834 
fûl_b4
(32768),

839 
fûl_b2
(32768 / 128),

843 
fûl_b2
(0x00),

846 
fûl_b2
(0x100),

863 
DEVFL_MKII_ONLY
,

864 
NULL
,

865 
Ál£
,

870 
CMND_SET_DEVICE_DESCRIPTOR
,

890 
fûl_b2
(128),

892 
fûl_b4
(0x3F00),

893 
fûl_b2
(0xDD),

894 
fûl_b4
(32768),

899 
fûl_b2
(32768 / 128),

903 
fûl_b2
(0x00),

906 
fûl_b2
(0x100),

923 
DEVFL_MKII_ONLY
,

924 
NULL
,

925 
Ál£
,

930 
CMND_SET_DEVICE_DESCRIPTOR
,

950 
fûl_b2
(256),

952 
fûl_b4
(0x7E00),

953 
fûl_b2
(0xC6),

954 
fûl_b4
(65536),

959 
fûl_b2
(65536 / 256),

963 
fûl_b2
(0x00),

966 
fûl_b2
(0x100),

983 
DEVFL_MKII_ONLY
,

984 
NULL
,

985 
Ál£
,

990 
CMND_SET_DEVICE_DESCRIPTOR
,

1010 
fûl_b2
(256),

1012 
fûl_b4
(0x7E00),

1013 
fûl_b2
(0xDD),

1014 
fûl_b4
(65536),

1019 
fûl_b2
(65536 / 256),

1023 
fûl_b2
(0x00),

1026 
fûl_b2
(0x100),

1042 
DEVFL_MKII_ONLY
,

1043 
NULL
,

1044 
Ál£
,

1049 
CMND_SET_DEVICE_DESCRIPTOR
,

1061 
fûl_b2
(128),

1063 
fûl_b4
(0x3F00),

1064 
fûl_b2
(0xFE),

1065 
fûl_b4
(0x8000),

1070 
fûl_b2
(0x8000 / 128),

1074 
fûl_b2
(0),

1077 
fûl_b2
(0x100),

1082 
fûl_b2
(0x1f),

1092 
DEVFL_MKII_ONLY
,

1093 
NULL
,

1094 
Ál£
,

1099 
CMND_SET_DEVICE_DESCRIPTOR
,

1111 
fûl_b2
(128),

1113 
fûl_b4
(0x3F00),

1114 
fûl_b2
(0xFE),

1115 
fûl_b4
(0x8000),

1120 
fûl_b2
(0x8000 / 128),

1124 
fûl_b2
(0),

1127 
fûl_b2
(0x100),

1132 
fûl_b2
(0x1f),

1142 
DEVFL_MKII_ONLY
,

1143 
NULL
,

1144 
Ál£
,

1149 
CMND_SET_DEVICE_DESCRIPTOR
,

1161 
fûl_b2
(256),

1163 
fûl_b4
(0x7E00),

1164 
fûl_b2
(0xFE),

1165 
fûl_b4
(0x10000),

1170 
fûl_b2
(0x10000 / 256),

1174 
fûl_b2
(0),

1177 
fûl_b2
(0x100),

1182 
fûl_b2
(0x1f),

1192 
DEVFL_MKII_ONLY
,

1193 
NULL
,

1194 
Ál£
,

1199 
CMND_SET_DEVICE_DESCRIPTOR
,

1211 
fûl_b2
(256),

1213 
fûl_b4
(0x7E00),

1214 
fûl_b2
(0xFF),

1215 
fûl_b4
(0x10000),

1220 
fûl_b2
(0x10000 / 256),

1224 
fûl_b2
(0),

1227 
fûl_b2
(0x100),

1232 
fûl_b2
(0x1f),

1242 
DEVFL_MKII_ONLY
,

1243 
©mega128_io_ªgi°îs
,

1244 
Ál£
,

1249 
CMND_SET_DEVICE_DESCRIPTOR
,

1267 
fûl_b2
(256),

1269 
fûl_b4
(0x7E00),

1270 
fûl_b2
(0x0136),

1271 
fûl_b4
(0x20000),

1276 
fûl_b2
(0x10000 / 256),

1280 
fûl_b2
(0),

1283 
fûl_b2
(0x200),

1288 
fûl_b2
(0x1F),

1298 
DEVFL_MKII_ONLY
,

1299 
©mega128_io_ªgi°îs
,

1300 
Ál£
,

1305 
CMND_SET_DEVICE_DESCRIPTOR
,

1323 
fûl_b2
(256),

1325 
fûl_b4
(0xFE00),

1326 
fûl_b2
(0x0136),

1327 
fûl_b4
(0x20000),

1332 
fûl_b2
(0x20000 / 256),

1336 
fûl_b2
(0),

1339 
fûl_b2
(0x200),

1344 
fûl_b2
(0x1F),

1354 
DEVFL_MKII_ONLY
,

1355 
©mega128_io_ªgi°îs
,

1356 
Ál£
,

1361 
CMND_SET_DEVICE_DESCRIPTOR
,

1379 
fûl_b2
(256),

1381 
fûl_b4
(0xFE00),

1382 
fûl_b2
(0x0136),

1383 
fûl_b4
(0x20000),

1388 
fûl_b2
(0x20000 / 256),

1392 
fûl_b2
(0),

1395 
fûl_b2
(0x200),

1400 
fûl_b2
(0x1F),

1410 
DEVFL_MKII_ONLY
,

1411 
©mega128_io_ªgi°îs
,

1412 
Ál£
,

1417 
CMND_SET_DEVICE_DESCRIPTOR
,

1435 
fûl_b2
(256),

1437 
fûl_b4
(0x1FE00),

1438 
fûl_b2
(0x0136),

1439 
fûl_b4
(0x40000),

1444 
fûl_b2
(0x40000 / 256),

1448 
fûl_b2
(0),

1451 
fûl_b2
(0x200),

1456 
fûl_b2
(0x1F),

1466 
DEVFL_MKII_ONLY
,

1467 
©mega128_io_ªgi°îs
,

1468 
Ál£
,

1473 
CMND_SET_DEVICE_DESCRIPTOR
,

1491 
fûl_b2
(256),

1493 
fûl_b4
(0x1FE00),

1494 
fûl_b2
(0x0136),

1495 
fûl_b4
(0x40000),

1500 
fûl_b2
(0x40000 / 256),

1504 
fûl_b2
(0),

1507 
fûl_b2
(0x200),

1512 
fûl_b2
(0x1F),

1522 
DEVFL_MKII_ONLY
,

1523 
NULL
,

1524 
Ál£
,

1529 
CMND_SET_DEVICE_DESCRIPTOR
,

1545 
fûl_b2
(64),

1547 
fûl_b4
(0),

1548 
fûl_b2
(0xC6),

1549 
fûl_b4
(0x1000),

1556 
fûl_b2
(0x1000 / 64),

1560 
fûl_b2
(0),

1563 
fûl_b2
(0x100),

1568 
fûl_b2
(0x1F),

1578 
DEVFL_MKII_ONLY
,

1579 
NULL
,

1580 
Ál£
,

1585 
CMND_SET_DEVICE_DESCRIPTOR
,

1605 
fûl_b2
(64),

1607 
fûl_b4
(0x0F80),

1608 
fûl_b2
(0xC6),

1609 
fûl_b4
(8192),

1616 
fûl_b2
(8192 / 64),

1620 
fûl_b2
(0xF80),

1623 
fûl_b2
(0x100),

1628 
fûl_b2
(0x1F),

1638 
DEVFL_MKII_ONLY
,

1639 
NULL
,

1640 
Ál£
,

1645 
CMND_SET_DEVICE_DESCRIPTOR
,

1665 
fûl_b2
(128),

1667 
fûl_b4
(0x1F80),

1668 
fûl_b2
(0xC6),

1669 
fûl_b4
(16384),

1676 
fûl_b2
(16384 / 128),

1680 
fûl_b2
(0x1F80),

1683 
fûl_b2
(0x100),

1688 
fûl_b2
(0x1F),

1698 
DEVFL_MKII_ONLY
,

1699 
NULL
,

1700 
Ál£
,

1705 
CMND_SET_DEVICE_DESCRIPTOR
,

1725 
fûl_b2
(32),

1727 
fûl_b4
(0x0000),

1728 
fûl_b2
(0x00),

1729 
fûl_b4
(1024),

1736 
fûl_b2
(1024 / 32),

1740 
fûl_b2
(0x00),

1743 
fûl_b2
(0x60),

1748 
fûl_b2
(0x1C),

1758 
DEVFL_MKII_ONLY
,

1759 
NULL
,

1760 
Ál£
,

1765 
CMND_SET_DEVICE_DESCRIPTOR
,

1785 
fûl_b2
(32),

1787 
fûl_b4
(0x0000),

1788 
fûl_b2
(0x00),

1789 
fûl_b4
(2048),

1796 
fûl_b2
(2048 / 32),

1800 
fûl_b2
(0x00),

1803 
fûl_b2
(0x60),

1808 
fûl_b2
(0x1C),

1818 
DEVFL_MKII_ONLY
,

1819 
NULL
,

1820 
Ál£
,

1825 
CMND_SET_DEVICE_DESCRIPTOR
,

1845 
fûl_b2
(64),

1847 
fûl_b4
(0x0F80),

1848 
fûl_b2
(0xFF),

1849 
fûl_b4
(8192),

1856 
fûl_b2
(8192 / 64),

1860 
fûl_b2
(0xF80),

1863 
fûl_b2
(0x0100),

1868 
fûl_b2
(0x1F),

1878 
DEVFL_MKII_ONLY
,

1879 
NULL
,

1880 
Ál£
,

1885 
CMND_SET_DEVICE_DESCRIPTOR
,

1905 
fûl_b2
(64),

1907 
fûl_b4
(0x0F80),

1908 
fûl_b2
(0xFF),

1909 
fûl_b4
(8192),

1916 
fûl_b2
(8192 / 64),

1920 
fûl_b2
(0xF80),

1923 
fûl_b2
(0x0100),

1928 
fûl_b2
(0x1F),

1938 
DEVFL_MKII_ONLY
,

1939 
NULL
,

1940 
Ál£
,

1945 
CMND_SET_DEVICE_DESCRIPTOR
,

1965 
fûl_b2
(64),

1967 
fûl_b4
(0x0F80),

1968 
fûl_b2
(0xFF),

1969 
fûl_b4
(8192),

1976 
fûl_b2
(8192 / 64),

1980 
fûl_b2
(0xF80),

1983 
fûl_b2
(0x0100),

1988 
fûl_b2
(0x1F),

1998 
DEVFL_MKII_ONLY
,

1999 
NULL
,

2000 
Ál£
,

2005 
CMND_SET_DEVICE_DESCRIPTOR
,

2025 
fûl_b2
(64),

2027 
fûl_b4
(0x0F80),

2028 
fûl_b2
(0xFF),

2029 
fûl_b4
(8192),

2036 
fûl_b2
(8192 / 64),

2040 
fûl_b2
(0xF80),

2043 
fûl_b2
(0x0100),

2048 
fûl_b2
(0x1F),

2058 
DEVFL_MKII_ONLY
,

2059 
NULL
,

2060 
Ál£
,

2065 
CMND_SET_DEVICE_DESCRIPTOR
,

2085 
fûl_b2
(32),

2087 
fûl_b4
(0x0000),

2088 
fûl_b2
(0x00),

2089 
fûl_b4
(2048),

2096 
fûl_b2
(2048 / 32),

2100 
fûl_b2
(0x00),

2103 
fûl_b2
(0x60),

2108 
fûl_b2
(0x1C),

2118 
DEVFL_MKII_ONLY
,

2119 
NULL
,

2120 
Ál£
,

2125 
CMND_SET_DEVICE_DESCRIPTOR
,

2145 
fûl_b2
(64),

2147 
fûl_b4
(0x0000),

2148 
fûl_b2
(0x00),

2149 
fûl_b4
(4096),

2156 
fûl_b2
(4096 / 64),

2160 
fûl_b2
(0x00),

2163 
fûl_b2
(0x60),

2168 
fûl_b2
(0x1C),

2178 
DEVFL_MKII_ONLY
,

2179 
NULL
,

2180 
Ál£
,

2185 
CMND_SET_DEVICE_DESCRIPTOR
,

2205 
fûl_b2
(64),

2207 
fûl_b4
(0x0000),

2208 
fûl_b2
(0x00),

2209 
fûl_b4
(8192),

2216 
fûl_b2
(8192 / 64),

2220 
fûl_b2
(0x00),

2223 
fûl_b2
(0x60),

2228 
fûl_b2
(0x1C),

2238 
DEVFL_MKII_ONLY
,

2239 
NULL
,

2240 
Ál£
,

2245 
CMND_SET_DEVICE_DESCRIPTOR
,

2265 
fûl_b2
(32),

2267 
fûl_b4
(0x0000),

2268 
fûl_b2
(0x00),

2269 
fûl_b4
(2048),

2276 
fûl_b2
(2048 / 32),

2280 
fûl_b2
(0x00),

2283 
fûl_b2
(0x60),

2288 
fûl_b2
(0x1C),

2298 
DEVFL_MKII_ONLY
,

2299 
NULL
,

2300 
Ál£
,

2305 
CMND_SET_DEVICE_DESCRIPTOR
,

2325 
fûl_b2
(64),

2327 
fûl_b4
(0x0000),

2328 
fûl_b2
(0x00),

2329 
fûl_b4
(4096),

2336 
fûl_b2
(4096 / 64),

2340 
fûl_b2
(0x00),

2343 
fûl_b2
(0x60),

2348 
fûl_b2
(0x1C),

2358 
DEVFL_MKII_ONLY
,

2359 
NULL
,

2360 
Ál£
,

2365 
CMND_SET_DEVICE_DESCRIPTOR
,

2385 
fûl_b2
(64),

2387 
fûl_b4
(0x0000),

2388 
fûl_b2
(0x00),

2389 
fûl_b4
(8192),

2396 
fûl_b2
(8192 / 64),

2400 
fûl_b2
(0x00),

2403 
fûl_b2
(0x60),

2408 
fûl_b2
(0x1C),

2418 
DEVFL_MKII_ONLY
,

2419 
NULL
,

2420 
Ál£
,

2425 
CMND_SET_DEVICE_DESCRIPTOR
,

2445 
fûl_b2
(32),

2447 
fûl_b4
(0),

2448 
fûl_b2
(0x0000),

2449 
fûl_b4
(2048),

2456 
fûl_b2
(2048 / 32),

2460 
fûl_b2
(0x00),

2463 
fûl_b2
(0x60),

2468 
fûl_b2
(0x1C),

2478 
DEVFL_MKII_ONLY
,

2479 
NULL
,

2480 
Ál£
,

2485 
CMND_SET_DEVICE_DESCRIPTOR
,

2505 
fûl_b2
(64),

2507 
fûl_b4
(0),

2508 
fûl_b2
(0x0000),

2509 
fûl_b4
(4096),

2516 
fûl_b2
(4096 / 64),

2520 
fûl_b2
(0x00),

2523 
fûl_b2
(0x60),

2528 
fûl_b2
(0x1C),

2538 
DEVFL_MKII_ONLY
,

2539 
NULL
,

2540 
Ál£
,

2545 
CMND_SET_DEVICE_DESCRIPTOR
,

2565 
fûl_b2
(64),

2567 
fûl_b4
(0),

2568 
fûl_b2
(0x0000),

2569 
fûl_b4
(8192),

2576 
fûl_b2
(8192 / 64),

2580 
fûl_b2
(0x00),

2583 
fûl_b2
(0x60),

2588 
fûl_b2
(0x1C),

2598 
DEVFL_MKII_ONLY
,

2599 
NULL
,

2600 
Ál£
,

2605 
CMND_SET_DEVICE_DESCRIPTOR
,

2625 
fûl_b2
(128),

2627 
fûl_b4
(0x3F00),

2628 
fûl_b2
(0x00FA),

2629 
fûl_b4
(32768),

2636 
fûl_b2
(32768 / 128),

2640 
fûl_b2
(0x3F00),

2643 
fûl_b2
(0x0100),

2648 
fûl_b2
(0x1F),

2658 
DEVFL_MKII_ONLY
,

2659 
NULL
,

2660 
Ál£
,

2665 
CMND_SET_DEVICE_DESCRIPTOR
,

2685 
fûl_b2
(128),

2687 
fûl_b4
(0x3F00),

2688 
fûl_b2
(0x00FA),

2689 
fûl_b4
(32768),

2696 
fûl_b2
(32768 / 128),

2700 
fûl_b2
(0x3F00),

2703 
fûl_b2
(0x0100),

2708 
fûl_b2
(0x1F),

2718 
DEVFL_MKII_ONLY
,

2719 
NULL
,

2720 
Ál£
,

2725 
CMND_SET_DEVICE_DESCRIPTOR
,

2745 
fûl_b2
(256),

2747 
fûl_b4
(0x3E00),

2748 
fûl_b2
(0xFA),

2749 
fûl_b4
(32768),

2754 
fûl_b2
(32768 / 256),

2758 
fûl_b2
(0x00),

2761 
fûl_b2
(0x0100),

2766 
fûl_b2
(0x1F),

2776 
DEVFL_MKII_ONLY
,

2777 
NULL
,

2778 
Ál£
,

2783 
CMND_SET_DEVICE_DESCRIPTOR
,

2803 
fûl_b2
(256),

2805 
fûl_b4
(0x7E00),

2806 
fûl_b2
(0xFA),

2807 
fûl_b4
(65536),

2812 
fûl_b2
(65536 / 256),

2816 
fûl_b2
(0x00),

2819 
fûl_b2
(0x0100),

2824 
fûl_b2
(0x1F),

2834 
DEVFL_MKII_ONLY
,

2835 
NULL
,

2836 
Ál£
,

2841 
CMND_SET_DEVICE_DESCRIPTOR
,

2861 
fûl_b2
(64),

2863 
fûl_b4
(0x1F00),

2864 
fûl_b2
(0xFF),

2865 
fûl_b4
(16384),

2872 
fûl_b2
(16384 / 64),

2876 
fûl_b2
(0x1F00),

2879 
fûl_b2
(0x0100),

2884 
fûl_b2
(0x1F),

2894 
DEVFL_MKII_ONLY
,

2895 
NULL
,

2896 
Ál£
,

2901 
CMND_SET_DEVICE_DESCRIPTOR
,

2921 
fûl_b2
(64),

2923 
fûl_b4
(0x1F00),

2924 
fûl_b2
(0xFF),

2925 
fûl_b4
(16384),

2932 
fûl_b2
(16384 / 64),

2936 
fûl_b2
(0x1F00),

2939 
fûl_b2
(0x0100),

2944 
fûl_b2
(0x1F),

2954 
DEVFL_MKII_ONLY
,

2955 
NULL
,

2956 
Ál£
,

2961 
CMND_SET_DEVICE_DESCRIPTOR
,

2981 
fûl_b2
(256),

2983 
fûl_b4
(0xFE00),

2984 
fûl_b2
(0x00FF),

2985 
fûl_b4
(131072),

2990 
fûl_b2
(131072 / 256),

2994 
fûl_b2
(0x00),

2997 
fûl_b2
(0x100),

3002 
fûl_b2
(0x1F),

3012 
DEVFL_MKII_ONLY
,

3013 
NULL
,

3014 
Ál£
,

3019 
CMND_SET_DEVICE_DESCRIPTOR
,

3039 
fûl_b2
(128),

3041 
fûl_b4
(0x1F00),

3042 
fûl_b2
(0xFB),

3043 
fûl_b4
(16384),

3050 
fûl_b2
(16384 / 128),

3054 
fûl_b2
(0x1F00),

3057 
fûl_b2
(0x100),

3062 
fûl_b2
(0x1F),

3072 
DEVFL_MKII_ONLY
,

3073 
NULL
,

3074 
Ál£
,

3079 
CMND_SET_DEVICE_DESCRIPTOR
,

3099 
fûl_b2
(256),

3101 
fûl_b4
(0xFE00),

3102 
fûl_b2
(0x00FF),

3103 
fûl_b4
(65536),

3108 
fûl_b2
(65536 / 256),

3112 
fûl_b2
(0x00),

3115 
fûl_b2
(0x100),

3120 
fûl_b2
(0x1F),

3130 
DEVFL_MKII_ONLY
,

3131 
NULL
,

3132 
Ál£
,

3137 
CMND_SET_DEVICE_DESCRIPTOR
,

3157 
fûl_b2
(256),

3159 
fûl_b4
(0xFE00),

3160 
fûl_b2
(0x00FF),

3161 
fûl_b4
(65536),

3166 
fûl_b2
(65536 / 256),

3170 
fûl_b2
(0x00),

3173 
fûl_b2
(0x100),

3178 
fûl_b2
(0x1F),

3188 
DEVFL_MKII_ONLY
,

3189 
NULL
,

3190 
Ál£
,

3195 
CMND_SET_DEVICE_DESCRIPTOR
,

3215 
fûl_b2
(256),

3217 
fûl_b4
(0xFE00),

3218 
fûl_b2
(0xCE),

3219 
fûl_b4
(131072),

3224 
fûl_b2
(131072 / 256),

3228 
fûl_b2
(0x00),

3231 
fûl_b2
(0x100),

3236 
fûl_b2
(0x1F),

3246 
DEVFL_MKII_ONLY
,

3247 
NULL
,

3248 
Ál£
,

3253 
CMND_SET_DEVICE_DESCRIPTOR
,

3273 
fûl_b2
(128),

3275 
fûl_b4
(0x1F80),

3276 
fûl_b2
(0xFE),

3277 
fûl_b4
(16384),

3282 
fûl_b2
(16384 / 128),

3286 
fûl_b2
(0x00),

3289 
fûl_b2
(0x100),

3294 
fûl_b2
(0x1F),

3304 
DEVFL_MKII_ONLY
,

3305 
NULL
,

3306 
Ál£
,

3311 
CMND_SET_DEVICE_DESCRIPTOR
,

3331 
fûl_b2
(128),

3333 
fûl_b4
(0x1F80),

3334 
fûl_b2
(0xFE),

3335 
fûl_b4
(16384),

3340 
fûl_b2
(16384 / 128),

3344 
fûl_b2
(0x00),

3347 
fûl_b2
(0x100),

3352 
fûl_b2
(0x1F),

3362 
DEVFL_MKII_ONLY
,

3363 
NULL
,

3364 
Ál£
,

3369 
CMND_SET_DEVICE_DESCRIPTOR
,

3389 
fûl_b2
(128),

3391 
fûl_b4
(0x1F80),

3392 
fûl_b2
(0xC6),

3393 
fûl_b4
(16384),

3400 
fûl_b2
(16384 / 128),

3404 
fûl_b2
(0x1F80),

3407 
fûl_b2
(0x100),

3412 
fûl_b2
(0x1F),

3422 
DEVFL_MKII_ONLY
,

3423 
NULL
,

3424 
Ál£
,

3429 
CMND_SET_DEVICE_DESCRIPTOR
,

3449 
fûl_b2
(128),

3451 
fûl_b4
(0),

3452 
fûl_b2
(0xFE),

3453 
fûl_b4
(16384),

3460 
fûl_b2
(16384 / 128),

3464 
fûl_b2
(0x00),

3467 
fûl_b2
(0x100),

3472 
fûl_b2
(0x1F),

3482 
DEVFL_MKII_ONLY
,

3483 
NULL
,

3484 
Ál£
,

3489 
CMND_SET_DEVICE_DESCRIPTOR
,

3509 
fûl_b2
(128),

3511 
fûl_b4
(0x3F00),

3512 
fûl_b2
(0xDD),

3513 
fûl_b4
(32768),

3518 
fûl_b2
(32768 / 128),

3522 
fûl_b2
(0x00),

3525 
fûl_b2
(0x100),

3530 
fûl_b2
(0x1F),

3540 
DEVFL_MKII_ONLY
,

3541 
NULL
,

3542 
Ál£
,

3547 
CMND_SET_DEVICE_DESCRIPTOR
,

3567 
fûl_b2
(128),

3569 
fûl_b4
(0x3F00),

3570 
fûl_b2
(0xC6),

3571 
fûl_b4
(32768),

3576 
fûl_b2
(32768 / 128),

3580 
fûl_b2
(0x00),

3583 
fûl_b2
(0x100),

3588 
fûl_b2
(0x1F),

3598 
DEVFL_MKII_ONLY
,

3599 
NULL
,

3600 
Ál£
,

3605 
CMND_SET_DEVICE_DESCRIPTOR
,

3625 
fûl_b2
(128),

3627 
fûl_b4
(0x3F00),

3628 
fûl_b2
(0xC6),

3629 
fûl_b4
(32768),

3636 
fûl_b2
(32768 / 128),

3640 
fûl_b2
(0x3F00),

3643 
fûl_b2
(0x100),

3648 
fûl_b2
(0x1F),

3658 
DEVFL_MKII_ONLY
,

3659 
NULL
,

3660 
Ál£
,

3665 
CMND_SET_DEVICE_DESCRIPTOR
,

3685 
fûl_b2
(128),

3687 
fûl_b4
(0x3F00),

3688 
fûl_b2
(0xFF),

3689 
fûl_b4
(32768),

3694 
fûl_b2
(32768 / 128),

3698 
fûl_b2
(0x00),

3701 
fûl_b2
(0x100),

3706 
fûl_b2
(0x1F),

3716 
DEVFL_MKII_ONLY
,

3717 
NULL
,

3718 
Ál£
,

3723 
CMND_SET_DEVICE_DESCRIPTOR
,

3743 
fûl_b2
(128),

3745 
fûl_b4
(0x3F00),

3746 
fûl_b2
(0xFE),

3747 
fûl_b4
(32768),

3752 
fûl_b2
(32768 / 128),

3756 
fûl_b2
(0x00),

3759 
fûl_b2
(0x100),

3764 
fûl_b2
(0x1F),

3774 
DEVFL_MKII_ONLY
,

3775 
NULL
,

3776 
Ál£
,

3781 
CMND_SET_DEVICE_DESCRIPTOR
,

3801 
fûl_b2
(128),

3803 
fûl_b4
(0x3F00),

3804 
fûl_b2
(0xFE),

3805 
fûl_b4
(32768),

3812 
fûl_b2
(32768 / 128),

3816 
fûl_b2
(0x3F00),

3819 
fûl_b2
(0x100),

3824 
fûl_b2
(0x1F),

3834 
DEVFL_MKII_ONLY
,

3835 
NULL
,

3836 
Ál£
,

3841 
CMND_SET_DEVICE_DESCRIPTOR
,

3861 
fûl_b2
(128),

3863 
fûl_b4
(0x3F00),

3864 
fûl_b2
(0x00FF),

3865 
fûl_b4
(32768),

3870 
fûl_b2
(32768 / 128),

3874 
fûl_b2
(0x00),

3877 
fûl_b2
(0x100),

3882 
fûl_b2
(0x1F),

3892 
DEVFL_MKII_ONLY
,

3893 
NULL
,

3894 
Ál£
,

3899 
CMND_SET_DEVICE_DESCRIPTOR
,

3919 
fûl_b2
(128),

3921 
fûl_b4
(0x4F00),

3922 
fûl_b2
(0xF8),

3923 
fûl_b4
(40960),

3928 
fûl_b2
(40960 / 128),

3932 
fûl_b2
(0x00),

3935 
fûl_b2
(0x100),

3940 
fûl_b2
(0x1F),

3950 
DEVFL_MKII_ONLY
,

3951 
NULL
,

3952 
Ál£
,

3957 
CMND_SET_DEVICE_DESCRIPTOR
,

3977 
fûl_b2
(64),

3979 
fûl_b4
(0x0000),

3980 
fûl_b2
(0xC6),

3981 
fûl_b4
(4096),

3988 
fûl_b2
(4096 / 64),

3992 
fûl_b2
(0x00),

3995 
fûl_b2
(0x100),

4000 
fûl_b2
(0x1F),

4010 
DEVFL_MKII_ONLY
,

4011 
NULL
,

4012 
Ál£
,

4017 
CMND_SET_DEVICE_DESCRIPTOR
,

4037 
fûl_b2
(256),

4039 
fûl_b4
(0x7e00),

4040 
fûl_b2
(0xCE),

4041 
fûl_b4
(65536),

4046 
fûl_b2
(65536 / 256),

4050 
fûl_b2
(0x00),

4053 
fûl_b2
(0x100),

4058 
fûl_b2
(0x1F),

4068 
DEVFL_MKII_ONLY
,

4069 
NULL
,

4070 
Ál£
,

4075 
CMND_SET_DEVICE_DESCRIPTOR
,

4095 
fûl_b2
(64),

4097 
fûl_b4
(0x0F80),

4098 
fûl_b2
(0xC6),

4099 
fûl_b4
(8192),

4106 
fûl_b2
(8192 / 64),

4110 
fûl_b2
(0xF80),

4113 
fûl_b2
(0x100),

4118 
fûl_b2
(0x1F),

4128 
DEVFL_MKII_ONLY
,

4129 
NULL
,

4130 
Ál£
,

4135 
CMND_SET_DEVICE_DESCRIPTOR
,

4153 
fûl_b2
(128),

4155 
fûl_b4
(0),

4156 
fûl_b2
(0x00D2),

4157 
fûl_b4
(16384),

4164 
fûl_b2
(16384 / 128),

4168 
fûl_b2
(0x00),

4171 
fûl_b2
(0x0100),

4176 
fûl_b2
(0x1F),

4186 
DEVFL_MKII_ONLY
,

4187 
NULL
,

4188 
Ál£
,

4193 
CMND_SET_DEVICE_DESCRIPTOR
,

4213 
fûl_b2
(64),

4215 
fûl_b4
(0),

4216 
fûl_b2
(0x0000),

4217 
fûl_b4
(4096),

4224 
fûl_b2
(4096 / 64),

4228 
fûl_b2
(0x00),

4231 
fûl_b2
(0x60),

4236 
fûl_b2
(0x1C),

4246 
DEVFL_MKII_ONLY
,

4247 
NULL
,

4248 
Ál£
,

4253 
CMND_SET_DEVICE_DESCRIPTOR
,

4273 
fûl_b2
(64),

4275 
fûl_b4
(0x0000),

4276 
fûl_b2
(0xBD),

4277 
fûl_b4
(4096),

4284 
fûl_b2
(4096 / 64),

4288 
fûl_b2
(0x00),

4291 
fûl_b2
(0x100),

4296 
fûl_b2
(0x1F),

4306 
DEVFL_MKII_ONLY
,

4307 
NULL
,

4308 
åue
,

4313 
CMND_SET_DEVICE_DESCRIPTOR
,

4333 
fûl_b2
(64),

4335 
fûl_b4
(0x0000),

4336 
fûl_b2
(0xBD),

4337 
fûl_b4
(8192),

4344 
fûl_b2
(8192 / 64),

4348 
fûl_b2
(0x00),

4351 
fûl_b2
(0x100),

4356 
fûl_b2
(0x1F),

4366 
DEVFL_MKII_ONLY
,

4367 
NULL
,

4368 
Ál£
,

4373 
CMND_SET_DEVICE_DESCRIPTOR
,

4395 
fûl_b2
(512),

4397 
fûl_b4
(0x20000),

4398 
fûl_b2
(0x136),

4399 
fûl_b4
(139264),

4404 
fûl_b2
(139264 / 512),

4408 
fûl_b2
(0x00),

4411 
fûl_b2
(8192),

4416 
fûl_b2
(0),

4426 
DEVFL_MKII_ONLY
,

4427 
NULL
,

4428 
åue
,

4433 
CMND_SET_DEVICE_DESCRIPTOR
,

4455 
fûl_b2
(512),

4457 
fûl_b4
(0x20000),

4458 
fûl_b2
(0x136),

4459 
fûl_b4
(139264),

4464 
fûl_b2
(139264 / 512),

4468 
fûl_b2
(0x00),

4471 
fûl_b2
(8192),

4476 
fûl_b2
(0),

4486 
DEVFL_MKII_ONLY
,

4487 
NULL
,

4488 
Ál£
,

4493 
CMND_SET_DEVICE_DESCRIPTOR
,

4521 
fûl_b2
(256),

4523 
fûl_b4
(0xFE00),

4524 
fûl_b2
(0x01FF),

4525 
fûl_b4
(131072),

4530 
fûl_b2
(131072 / 256),

4534 
fûl_b2
(0x00),

4537 
fûl_b2
(0x200),

4542 
fûl_b2
(0x1F),

4547 
NULL
,

4552 
DEVFL_NONE
,

4553 
NULL
,

4554 
Ál£
,

	@gnu_getopt.c

30 #i‚de‡
_NO_PROTO


31 
	#_NO_PROTO


	)

34 #ifde‡
HAVE_CONFIG_H


35 
	~<autoc⁄f.h
>

38 #i‡!
deföed
 
__STDC__
 || !__STDC__

42 c⁄°

	)

46 
	~<°dio.h
>

56 
	#GETOPT_INTERFACE_VERSION
 2

	)

57 #i‡!
deföed
 
_LIBC
 && deföed 
__GLIBC__
 && __GLIBC__ >= 2

58 
	~<gnu-vîsi⁄s.h
>

59 #i‡
_GNU_GETOPT_INTERFACE_VERSION
 =
GETOPT_INTERFACE_VERSION


60 
	#ELIDE_CODE


	)

64 #i‚de‡
ELIDE_CODE


69 #ifdef 
__GNU_LIBRARY__


72 
	~<°dlib.h
>

73 
	~<uni°d.h
>

76 #ifde‡
VMS


77 
	~<unixlib.h
>

78 #i‡
HAVE_STRING_H
 - 0

79 
	~<°rög.h
>

83 #i‚de‡
_


86 #ifde‡
HAVE_LIBINTL_H


87 
	~<liböé.h
>

88 
	#_
(
msgid
Ë
	`gëãxt
 (msgid)

	)

90 
	#_
(
msgid
Ë(msgid)

	)

108 
	~"gnu_gë›t.h
"

116 *
	g›èrg
 = 
NULL
;

131 
	g›töd
 = 1;

137 
	g__gë›t_öôülized
 = 0;

146 *
	g√xtch¨
;

151 
	g›ãº
 = 1;

157 
	g›t›t
 = '?';

190 
	mREQUIRE_ORDER
, 
	mPERMUTE
, 
	mRETURN_IN_ORDER


191 } 
	g‹dîög
;

194 *
	gposixly_c‹ª˘
;

196 #ifdef 
__GNU_LIBRARY__


201 
	~<°rög.h
>

202 
	#my_ödex
 
°rchr


	)

205 #i‡
HAVE_STRING_H


206 
	~<°rög.h
>

208 #i‡
HAVE_STRINGS_H


209 
	~<°rögs.h
>

216 #i‚de‡
gëív


217 *
gëív
 ();

221 
	$my_ödex
 (
°r
, 
chr
)

222 c⁄° *
°r
;

223 
chr
;

225 *
°r
)

227 i‡(*
°r
 =
chr
)

228  (*Ë
°r
;

229 
°r
++;

232 
	}
}

236 #ifde‡
__GNUC__


239 #i‡(!
deföed
 
__STDC__
 || !__STDC__Ë&& !deföed 
°æí


242 
°æí
 (const *);

254 
	gfú°_n⁄›t
;

255 
	gœ°_n⁄›t
;

257 #ifde‡
_LIBC


262 *
__gë›t_n⁄›ti⁄_Êags
;

264 
	gn⁄›ti⁄_Êags_max_Àn
;

265 
	gn⁄›ti⁄_Êags_Àn
;

267 
	g‹igöÆ_¨gc
;

268 *c⁄° *
	g‹igöÆ_¨gv
;

274 
__©åibuã__
 ((
unu£d
))

275 
	$°‹e_¨gs_™d_ív
 (
¨gc
, *c⁄° *
¨gv
)

279 
‹igöÆ_¨gc
 = 
¨gc
;

280 
‹igöÆ_¨gv
 = 
¨gv
;

281 
	}
}

282 #ifde‡
ãxt_£t_ñemít


283 
ãxt_£t_ñemít
 (
__libc_suböô
, 
°‹e_¨gs_™d_ív
);

286 
	#SWAP_FLAGS
(
ch1
, 
ch2
) \

287 i‡(
n⁄›ti⁄_Êags_Àn
 > 0) \

289 
__tmp
 = 
__gë›t_n⁄›ti⁄_Êags
[
ch1
]; \

290 
__gë›t_n⁄›ti⁄_Êags
[
ch1
] = __gë›t_n⁄›ti⁄_Êags[
ch2
]; \

291 
__gë›t_n⁄›ti⁄_Êags
[
ch2
] = 
__tmp
; \

292 }

	)

294 
	#SWAP_FLAGS
(
ch1
, 
ch2
)

	)

306 #i‡
deföed
 
__STDC__
 && __STDC__

307 
exch™ge
 (**);

311 
	$exch™ge
 (
¨gv
)

312 **
¨gv
;

314 
bŸtom
 = 
fú°_n⁄›t
;

315 
middÀ
 = 
œ°_n⁄›t
;

316 
t›
 = 
›töd
;

317 *
ãm
;

324 #ifde‡
_LIBC


328 i‡(
n⁄›ti⁄_Êags_Àn
 > 0 && 
t›
 >
n⁄›ti⁄_Êags_max_Àn
)

332 *
√w_°r
 = 
	`mÆloc
 (
t›
 + 1);

333 i‡(
√w_°r
 =
NULL
)

334 
n⁄›ti⁄_Êags_Àn
 = 
n⁄›ti⁄_Êags_max_Àn
 = 0;

337 
	`mem£t
 (
	`__memp˝y
 (
√w_°r
, 
__gë›t_n⁄›ti⁄_Êags
,

338 
n⁄›ti⁄_Êags_max_Àn
),

339 '\0', 
t›
 + 1 - 
n⁄›ti⁄_Êags_max_Àn
);

340 
n⁄›ti⁄_Êags_max_Àn
 = 
t›
 + 1;

341 
__gë›t_n⁄›ti⁄_Êags
 = 
√w_°r
;

346 
t›
 > 
middÀ
 && middÀ > 
bŸtom
)

348 i‡(
t›
 - 
middÀ
 > middÀ - 
bŸtom
)

351 
Àn
 = 
middÀ
 - 
bŸtom
;

352 
i
;

355 
i
 = 0; i < 
Àn
; i++)

357 
ãm
 = 
¨gv
[
bŸtom
 + 
i
];

358 
¨gv
[
bŸtom
 + 
i
] =árgv[
t›
 - (
middÀ
 - bottom) + i];

359 
¨gv
[
t›
 - (
middÀ
 - 
bŸtom
Ë+ 
i
] = 
ãm
;

360 
	`SWAP_FLAGS
 (
bŸtom
 + 
i
, 
t›
 - (
middÀ
 - bottom) + i);

363 
t›
 -
Àn
;

368 
Àn
 = 
t›
 - 
middÀ
;

369 
i
;

372 
i
 = 0; i < 
Àn
; i++)

374 
ãm
 = 
¨gv
[
bŸtom
 + 
i
];

375 
¨gv
[
bŸtom
 + 
i
] =árgv[
middÀ
 + i];

376 
¨gv
[
middÀ
 + 
i
] = 
ãm
;

377 
	`SWAP_FLAGS
 (
bŸtom
 + 
i
, 
middÀ
 + i);

380 
bŸtom
 +
Àn
;

386 
fú°_n⁄›t
 +(
›töd
 - 
œ°_n⁄›t
);

387 
œ°_n⁄›t
 = 
›töd
;

388 
	}
}

392 #i‡
deföed
 
__STDC__
 && __STDC__

393 c⁄° *
_gë›t_öôülize
 (, *const *, const *);

396 
	$_gë›t_öôülize
 (
¨gc
, 
¨gv
, 
›t°rög
)

397 
¨gc
;

398 *c⁄° *
¨gv
;

399 c⁄° *
›t°rög
;

405 
fú°_n⁄›t
 = 
œ°_n⁄›t
 = 
›töd
;

407 
√xtch¨
 = 
NULL
;

409 
posixly_c‹ª˘
 = 
	`gëív
 ("POSIXLY_CORRECT");

413 i‡(
›t°rög
[0] == '-')

415 
‹dîög
 = 
RETURN_IN_ORDER
;

416 ++
›t°rög
;

418 i‡(
›t°rög
[0] == '+')

420 
‹dîög
 = 
REQUIRE_ORDER
;

421 ++
›t°rög
;

423 i‡(
posixly_c‹ª˘
 !
NULL
)

424 
‹dîög
 = 
REQUIRE_ORDER
;

426 
‹dîög
 = 
PERMUTE
;

428 #ifde‡
_LIBC


429 i‡(
posixly_c‹ª˘
 =
NULL


430 && 
¨gc
 =
‹igöÆ_¨gc
 && 
¨gv
 =
‹igöÆ_¨gv
)

432 i‡(
n⁄›ti⁄_Êags_max_Àn
 == 0)

434 i‡(
__gë›t_n⁄›ti⁄_Êags
 =
NULL


435 || 
__gë›t_n⁄›ti⁄_Êags
[0] == '\0')

436 
n⁄›ti⁄_Êags_max_Àn
 = -1;

439 c⁄° *
‹ig_°r
 = 
__gë›t_n⁄›ti⁄_Êags
;

440 
Àn
 = 
n⁄›ti⁄_Êags_max_Àn
 = 
	`°æí
 (
‹ig_°r
);

441 i‡(
n⁄›ti⁄_Êags_max_Àn
 < 
¨gc
)

442 
n⁄›ti⁄_Êags_max_Àn
 = 
¨gc
;

443 
__gë›t_n⁄›ti⁄_Êags
 =

444 (*Ë
	`mÆloc
 (
n⁄›ti⁄_Êags_max_Àn
);

445 i‡(
__gë›t_n⁄›ti⁄_Êags
 =
NULL
)

446 
n⁄›ti⁄_Êags_max_Àn
 = -1;

448 
	`mem£t
 (
	`__memp˝y
 (
__gë›t_n⁄›ti⁄_Êags
, 
‹ig_°r
, 
Àn
),

449 '\0', 
n⁄›ti⁄_Êags_max_Àn
 - 
Àn
);

452 
n⁄›ti⁄_Êags_Àn
 = 
n⁄›ti⁄_Êags_max_Àn
;

455 
n⁄›ti⁄_Êags_Àn
 = 0;

458  
›t°rög
;

459 
	}
}

518 
	$_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›t°rög
, 
l⁄g›ts
, 
l⁄göd
, 
l⁄g_⁄ly
)

519 
¨gc
;

520 *c⁄° *
¨gv
;

521 c⁄° *
›t°rög
;

522 c⁄° 
›ti⁄
 *
l⁄g›ts
;

523 *
l⁄göd
;

524 
l⁄g_⁄ly
;

526 
›èrg
 = 
NULL
;

528 i‡(
›töd
 =0 || !
__gë›t_öôülized
)

530 i‡(
›töd
 == 0)

531 
›töd
 = 1;

532 
›t°rög
 = 
	`_gë›t_öôülize
 (
¨gc
, 
¨gv
, optstring);

533 
__gë›t_öôülized
 = 1;

540 #ifde‡
_LIBC


541 
	#NONOPTION_P
 (
¨gv
[
›töd
][0] != '-' ||árgv[optind][1] == '\0' \

542 || (
›töd
 < 
n⁄›ti⁄_Êags_Àn
 \

543 && 
__gë›t_n⁄›ti⁄_Êags
[
›töd
] ='1'))

	)

545 
	#NONOPTION_P
 (
¨gv
[
›töd
][0] !'-' ||árgv[›töd][1] ='\0')

	)

548 i‡(
√xtch¨
 =
NULL
 || *nextchar == '\0')

554 i‡(
œ°_n⁄›t
 > 
›töd
)

555 
œ°_n⁄›t
 = 
›töd
;

556 i‡(
fú°_n⁄›t
 > 
›töd
)

557 
fú°_n⁄›t
 = 
›töd
;

559 i‡(
‹dîög
 =
PERMUTE
)

564 i‡(
fú°_n⁄›t
 !
œ°_n⁄›t
 &&Üa°_n⁄›à!
›töd
)

565 
	`exch™ge
 ((**Ë
¨gv
);

566 i‡(
œ°_n⁄›t
 !
›töd
)

567 
fú°_n⁄›t
 = 
›töd
;

572 
›töd
 < 
¨gc
 && 
NONOPTION_P
)

573 
›töd
++;

574 
œ°_n⁄›t
 = 
›töd
;

582 i‡(
›töd
 !
¨gc
 && !
	`°rcmp
 (
¨gv
[optind], "--"))

584 
›töd
++;

586 i‡(
fú°_n⁄›t
 !
œ°_n⁄›t
 &&Üa°_n⁄›à!
›töd
)

587 
	`exch™ge
 ((**Ë
¨gv
);

588 i‡(
fú°_n⁄›t
 =
œ°_n⁄›t
)

589 
fú°_n⁄›t
 = 
›töd
;

590 
œ°_n⁄›t
 = 
¨gc
;

592 
›töd
 = 
¨gc
;

598 i‡(
›töd
 =
¨gc
)

602 i‡(
fú°_n⁄›t
 !
œ°_n⁄›t
)

603 
›töd
 = 
fú°_n⁄›t
;

610 i‡(
NONOPTION_P
)

612 i‡(
‹dîög
 =
REQUIRE_ORDER
)

614 
›èrg
 = 
¨gv
[
›töd
++];

621 
√xtch¨
 = (
¨gv
[
›töd
] + 1

622 + (
l⁄g›ts
 !
NULL
 && 
¨gv
[
›töd
][1] == '-'));

640 i‡(
l⁄g›ts
 !
NULL


641 && (
¨gv
[
›töd
][1] == '-'

642 || (
l⁄g_⁄ly
 && (
¨gv
[
›töd
][2] || !
	`my_ödex
 (
›t°rög
,árgv[optind][1])))))

644 *
«mìnd
;

645 c⁄° 
›ti⁄
 *
p
;

646 c⁄° 
›ti⁄
 *
pfound
 = 
NULL
;

647 
exa˘
 = 0;

648 
ambig
 = 0;

649 
ödfound
 = -1;

650 
›ti⁄_ödex
;

652 
«mìnd
 = 
√xtch¨
; *nameend && *nameend != '=';Çameend++)

657 
p
 = 
l⁄g›ts
, 
›ti⁄_ödex
 = 0;Ö->
«me
;Ö++, option_index++)

658 i‡(!
	`°∫cmp
 (
p
->
«me
, 
√xtch¨
, 
«mìnd
 -Çextchar))

660 i‡((Ë(
«mìnd
 - 
√xtch¨
)

661 =(Ë
	`°æí
 (
p
->
«me
))

664 
pfound
 = 
p
;

665 
ödfound
 = 
›ti⁄_ödex
;

666 
exa˘
 = 1;

669 i‡(
pfound
 =
NULL
)

672 
pfound
 = 
p
;

673 
ödfound
 = 
›ti⁄_ödex
;

677 
ambig
 = 1;

680 i‡(
ambig
 && !
exa˘
)

682 i‡(
›ãº
)

683 
	`Ârötf
 (
°dîr
, 
	`_
("%s: option `%s' isámbiguous\n"),

684 
¨gv
[0],árgv[
›töd
]);

685 
√xtch¨
 +
	`°æí
 (nextchar);

686 
›töd
++;

687 
›t›t
 = 0;

691 i‡(
pfound
 !
NULL
)

693 
›ti⁄_ödex
 = 
ödfound
;

694 
›töd
++;

695 i‡(*
«mìnd
)

699 i‡(
pfound
->
has_¨g
)

700 
›èrg
 = 
«mìnd
 + 1;

703 i‡(
›ãº
)

705 i‡(
¨gv
[
›töd
 - 1][1] == '-')

707 
	`Ârötf
 (
°dîr
,

708 
	`_
("%s: option `--%s' doesn'tállowánárgument\n"),

709 
¨gv
[0], 
pfound
->
«me
);

712 
	`Ârötf
 (
°dîr
,

713 
	`_
("%s: option `%c%s' doesn'tállowánárgument\n"),

714 
¨gv
[0],árgv[
›töd
 - 1][0], 
pfound
->
«me
);

716 
√xtch¨
 +
	`°æí
 (nextchar);

718 
›t›t
 = 
pfound
->
vÆ
;

723 i‡(
pfound
->
has_¨g
 == 1)

725 i‡(
›töd
 < 
¨gc
)

726 
›èrg
 = 
¨gv
[
›töd
++];

729 i‡(
›ãº
)

730 
	`Ârötf
 (
°dîr
,

731 
	`_
("%s: option `%s'Ñequiresánárgument\n"),

732 
¨gv
[0],árgv[
›töd
 - 1]);

733 
√xtch¨
 +
	`°æí
 (nextchar);

734 
›t›t
 = 
pfound
->
vÆ
;

735  
›t°rög
[0] == ':' ? ':' : '?';

738 
√xtch¨
 +
	`°æí
 (nextchar);

739 i‡(
l⁄göd
 !
NULL
)

740 *
l⁄göd
 = 
›ti⁄_ödex
;

741 i‡(
pfound
->
Êag
)

743 *(
pfound
->
Êag
Ëpfound->
vÆ
;

746  
pfound
->
vÆ
;

753 i‡(!
l⁄g_⁄ly
 || 
¨gv
[
›töd
][1] == '-'

754 || 
	`my_ödex
 (
›t°rög
, *
√xtch¨
Ë=
NULL
)

756 i‡(
›ãº
)

758 i‡(
¨gv
[
›töd
][1] == '-')

760 
	`Ârötf
 (
°dîr
, 
	`_
("%s: unrecognized option `--%s'\n"),

761 
¨gv
[0], 
√xtch¨
);

764 
	`Ârötf
 (
°dîr
, 
	`_
("%s: unrecognized option `%c%s'\n"),

765 
¨gv
[0],árgv[
›töd
][0], 
√xtch¨
);

767 
√xtch¨
 = (*) "";

768 
›töd
++;

769 
›t›t
 = 0;

777 
c
 = *
√xtch¨
++;

778 *
ãmp
 = 
	`my_ödex
 (
›t°rög
, 
c
);

781 i‡(*
√xtch¨
 == '\0')

782 ++
›töd
;

784 i‡(
ãmp
 =
NULL
 || 
c
 == ':')

786 i‡(
›ãº
)

788 i‡(
posixly_c‹ª˘
)

790 
	`Ârötf
 (
°dîr
, 
	`_
("%s: illegal option -- %c\n"),

791 
¨gv
[0], 
c
);

793 
	`Ârötf
 (
°dîr
, 
	`_
("%s: invalid option -- %c\n"),

794 
¨gv
[0], 
c
);

796 
›t›t
 = 
c
;

800 i‡(
ãmp
[0] == 'W' &&Åemp[1] == ';')

802 *
«mìnd
;

803 c⁄° 
›ti⁄
 *
p
;

804 c⁄° 
›ti⁄
 *
pfound
 = 
NULL
;

805 
exa˘
 = 0;

806 
ambig
 = 0;

807 
ödfound
 = 0;

808 
›ti⁄_ödex
;

811 i‡(*
√xtch¨
 != '\0')

813 
›èrg
 = 
√xtch¨
;

816 
›töd
++;

818 i‡(
›töd
 =
¨gc
)

820 i‡(
›ãº
)

823 
	`Ârötf
 (
°dîr
, 
	`_
("%s: optionÑequiresánárgument -- %c\n"),

824 
¨gv
[0], 
c
);

826 
›t›t
 = 
c
;

827 i‡(
›t°rög
[0] == ':')

828 
c
 = ':';

830 
c
 = '?';

831  
c
;

836 
›èrg
 = 
¨gv
[
›töd
++];

841 
√xtch¨
 = 
«mìnd
 = 
›èrg
; *nameend && *nameend != '=';Çameend++)

846 
p
 = 
l⁄g›ts
, 
›ti⁄_ödex
 = 0;Ö->
«me
;Ö++, option_index++)

847 i‡(!
	`°∫cmp
 (
p
->
«me
, 
√xtch¨
, 
«mìnd
 -Çextchar))

849 i‡((Ë(
«mìnd
 - 
√xtch¨
Ë=
	`°æí
 (
p
->
«me
))

852 
pfound
 = 
p
;

853 
ödfound
 = 
›ti⁄_ödex
;

854 
exa˘
 = 1;

857 i‡(
pfound
 =
NULL
)

860 
pfound
 = 
p
;

861 
ödfound
 = 
›ti⁄_ödex
;

865 
ambig
 = 1;

867 i‡(
ambig
 && !
exa˘
)

869 i‡(
›ãº
)

870 
	`Ârötf
 (
°dîr
, 
	`_
("%s: option `-W %s' isámbiguous\n"),

871 
¨gv
[0],árgv[
›töd
]);

872 
√xtch¨
 +
	`°æí
 (nextchar);

873 
›töd
++;

876 i‡(
pfound
 !
NULL
)

878 
›ti⁄_ödex
 = 
ödfound
;

879 i‡(*
«mìnd
)

883 i‡(
pfound
->
has_¨g
)

884 
›èrg
 = 
«mìnd
 + 1;

887 i‡(
›ãº
)

888 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: option `-W %s' doesn'tállowánárgument\n"),

890 
¨gv
[0], 
pfound
->
«me
);

892 
√xtch¨
 +
	`°æí
 (nextchar);

896 i‡(
pfound
->
has_¨g
 == 1)

898 i‡(
›töd
 < 
¨gc
)

899 
›èrg
 = 
¨gv
[
›töd
++];

902 i‡(
›ãº
)

903 
	`Ârötf
 (
°dîr
,

904 
	`_
("%s: option `%s'Ñequiresánárgument\n"),

905 
¨gv
[0],árgv[
›töd
 - 1]);

906 
√xtch¨
 +
	`°æí
 (nextchar);

907  
›t°rög
[0] == ':' ? ':' : '?';

910 
√xtch¨
 +
	`°æí
 (nextchar);

911 i‡(
l⁄göd
 !
NULL
)

912 *
l⁄göd
 = 
›ti⁄_ödex
;

913 i‡(
pfound
->
Êag
)

915 *(
pfound
->
Êag
Ëpfound->
vÆ
;

918  
pfound
->
vÆ
;

920 
√xtch¨
 = 
NULL
;

923 i‡(
ãmp
[1] == ':')

925 i‡(
ãmp
[2] == ':')

928 i‡(*
√xtch¨
 != '\0')

930 
›èrg
 = 
√xtch¨
;

931 
›töd
++;

934 
›èrg
 = 
NULL
;

935 
√xtch¨
 = 
NULL
;

940 i‡(*
√xtch¨
 != '\0')

942 
›èrg
 = 
√xtch¨
;

945 
›töd
++;

947 i‡(
›töd
 =
¨gc
)

949 i‡(
›ãº
)

952 
	`Ârötf
 (
°dîr
,

953 
	`_
("%s: optionÑequiresánárgument -- %c\n"),

954 
¨gv
[0], 
c
);

956 
›t›t
 = 
c
;

957 i‡(
›t°rög
[0] == ':')

958 
c
 = ':';

960 
c
 = '?';

965 
›èrg
 = 
¨gv
[
›töd
++];

966 
√xtch¨
 = 
NULL
;

969  
c
;

971 
	}
}

974 
	$gë›t
 (
¨gc
, 
¨gv
, 
›t°rög
)

975 
¨gc
;

976 *c⁄° *
¨gv
;

977 c⁄° *
›t°rög
;

979  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›t°rög
,

980 (c⁄° 
›ti⁄
 *) 0,

983 
	}
}

987 #ifde‡
TEST


993 
	$maö
 (
¨gc
, 
¨gv
)

994 
¨gc
;

995 **
¨gv
;

997 
c
;

998 
digô_›töd
 = 0;

1002 
this_›ti⁄_›töd
 = 
›töd
 ? optind : 1;

1004 
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "abc:d:0123456789");

1005 i‡(
c
 == -1)

1008 
c
)

1020 i‡(
digô_›töd
 !0 && digô_›töd !
this_›ti⁄_›töd
)

1021 
	`¥ötf
 ("digits occur inÅwo differentárgv-elements.\n");

1022 
digô_›töd
 = 
this_›ti⁄_›töd
;

1023 
	`¥ötf
 ("›ti⁄ %c\n", 
c
);

1027 
	`¥ötf
 ("optioná\n");

1031 
	`¥ötf
 ("option b\n");

1035 
	`¥ötf
 ("›ti⁄ c wôh vÆuê`%s'\n", 
›èrg
);

1042 
	`¥ötf
 ("?? gë›àªtu∫ed ch¨a˘î codê0%ÿ??\n", 
c
);

1046 i‡(
›töd
 < 
¨gc
)

1048 
	`¥ötf
 ("non-option ARGV-elements: ");

1049 
›töd
 < 
¨gc
)

1050 
	`¥ötf
 ("%†", 
¨gv
[
›töd
++]);

1051 
	`¥ötf
 ("\n");

1054 
	`exô
 (0);

1055 
	}
}

	@gnu_getopt.h

24 #i‚de‡
_GNU_GETOPT_H


25 
	#_GNU_GETOPT_H
 1

	)

27 #i‚de‡
__GETOPT_LONG_H__


28 
	#__GETOPT_LONG_H__
 1

	)

36 #unde‡
HAVE_DECL_GETOPT


37 
	#HAVE_DECL_GETOPT
 1

	)

39 #ifdef 
__˝lu•lus


49 *
›èrg
;

63 
›töd
;

68 
›ãº
;

72 
›t›t
;

95 
	s›ti⁄


97 #i‡
deföed
 (
__STDC__
) && __STDC__

98 c⁄° *
	g«me
;

100 *
	g«me
;

104 
	ghas_¨g
;

105 *
	gÊag
;

106 
	gvÆ
;

111 
	#no_¨gumít
 0

	)

112 
	#ªquúed_¨gumít
 1

	)

113 
	#›ti⁄Æ_¨gumít
 2

	)

115 #i‡
deföed
 (
__STDC__
) && __STDC__

121 #i‡
deföed
 (
__GNU_LIBRARY__
Ë|| (deföed (
HAVE_DECL_GETOPT
) && !HAVE_DECL_GETOPT)

125 
gë›t
 (
¨gc
, *c⁄° *
¨gv
, c⁄° *
sh‹t›ts
);

127 #i‡!
deföed
 (
HAVE_DECL_GETOPT
)

128 
gë›t
 ();

131 
gë›t_l⁄g
 (
¨gc
, *c⁄° *
¨gv
, c⁄° *
sh‹t›ts
,

132 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄göd
);

133 
gë›t_l⁄g_⁄ly
 (
¨gc
, *c⁄° *
¨gv
,

134 c⁄° *
sh‹t›ts
,

135 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄göd
);

138 
_gë›t_öã∫Æ
 (
¨gc
, *c⁄° *
¨gv
,

139 c⁄° *
sh‹t›ts
,

140 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄göd
,

141 
l⁄g_⁄ly
);

143 
gë›t
 ();

144 
gë›t_l⁄g
 ();

145 
gë›t_l⁄g_⁄ly
 ();

147 
_gë›t_öã∫Æ
 ();

150 #ifdef 
__˝lu•lus


	@gnu_getopt1.c

23 #ifde‡
HAVE_CONFIG_H


24 
	~<autoc⁄f.h
>

27 
	~"gnu_gë›t.h
"

29 #i‡!
deföed
 
__STDC__
 || !__STDC__

33 c⁄°

	)

37 
	~<°dio.h
>

47 
	#GETOPT_INTERFACE_VERSION
 2

	)

48 #i‡!
deföed
 
_LIBC
 && deföed 
__GLIBC__
 && __GLIBC__ >= 2

49 
	~<gnu-vîsi⁄s.h
>

50 #i‡
_GNU_GETOPT_INTERFACE_VERSION
 =
GETOPT_INTERFACE_VERSION


51 
	#ELIDE_CODE


	)

55 #i‚de‡
ELIDE_CODE


60 #ifde‡
__GNU_LIBRARY__


61 
	~<°dlib.h
>

64 #i‚def 
NULL


65 
	#NULL
 0

	)

69 
	$gë›t_l⁄g
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
)

70 
¨gc
;

71 *c⁄° *
¨gv
;

72 c⁄° *
›ti⁄s
;

73 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
;

74 *
›t_ödex
;

76  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
, 0);

77 
	}
}

85 
	$gë›t_l⁄g_⁄ly
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
)

86 
¨gc
;

87 *c⁄° *
¨gv
;

88 c⁄° *
›ti⁄s
;

89 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
;

90 *
›t_ödex
;

92  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
, 1);

93 
	}
}

98 #ifde‡
TEST


100 
	~<°dio.h
>

103 
	$maö
 (
¨gc
, 
¨gv
)

104 
¨gc
;

105 **
¨gv
;

107 
c
;

108 
digô_›töd
 = 0;

112 
this_›ti⁄_›töd
 = 
›töd
 ? optind : 1;

113 
›ti⁄_ödex
 = 0;

114 
›ti⁄
 
l⁄g_›ti⁄s
[] =

125 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "abc:d:0123456789",

126 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

127 i‡(
c
 == -1)

130 
c
)

133 
	`¥ötf
 ("›ti⁄ %s", 
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
);

134 i‡(
›èrg
)

135 
	`¥ötf
 (" wôhárg %s", 
›èrg
);

136 
	`¥ötf
 ("\n");

149 i‡(
digô_›töd
 !0 && digô_›töd !
this_›ti⁄_›töd
)

150 
	`¥ötf
 ("digits occur inÅwo differentárgv-elements.\n");

151 
digô_›töd
 = 
this_›ti⁄_›töd
;

152 
	`¥ötf
 ("›ti⁄ %c\n", 
c
);

156 
	`¥ötf
 ("optioná\n");

160 
	`¥ötf
 ("option b\n");

164 
	`¥ötf
 ("›ti⁄ c wôh vÆuê`%s'\n", 
›èrg
);

168 
	`¥ötf
 ("›ti⁄ d wôh vÆuê`%s'\n", 
›èrg
);

175 
	`¥ötf
 ("?? gë›àªtu∫ed ch¨a˘î codê0%ÿ??\n", 
c
);

179 i‡(
›töd
 < 
¨gc
)

181 
	`¥ötf
 ("non-option ARGV-elements: ");

182 
›töd
 < 
¨gc
)

183 
	`¥ötf
 ("%†", 
¨gv
[
›töd
++]);

184 
	`¥ötf
 ("\n");

187 
	`exô
 (0);

188 
	}
}

	@ioreg.cc

24 
	~"i‹eg.h
"

26 
gdb_io_ªg_def_ty≥
 
	g©mega16_io_ªgi°îs
[] =

32 { "ADCL", 0x24, 
IO_REG_RSE
 },

33 { "ADCH", 0x25, 
IO_REG_RSE
 },

40 { "UDR", 0x2C, 
IO_REG_RSE
 },

95 
gdb_io_ªg_def_ty≥
 
	g©mega162_io_ªgi°îs
[] =

100 { "UDR1", 0x23, 
IO_REG_RSE
 },

109 { "UDR0", 0x2C, 
IO_REG_RSE
 },

179 
gdb_io_ªg_def_ty≥
 
	g©mega169_io_ªgi°îs
[] =

239 { "ADCL", 0x78, 
IO_REG_RSE
 },

240 { "ADCH", 0x79, 
IO_REG_RSE
 },

269 { "UDR", 0xC6, 
IO_REG_RSE
 },

293 
gdb_io_ªg_def_ty≥
 
	g©mega32_io_ªgi°îs
[] =

299 { "ADCL", 0x24, 
IO_REG_RSE
 },

300 { "ADCH", 0x25, 
IO_REG_RSE
 },

307 { "UDR", 0x2C, 
IO_REG_RSE
 },

362 
gdb_io_ªg_def_ty≥
 
	g©mega128_io_ªgi°îs
[] =

368 { "ADCL", 0x24, 
IO_REG_RSE
 },

369 { "ADCH", 0x25, 
IO_REG_RSE
 },

376 { "UDR0", 0x2C, 
IO_REG_RSE
 },

467 { "UDR1", 0x9C, 
IO_REG_RSE
 },

472 
gdb_io_ªg_def_ty≥
 
	gioˇn128_io_ªgi°îs
[] =

536 { "ADCL", 0x78, 
IO_REG_RSE
 },

537 { "ADCH", 0x79, 
IO_REG_RSE
 },

583 { "UDR0", 0xC6, 
IO_REG_RSE
 },

589 { "UDR1", 0xCE, 
IO_REG_RSE
 },

	@ioreg.h

24 #i‚de‡
INCLUDE_IOREG_H


25 
	#INCLUDE_IOREG_H


	)

27 
	#IO_REG_RSE
 0x01

28 

	)

30 c⁄° * 
	m«me
;

31 c⁄° 
	mªg_addr
;

32 c⁄° 
	mÊags
;

33 } 
	tgdb_io_ªg_def_ty≥
;

35 
gdb_io_ªg_def_ty≥
 
©mega16_io_ªgi°îs
[];

36 
gdb_io_ªg_def_ty≥
 
©mega162_io_ªgi°îs
[];

37 
gdb_io_ªg_def_ty≥
 
©mega169_io_ªgi°îs
[];

38 
gdb_io_ªg_def_ty≥
 
©mega32_io_ªgi°îs
[];

39 
gdb_io_ªg_def_ty≥
 
©mega128_io_ªgi°îs
[];

40 
gdb_io_ªg_def_ty≥
 
ioˇn128_io_ªgi°îs
[];

	@jtag.h

25 #i‚de‡
JTAG_H


26 
	#JTAG_H


	)

28 
	~<sys/ty≥s.h
>

29 
	~<ãrmios.h
>

31 
	~"i‹eg.h
"

36 
	mcmd
;

43 
	mrd
[8];

44 
	mwr
[8];

45 
	msh_rd
[8];

46 
	msh_wr
[8];

51 
	mext_rd
[20];

52 
	mext_wr
[20];

53 
	mext_sh_rd
[20];

54 
	mext_sh_wr
[20];

58 
	midr_addr
;

59 
	m•m¸_addr
;

60 
	mømpz_addr
;

64 
	mÊash_pg_sz
[2];

65 
	mì¥om_pg_sz
;

67 
	mboŸ_addr
[4];

71 
	mœ°_ext_io_addr
;

74 
	meom
[2];

75 } 
	tjèg1_devi˚_desc_ty≥
;

84 
	mcmd
;

86 
	mucRódIO
[8];

87 
	mucRódIOShadow
[8];

88 
	mucWrôeIO
[8];

89 
	mucWrôeIOShadow
[8];

90 
	mucRódExtIO
[52];

91 
	mucRódIOExtShadow
[52];

92 
	mucWrôeExtIO
[52];

93 
	mucWrôeIOExtShadow
[52];

94 
	mucIDRAddªss
;

95 
	mucSPMCRAddªss
;

96 
	mucRAMPZAddªss
;

98 
	muiFœshPageSize
[2];

99 
	mucEïromPageSize
;

100 
	mulBoŸAddªss
[4];

101 
	muiUµîExtIOLoc
[2];

103 
	mulFœshSize
[4];

104 
	mucEïromIn°
[20];

105 
	mucFœshIn°
[3];

106 
	mucSPHaddr
;

107 
	mucSPLaddr
;

109 
	muiFœsh∑ges
[2];

110 
	mucDWDRAddªss
;

111 
	mucDWBa£PC
;

113 
	mucAŒowFuŒPageBô°ªam
;

115 
	muiSèπSmÆÀ°BoŸLﬂdîSe˘i⁄
[2];

117 
	mE«bÀPageProgømmög
;

119 
	mucCacheTy≥
;

123 
	muiSømSèπAddr
[2];

124 
	mucRe£tTy≥
;

126 
	mucPCMaskExãnded
;

127 
	mucPCMaskHigh
;

128 
	mucEödAddªss
;

130 
	mEECRAddªss
[2];

131 } 
	tjèg2_devi˚_desc_ty≥
;

133 
	#fûl_b4
(
u
) \

134 { ((
u
) & 0xffUL), (((u) & 0xff00UL) >> 8), \

135 (((
u
Ë& 0xff0000ULË>> 16), (((uË& 0xff000000ULË>> 24Ë}

	)

136 
	#fûl_b2
(
u
) \

137 { ((
u
Ë& 0xff), (((uË& 0xff00Ë>> 8Ë}

	)

139 
	edev_Êags
 {

140 
	mDEVFL_NONE
 = 0x000000,

141 
	mDEVFL_NO_SOFTBP
 = 0x000001,

142 
	mDEVFL_MKII_ONLY
 = 0x000002,

146 c⁄° * 
	m«me
;

147 c⁄° 
	mdevi˚_id
;

149 
	mÊash_∑ge_size
;

150 
	mÊash_∑ge_cou¡
;

151 
	mì¥om_∑ge_size
;

152 
	mì¥om_∑ge_cou¡
;

153 
	mve˘‹s_íd
;

154 
dev_Êags
 
	mdevi˚_Êags
;

156 
gdb_io_ªg_def_ty≥
 *
	mio_ªg_defs
;

158 
boﬁ
 
	mis_xmega
;

160 
jèg1_devi˚_desc_ty≥
 
	mdev_desc1
;

162 
jèg2_devi˚_desc_ty≥
 
	mdev_desc2
;

164 } 
	tjèg_devi˚_def_ty≥
;

166 
jèg_devi˚_def_ty≥
 *
globÆ_p_devi˚_def
, 
devi˚Deföôi⁄s
[];

174 
	mFLASH_SPACE_ADDR_OFFSET
 = 0x000000,

175 
	mDATA_SPACE_ADDR_OFFSET
 = 0x800000,

177 
	mEEPROM_SPACE_ADDR_OFFSET
 = 0x810000,

179 
	mFUSE_SPACE_ADDR_OFFSET
 = 0x820000,

181 
	mLOCK_SPACE_ADDR_OFFSET
 = 0x830000,

183 
	mSIG_SPACE_ADDR_OFFSET
 = 0x840000,

185 
	mBREAKPOINT_SPACE_ADDR_OFFSET
 = 0x900000,

187 
	mADDR_SPACE_MASK
 = (
DATA_SPACE_ADDR_OFFSET
 |

188 
EEPROM_SPACE_ADDR_OFFSET
 |

189 
FUSE_SPACE_ADDR_OFFSET
 |

190 
LOCK_SPACE_ADDR_OFFSET
 |

191 
SIG_SPACE_ADDR_OFFSET
 |

192 
BREAKPOINT_SPACE_ADDR_OFFSET
),

197 
	mMAX_JTAG_COMM_ATTEMPS
 = 10,

198 
	mMAX_JTAG_SYNC_ATTEMPS
 = 3,

200 
	mJTAG_RESPONSE_TIMEOUT
 = 1000000,

201 
	mJTAG_COMM_TIMEOUT
 = 100000,

204 
	mLOCK_BITS_ALL_UNLOCKED
 = 0xff,

210 
	mFUSE_M103C
 = 0x02,

211 
	mFUSE_WDTON
 = 0x01,

213 
	mFUSE_OCDEN
 = 0x80,

214 
	mFUSE_JTAGEN
 = 0x40,

215 
	mFUSE_SPIEN
 = 0x20,

216 
	mFUSE_CKOPT
 = 0x10,

217 
	mFUSE_EESAVE
 = 0x08,

218 
	mFUSE_BOOTSZ1
 = 0x04,

219 
	mFUSE_BOOTSZ0
 = 0x02,

220 
	mFUSE_BOOTRST
 = 0x01,

222 
	mFUSE_BODLEVEL
 = 0x80,

223 
	mFUSE_BODEN
 = 0x40,

224 
	mFUSE_SUT1
 = 0x20,

225 
	mFUSE_SUT0
 = 0x10,

226 
	mFUSE_CKSEL3
 = 0x08,

227 
	mFUSE_CKSEL2
 = 0x04,

228 
	mFUSE_CKSEL1
 = 0x02,

229 
	mFUSE_CKSEL0
 = 0x01,

231 
	mMAX_FLASH_PAGE_SIZE
 = 256,

232 
	mMAX_EEPROM_PAGE_SIZE
 = 16,

237 
	mADDR_PROG_SPACE_PROG_ENABLED
 = 0xB0,

238 
	mADDR_PROG_SPACE_PROG_DISABLED
 = 0xA0,

239 
	mADDR_DATA_SPACE
 = 0x20,

240 
	mADDR_EEPROM_SPACE
 = 0xB1,

241 
	mADDR_FUSE_SPACE
 = 0xB2,

242 
	mADDR_LOCK_SPACE
 = 0xB3,

243 
	mADDR_SIG_SPACE
 = 0xB4,

244 
	mADDR_BREAKPOINT_SPACE
 = 0x60,

247 
	mBIT_RATE_9600
 = 0xf4,

248 
	mBIT_RATE_14400
 = 0xf8,

249 
	mBIT_RATE_19200
 = 0xfa,

250 
	mBIT_RATE_38400
 = 0xfd,

251 
	mBIT_RATE_57600
 = 0xfe,

252 
	mBIT_RATE_115200
 = 0xff,

255 
	mBREAKPOINT_NONE
 = 0x00,

256 
	mBREAKPOINT_X
 = 0x04,

257 
	mBREAKPOINT_Y
 = 0x08,

258 
	mBREAKPOINT_Z
 = 0x10,

261 
	mJTAG_R_OK
 = 'A',

262 
	mJTAG_R_BREAK
 = 'B',

263 
	mJTAG_R_INFO
 = 'G',

264 
	mJTAG_R_FAILED
 = 'F',

265 
	mJTAG_R_SYNC_ERROR
 = 'E',

266 
	mJTAG_R_SLEEP
 = 'H',

267 
	mJTAG_R_POWER
 = 'I',

270 
	mJTAG_P_BITRATE
 = 'b',

271 
	mJTAG_P_SW_VERSION
 = 0x7b,

272 
	mJTAG_P_HW_VERSION
 = 0x7a,

273 
	mJTAG_P_IREG_HIGH
 = 0x81,

274 
	mJTAG_P_IREG_LOW
 = 0x82,

275 
	mJTAG_P_OCD_VTARGET
 = 0x84,

276 
	mJTAG_P_OCD_BREAK_CAUSE
 = 0x85,

277 
	mJTAG_P_CLOCK
 = 0x86,

278 
	mJTAG_P_EXTERNAL_RESET
 = 0x8b,

279 
	mJTAG_P_FLASH_PAGESIZE_LOW
 = 0x88,

280 
	mJTAG_P_FLASH_PAGESIZE_HIGH
 = 0x89,

281 
	mJTAG_P_EEPROM_PAGESIZE
 = 0x8a,

282 
	mJTAG_P_TIMERS_RUNNING
 = 0xa0,

283 
	mJTAG_P_BP_FLOW
 = 0xa1,

284 
	mJTAG_P_BP_X_HIGH
 = 0xa2,

285 
	mJTAG_P_BP_X_LOW
 = 0xa3,

286 
	mJTAG_P_BP_Y_HIGH
 = 0xa4,

287 
	mJTAG_P_BP_Y_LOW
 = 0xa5,

288 
	mJTAG_P_BP_MODE
 = 0xa6,

289 
	mJTAG_P_JTAGID_BYTE0
 = 0xa7,

290 
	mJTAG_P_JTAGID_BYTE1
 = 0xa8,

291 
	mJTAG_P_JTAGID_BYTE2
 = 0xa9,

292 
	mJTAG_P_JTAGID_BYTE3
 = 0xaa,

293 
	mJTAG_P_UNITS_BEFORE
 = 0xab,

294 
	mJTAG_P_UNITS_AFTER
 = 0xac,

295 
	mJTAG_P_BIT_BEFORE
 = 0xad,

296 
	mJTAG_P_BIT_AFTER
 = 0xae,

297 
	mJTAG_P_PSB0_LOW
 = 0xaf,

298 
	mJTAG_P_PSBO_HIGH
 = 0xb0,

299 
	mJTAG_P_PSB1_LOW
 = 0xb1,

300 
	mJTAG_P_PSB1_HIGH
 = 0xb2,

301 
	mJTAG_P_MCU_MODE
 = 0xb3,

304 
	mJTAG_C_SET_DEVICE_DESCRIPTOR
 = 0xA0,

309 
	mJTAG_BITRATE_1_MHz
 = 0xff,

310 
	mJTAG_BITRATE_500_KHz
 = 0xfe,

311 
	mJTAG_BITRATE_250_KHz
 = 0xfd,

312 
	mJTAG_BITRATE_125_KHz
 = 0xfb,

348 
	mMESSAGE_START
 = 0x1b,

349 
	mTOKEN
 = 0x0e,

357 
	mMAX_MESSAGE
 = 100000,

360 
	mCMND_CHIP_ERASE
 = 0x13,

361 
	mCMND_CLEAR_EVENTS
 = 0x22,

362 
	mCMND_CLR_BREAK
 = 0x1A,

363 
	mCMND_ENTER_PROGMODE
 = 0x14,

364 
	mCMND_ERASEPAGE_SPM
 = 0x0D,

365 
	mCMND_FORCED_STOP
 = 0x0A,

366 
	mCMND_GET_BREAK
 = 0x12,

367 
	mCMND_GET_PARAMETER
 = 0x03,

368 
	mCMND_GET_SIGN_ON
 = 0x01,

369 
	mCMND_GET_SYNC
 = 0x0f,

370 
	mCMND_GO
 = 0x08,

371 
	mCMND_LEAVE_PROGMODE
 = 0x15,

372 
	mCMND_READ_MEMORY
 = 0x05,

373 
	mCMND_READ_PC
 = 0x07,

374 
	mCMND_RESET
 = 0x0B,

375 
	mCMND_RESTORE_TARGET
 = 0x23,

376 
	mCMND_RUN_TO_ADDR
 = 0x1C,

377 
	mCMND_SELFTEST
 = 0x10,

378 
	mCMND_SET_BREAK
 = 0x11,

379 
	mCMND_SET_DEVICE_DESCRIPTOR
 = 0x0C,

380 
	mCMND_SET_N_PARAMETERS
 = 0x16,

381 
	mCMND_SET_PARAMETER
 = 0x02,

382 
	mCMND_SIGN_OFF
 = 0x00,

383 
	mCMND_SINGLE_STEP
 = 0x09,

384 
	mCMND_SPI_CMD
 = 0x1D,

385 
	mCMND_WRITE_MEMORY
 = 0x04,

386 
	mCMND_WRITE_PC
 = 0x06,

389 
	mRSP_DEBUGWIRE_SYNC_FAILED
 = 0xAC,

390 
	mRSP_FAILED
 = 0xA0,

391 
	mRSP_GET_BREAK
 = 0x83,

392 
	mRSP_ILLEGAL_BREAKPOINT
 = 0xA8,

393 
	mRSP_ILLEGAL_COMMAND
 = 0xAA,

394 
	mRSP_ILLEGAL_EMULATOR_MODE
 = 0xA4,

395 
	mRSP_ILLEGAL_JTAG_ID
 = 0xA9,

396 
	mRSP_ILLEGAL_MCU_STATE
 = 0xA5,

397 
	mRSP_ILLEGAL_MEMORY_TYPE
 = 0xA2,

398 
	mRSP_ILLEGAL_MEMORY_RANGE
 = 0xA3,

399 
	mRSP_ILLEGAL_PARAMETER
 = 0xA1,

400 
	mRSP_ILLEGAL_POWER_STATE
 = 0xAD,

401 
	mRSP_ILLEGAL_VALUE
 = 0xA6,

402 
	mRSP_MEMORY
 = 0x82,

403 
	mRSP_NO_TARGET_POWER
 = 0xAB,

404 
	mRSP_OK
 = 0x80,

405 
	mRSP_PARAMETER
 = 0x81,

406 
	mRSP_PC
 = 0x84,

407 
	mRSP_SELFTEST
 = 0x85,

408 
	mRSP_SET_N_PARAMETERS
 = 0xA7,

409 
	mRSP_SIGN_ON
 = 0x86,

410 
	mRSP_SPI_DATA
 = 0x88,

413 
	mEVT_BREAK
 = 0xE0,

414 
	mEVT_DEBUG
 = 0xE6,

415 
	mEVT_ERROR_PHY_FORCE_BREAK_TIMEOUT
 = 0xE2,

416 
	mEVT_ERROR_PHY_MAX_BIT_LENGTH_DIFF
 = 0xED,

417 
	mEVT_ERROR_PHY_OPT_RECEIVE_TIMEOUT
 = 0xF9,

418 
	mEVT_ERROR_PHY_OPT_RECEIVED_BREAK
 = 0xFA,

419 
	mEVT_ERROR_PHY_RECEIVED_BREAK
 = 0xF8,

420 
	mEVT_ERROR_PHY_RECEIVE_TIMEOUT
 = 0xF7,

421 
	mEVT_ERROR_PHY_RELEASE_BREAK_TIMEOUT
 = 0xE3,

422 
	mEVT_ERROR_PHY_SYNC_OUT_OF_RANGE
 = 0xF5,

423 
	mEVT_ERROR_PHY_SYNC_TIMEOUT
 = 0xF0,

424 
	mEVT_ERROR_PHY_SYNC_TIMEOUT_BAUD
 = 0xF4,

425 
	mEVT_ERROR_PHY_SYNC_WAIT_TIMEOUT
 = 0xF6,

426 
	mEVT_RESULT_PHY_NO_ACTIVITY
 = 0xFB,

427 
	mEVT_EXT_RESET
 = 0xE7,

428 
	mEVT_ICE_POWER_ERROR_STATE
 = 0xEA,

429 
	mEVT_ICE_POWER_OK
 = 0xEB,

430 
	mEVT_IDR_DIRTY
 = 0xEC,

431 
	mEVT_NONE
 = 0xEF,

432 
	mEVT_PDSB_BREAK
 = 0xF2,

433 
	mEVT_PDSMB_BREAK
 = 0xF3,

434 
	mEVT_PROGRAM_BREAK
 = 0xF1,

435 
	mEVT_RUN
 = 0xE1,

436 
	mEVT_TARGET_POWER_OFF
 = 0xE5,

437 
	mEVT_TARGET_POWER_ON
 = 0xE4,

438 
	mEVT_TARGET_SLEEP
 = 0xE8,

439 
	mEVT_TARGET_WAKEUP
 = 0xE9,

441 
	mEVT_MAX
 = 0xFF,

444 
	mMTYPE_IO_SHADOW
 = 0x30,

445 
	mMTYPE_SRAM
 = 0x20,

446 
	mMTYPE_EEPROM
 = 0x22,

447 
	mMTYPE_EVENT
 = 0x60,

448 
	mMTYPE_EVENT_COMPRESSED
 = 0x61,

449 
	mMTYPE_SPM
 = 0xA0,

450 
	mMTYPE_FLASH_PAGE
 = 0xB0,

451 
	mMTYPE_EEPROM_PAGE
 = 0xB1,

452 
	mMTYPE_FUSE_BITS
 = 0xB2,

453 
	mMTYPE_LOCK_BITS
 = 0xB3,

454 
	mMTYPE_SIGN_JTAG
 = 0xB4,

455 
	mMTYPE_OSCCAL_BYTE
 = 0xB5,

456 
	mMTYPE_CAN
 = 0xB6,

459 
	mPAR_HW_VERSION
 = 0x01,

460 
	mPAR_FW_VERSION
 = 0x02,

462 
	mPAR_EMULATOR_MODE
 = 0x03,

463 
	mEMULATOR_MODE_DEBUGWIRE
 = 0x00,

464 
	mEMULATOR_MODE_JTAG
 = 0x01,

465 
	mEMULATOR_MODE_UNKNOWN
 = 0x02,

466 
	mEMULATOR_MODE_SPI
 = 0x03,

467 
	mEMULATOR_MODE_JTAG_XMEGA
 = 0x05,

469 
	mPAR_IREG
 = 0x04,

471 
	mPAR_BAUD_RATE
 = 0x05,

472 
	mPAR_BAUD_2400
 = 0x01,

473 
	mPAR_BAUD_4800
 = 0x02,

474 
	mPAR_BAUD_9600
 = 0x03,

475 
	mPAR_BAUD_19200
 = 0x04,

476 
	mPAR_BAUD_38400
 = 0x05,

477 
	mPAR_BAUD_57600
 = 0x06,

478 
	mPAR_BAUD_115200
 = 0x07,

479 
	mPAR_BAUD_14400
 = 0x08,

481 
	mPAR_OCD_VTARGET
 = 0x06,

482 
	mPAR_OCD_JTAG_CLK
 = 0x07,

483 
	mPAR_OCD_BREAK_CAUSE
 = 0x08,

484 
	mPAR_TIMERS_RUNNING
 = 0x09,

485 
	mPAR_BREAK_ON_CHANGE_FLOW
 = 0x0A,

486 
	mPAR_BREAK_ADDR1
 = 0x0B,

487 
	mPAR_BREAK_ADDR2
 = 0x0C,

488 
	mPAR_COMBBREAKCTRL
 = 0x0D,

489 
	mPAR_JTAGID
 = 0x0E,

490 
	mPAR_UNITS_BEFORE
 = 0x0F,

491 
	mPAR_UNITS_AFTER
 = 0x10,

492 
	mPAR_BIT_BEFORE
 = 0x11,

493 
	mPAR_BIT_ATER
 = 0x12,

494 
	mPAR_EXTERNAL_RESET
 = 0x13,

495 
	mPAR_FLASH_PAGE_SIZE
 = 0x14,

496 
	mPAR_EEPROM_PAGE_SIZE
 = 0x15,

497 
	mPAR_UNUSED1
 = 0x16,

498 
	mPAR_PSB0
 = 0x17,

499 
	mPAR_PSB1
 = 0x18,

500 
	mPAR_PROTOCOL_DEBUG_EVENT
 = 0x19,

502 
	mPAR_MCU_STATE
 = 0x1A,

503 
	mSTOPPED
 = 0x00,

504 
	mRUNNING
 = 0x01,

505 
	mPROGRAMMING
 = 0x02,

507 
	mPAR_DAISY_CHAIN_INFO
 = 0x1B,

508 
	mPAR_BOOT_ADDRESS
 = 0x1C,

509 
	mPAR_TARGET_SIGNATURE
 = 0x1D,

510 
	mPAR_DEBUGWIRE_BAUDRATE
 = 0x1E,

511 
	mPAR_PROGRAM_ENTRY_POINT
 = 0x1F,

512 
	mPAR_PACKET_PARSING_ERRORS
 = 0x40,

513 
	mPAR_VALID_PACKETS_RECEIVED
 = 0x41,

514 
	mPAR_INTERCOMMUNICATION_TX_FAILURES
 = 0x42,

515 
	mPAR_INTERCOMMUNICATION_RX_FAILURES
 = 0x43,

516 
	mPAR_CRC_ERRORS
 = 0x44,

518 
	mPAR_POWER_SOURCE
 = 0x45,

519 
	mPOWER_EXTERNAL
 = 0x00,

520 
	mPOWER_USB
 = 0x01,

522 
	mPAR_CAN_FLAG
 = 0x22,

523 
	mDONT_READ_CAN_MAILBOX
 = 0x00,

524 
	mREAD_CAN_MAILBOX
 = 0x01,

526 
	mPAR_ENABLE_IDR_IN_RUN_MODE
 = 0x23,

527 
	mACCESS_OSCCAL
 = 0x00,

528 
	mACCESS_IDR
 = 0x01,

530 
	mPAR_ALLOW_PAGEPROGRAMMING_IN_SCANCHAIN
 = 0x24,

531 
	mPAGEPROG_NOT_ALLOWED
 = 0x00,

532 
	mPAGEPROG_ALLOWED
 = 0x01,

536 
	mPC_INVALID
 = 0xffffffff

539 
	ebpTy≥


541 
	mNONE
,

542 
	mCODE
,

543 
	mSOFTCODE
,

544 
	mWRITE_DATA
,

545 
	mREAD_DATA
,

546 
	mACCESS_DATA
,

547 
	mDATA_MASK
,

549 
	mHAS_MASK
 = 0x80000000,

555 
	mMEM_FLASH
 = 0,

556 
	mMEM_EEPROM
 = 1,

557 
	mMEM_RAM
 = 2,

558 } 
	tBFDmem‹yTy≥
;

560 c⁄° *
BFDmem‹yTy≥Såög
[];

561 c⁄° 
BFDmem‹yS∑˚Off£t
[];

563 
	eemuœt‹
 {

564 
	mEMULATOR_JTAGICE
,

565 
	mEMULATOR_DRAGON
,

571 
	#MAX_IMAGE_SIZE
 1000000

	)

575 
uch¨
 
	mvÆ
;

576 
boﬁ
 
	mu£d
;

577 } 
	tAVRMem‹yByã
;

583 
AVRMem‹yByã
 
	mimage
[
MAX_IMAGE_SIZE
];

584 
	mœ°_addªss
;

585 
	mfú°_addªss
;

586 
boﬁ
 
	mfú°_addªss_ok
;

587 
boﬁ
 
	mhas_d©a
;

588 c⁄° *
	m«me
;

589 } 
	tBFDimage
;

593 
	#JTAG_EOM
 0x20, 0x20

	)

596 
	#JTAG_CAUSE
 "JTAG ICE communiˇti⁄ faûed"

	)

598 ˛as†
	cjèg


600 
	m¥Ÿe˘ed
:

602 
ãrmios
 
ﬁdtio
;

603 
boﬁ
 
	mﬁdtioVÆid
;

606 
	mjègBox
;

609 
boﬁ
 
	mis_usb
;

612 
	m˘æPùe
;

615 
emuœt‹
 
	memu_ty≥
;

618 
boﬁ
 
	m≠∂y_nSRST
;

620 
	mpublic
:

623 
boﬁ
 
¥ogømmögE«bÀd
;

626 *
	mdevi˚_«me
;

630 
	munôs_bef‹e
;

631 
	munôs_a·î
;

632 
	mbôs_bef‹e
;

633 
	mbôs_a·î
;

634 } 
	gdchaö
;

636 
	g¥Ÿe˘ed
:

637 
pid_t
 
›íUSB
(c⁄° *
jègDevi˚Name
);

638 
ß„wrôe
(c⁄° *
b
, 
cou¡
);

639 
ch™geLoˇlBôR©e
(
√wBôR©e
);

640 
ª°‹eSîülP‹t
();

642 
vútuÆ
 
ch™geBôR©e
(
√wBôR©e
) = 0;

643 
vútuÆ
 
£tDevi˚Des¸ùt‹
(
jèg_devi˚_def_ty≥
 *
dev
) = 0;

644 
vútuÆ
 
boﬁ
 
synchr⁄i£At
(
bôøã
) = 0;

645 
vútuÆ
 
°¨tJègLök
() = 0;

646 
vútuÆ
 
devi˚AutoC⁄fig
() = 0;

647 
jèg_Êash_image
(
BFDimage
 *
image
, 
BFDmem‹yTy≥
 
memty≥
,

648 
boﬁ
 
¥ogøm
, boﬁ 
vîify
);

650 
	$∑ge_addr
(
addr
, 
BFDmem‹yTy≥
 
memty≥
)

652 
∑ge_size
 = 
	`gë_∑ge_size
–
memty≥
 );

653  ()(
addr
 & (~(
∑ge_size
 - 1)));

654 
	}
};

656 
gë_∑ge_size
(
BFDmem‹yTy≥
 
memty≥
);

658 
	gpublic
:

659 
jèg
();

660 
jèg
(c⁄° *
dev
, *
«me
, 
emuœt‹
 
ty≥
 = 
EMULATOR_JTAGICE
);

661 
	gvútuÆ
 ~
jèg
();

667 
jègCheck
(
°©us
);

671 
vútuÆ
 
öôJègBox
() = 0;

683 
vútuÆ
 
öôJègOnChùDebuggög
(
bôøã
) = 0;

695 
timeout_ªad
(*
buf
, 
size_t
 
cou¡
, 
timeout
);

701 
vútuÆ
 
dñëeAŒBªakpoöts
() = 0;

704 
vútuÆ
 
boﬁ
 
dñëeBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
) = 0;

707 
vútuÆ
 
boﬁ
 
addBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
) = 0;

710 
vútuÆ
 
upd©eBªakpoöts
() = 0;

713 
vútuÆ
 
boﬁ
 
codeBªakpoötAt
(
addªss
) = 0;

717 
vútuÆ
 
boﬁ
 
codeBªakpoötBëwìn
(
°¨t
, 
íd
) = 0;

719 
vútuÆ
 
boﬁ
 
°›At
(
addªss
) = 0;

722 
vútuÆ
 
∑r£Evíts
(const *) = 0;

728 
vútuÆ
 
íabÀProgømmög
() = 0;

731 
vútuÆ
 
dißbÀProgømmög
() = 0;

734 
vútuÆ
 
îa£ProgømMem‹y
() = 0;

736 
vútuÆ
 
îa£ProgømPage
(
addªss
) = 0;

739 
vútuÆ
 
dow∆ﬂdToT¨gë
(c⁄° * 
fûíame
, 
boﬁ
 
¥ogøm
, boﬁ 
vîify
) = 0;

745 
vútuÆ
 
gëProgømCou¡î
() = 0;

748 
vútuÆ
 
boﬁ
 
£tProgømCou¡î
(
pc
) = 0;

751 
vútuÆ
 
boﬁ
 
ª£tProgøm
(boﬁ 
possibÀ_nSRST
) = 0;

754 
vútuÆ
 
boﬁ
 
öãºu±Progøm
() = 0;

760 
vútuÆ
 
boﬁ
 
ªsumeProgøm
() = 0;

764 
vútuÆ
 
boﬁ
 
jègSögÀSãp
(boﬁ 
u£HLL
 = 
Ál£
) = 0;

769 
vútuÆ
 
boﬁ
 
jègC⁄töue
() = 0;

782 
vútuÆ
 
uch¨
 *
jègRód
(
addr
, 
numByãs
) = 0;

794 
vútuÆ
 
boﬁ
 
jègWrôe
(
addr
, 
numByãs
, 
uch¨
 
buf„r
[]) = 0;

802 
jègWrôeFu£s
(*
fu£s
);

809 
jègRódFu£s
();

816 
jègDi•œyFu£s
(
uch¨
 *
fu£Bôs
);

824 
jègWrôeLockBôs
(*
lock
);

829 
jègRódLockBôs
();

836 
jègDi•œyLockBôs
(
uch¨
 *
lockBôs
);

840 
jèg
 *
theJègICE
;

	@jtag1.h

25 #i‚de‡
JTAG1_H


26 
	#JTAG1_H


	)

28 
	~"jèg.h
"

30 
	eSídResu…
 { 
	m£nd_Áûed
, 
	m£nd_ok
, 
	mmcu_d©a
 };

58 
	mMAX_BREAKPOINTS_CODE
 = 4,

59 
	mMAX_BREAKPOINTS_DATA
 = 2,

60 
	mMAX_BREAKPOINTS
 = 4

63 
	sbªakpoöt


65 
	maddªss
;

66 
bpTy≥
 
	mty≥
;

69 ˛as†
	cjèg1
: 
public
 
jèg


72 
	$decodeAddªss
(
uch¨
 *
buf
) {

73  
buf
[0] << 16 | buf[1] << 8 | buf[2];

77 
	$ícodeAddªss
(
uch¨
 *
buf„r
, 
x
) {

78 
buf„r
[0] = 
x
 >> 16;

79 
buf„r
[1] = 
x
 >> 8;

80 
buf„r
[2] = 
x
;

81 
	}
};

83 
bªakpoöt
 
	gbpCode
[
MAX_BREAKPOINTS_CODE
], 
	gbpD©a
[
MAX_BREAKPOINTS_DATA
];

84 
	gnumBªakpoötsCode
, 
	gnumBªakpoötsD©a
;

86 
	gpublic
:

87 
	$jèg1
(c⁄° *
dev
, *
«me
, 
boﬁ
 
n§°
 = 
Ál£
):

88 
	$jèg
(
dev
, 
«me
) {

89 
≠∂y_nSRST
 = 
n§°
;

90 
	}
};

92 
vútuÆ
 
öôJègBox
();

93 
vútuÆ
 
öôJègOnChùDebuggög
(
bôøã
);

95 
vútuÆ
 
dñëeAŒBªakpoöts
();

96 
vútuÆ
 
boﬁ
 
dñëeBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
);

97 
vútuÆ
 
boﬁ
 
addBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
);

98 
vútuÆ
 
upd©eBªakpoöts
();

99 
vútuÆ
 
boﬁ
 
codeBªakpoötAt
(
addªss
);

100 
vútuÆ
 
boﬁ
 
codeBªakpoötBëwìn
(
°¨t
, 
íd
);

101 
vútuÆ
 
boﬁ
 
°›At
(
addªss
);

102 
vútuÆ
 
∑r£Evíts
(const *);

104 
vútuÆ
 
íabÀProgømmög
();

105 
vútuÆ
 
dißbÀProgømmög
();

106 
vútuÆ
 
îa£ProgømMem‹y
();

107 
vútuÆ
 
îa£ProgømPage
(
addªss
);

108 
vútuÆ
 
dow∆ﬂdToT¨gë
(c⁄° * 
fûíame
, 
boﬁ
 
¥ogøm
, boﬁ 
vîify
);

110 
vútuÆ
 
gëProgømCou¡î
();

111 
vútuÆ
 
boﬁ
 
£tProgømCou¡î
(
pc
);

112 
vútuÆ
 
boﬁ
 
ª£tProgøm
(boﬁ 
possibÀ_nSRST
);

113 
vútuÆ
 
boﬁ
 
öãºu±Progøm
();

114 
vútuÆ
 
boﬁ
 
ªsumeProgøm
();

115 
vútuÆ
 
boﬁ
 
jègSögÀSãp
(boﬁ 
u£HLL
 = 
Ál£
);

116 
vútuÆ
 
boﬁ
 
jègC⁄töue
();

118 
vútuÆ
 
uch¨
 *
jègRód
(
addr
, 
numByãs
);

119 
vútuÆ
 
boﬁ
 
jègWrôe
(
addr
, 
numByãs
, 
uch¨
 
buf„r
[]);

121 
	g¥iv©e
:

122 
vútuÆ
 
ch™geBôR©e
(
√wBôR©e
);

123 
vútuÆ
 
£tDevi˚Des¸ùt‹
(
jèg_devi˚_def_ty≥
 *
dev
);

124 
vútuÆ
 
boﬁ
 
synchr⁄i£At
(
bôøã
);

125 
vútuÆ
 
°¨tJègLök
();

126 
vútuÆ
 
devi˚AutoC⁄fig
();

127 
vútuÆ
 
c⁄figDaisyChaö
();

129 
uch¨
 *
gëJègRe•⁄£
(
ª•⁄£Size
);

130 
SídResu…
 
£ndJègComm™d
(
uch¨
 *
comm™d
, 
comm™dSize
, *
åõs
);

131 
boﬁ
 
checkF‹Emuœt‹
();

139 
uch¨
 *
doJègComm™d
(uch¨ *
comm™d
, 
comm™dSize
, 
ª•⁄£Size
);

148 
boﬁ
 
doSim∂eJègComm™d
(
uch¨
 
cmd
, 
ª•⁄£Size
);

154 
£tJègP¨amëî
(
uch¨
 
ôem
, uch¨ 
√wVÆue
);

157 
uch¨
 
gëJègP¨amëî
(uch¨ 
ôem
);

	@jtag2.h

24 #i‚de‡
JTAG2_H


25 
	#JTAG2_H


	)

27 
	~"jèg.h
"

80 
	mMAX_BREAKPOINTS2_CODE
 = 4,

81 
	mMAX_BREAKPOINTS2_DATA
 = 2,

82 
	mMAX_BREAKPOINTS2
 = 4,

84 
	mBREAKPOINT2_FIRST_DATA
 = 2,

85 
	mBREAKPOINT2_DATA_MASK
 = 3,

87 
	mMAX_TOTAL_BREAKPOINTS2
 = 255

90 
	sbªakpoöt2


93 
	maddªss
;

94 
	mmask_poöãr
;

95 
bpTy≥
 
	mty≥
;

96 
boﬁ
 
	míabÀd
;

99 
boﬁ
 
	mœ°
;

102 
boﬁ
 
	mi˚°©us
;

104 
boﬁ
 
	mt‹emove
;

105 
boﬁ
 
	mtﬂdd
;

106 
uch¨
 
	mb≤um
;

109 c⁄° 
bªakpoöt2
 
	gdeÁu…_bp
 =

113 
NONE
,

114 
Ál£
,

115 
åue
,

116 
Ál£
,

117 
Ál£
,

118 
Ál£
,

122 ˛as†
	cjèg2
: 
public
 
jèg


124 
¥iv©e
:

125 
comm™d_£quí˚
;

126 
	mdevdes¸Àn
;

127 
boﬁ
 
	msig√dIn
;

128 
boﬁ
 
	mhaveHiddíBªakpoöt
;

129 
boﬁ
 
	mu£DebugWúe
;

130 
boﬁ
 
	mis_xmega
;

133 
bªakpoöt2
 
	mbp
[
MAX_TOTAL_BREAKPOINTS2
];

135 
	mÊashCache
[
MAX_FLASH_PAGE_SIZE
];

136 
	mÊashCachePageAddr
;

137 
	mì¥omCache
[
MAX_EEPROM_PAGE_SIZE
];

138 
	mì¥omCachePageAddr
;

140 
bªakpoöt2
 
	mso·BPˇche
[
MAX_BREAKPOINTS2
];

142 
boﬁ
 
	mn⁄bªakög_evíts
[
EVT_MAX
 - 
EVT_BREAK
 + 1];

144 
	mpublic
:

145 
	$jèg2
(c⁄° *
dev
, *
«me
, 
boﬁ
 
u£DW
 = 
Ál£
,

146 
boﬁ
 
is_døg⁄
 = 
Ál£
, boﬁ 
n§°
 = false,

147 
boﬁ
 
xmega
 = 
Ál£
):

148 
	`jèg
(
dev
, 
«me
, 
is_døg⁄
? 
EMULATOR_DRAGON
: 
EMULATOR_JTAGICE
) {

149 
sig√dIn
 = 
haveHiddíBªakpoöt
 = 
Ál£
;

150 
comm™d_£quí˚
 = 0;

151 
devdes¸Àn
 = (
jèg2_devi˚_desc_ty≥
);

152 
u£DebugWúe
 = 
u£DW
;

153 
≠∂y_nSRST
 = 
n§°
;

154 
is_xmega
 = 
xmega
;

155 
ÊashCachePageAddr
 = ()-1;

156 
ì¥omCachePageAddr
 = ()-1;

157 
i
 = 0; i < 
MAX_BREAKPOINTS2
; i++)

158 
so·BPˇche
[
i
].
ty≥
 = 
NONE
;

160 
j
 = 0; j < 
MAX_TOTAL_BREAKPOINTS2
; j++)

161 
bp
[
j
] = 
deÁu…_bp
;

163 
vútuÆ
 ~
	`jèg2
();

165 
vútuÆ
 
	`öôJègBox
();

166 
vútuÆ
 
	`öôJègOnChùDebuggög
(
bôøã
);

168 
vútuÆ
 
	`dñëeAŒBªakpoöts
();

169 
vútuÆ
 
boﬁ
 
	`dñëeBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
);

170 
vútuÆ
 
boﬁ
 
	`addBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
);

171 
vútuÆ
 
	`upd©eBªakpoöts
();

172 
vútuÆ
 
boﬁ
 
	`œyoutBªakpoöts
();

173 
vútuÆ
 
boﬁ
 
	`codeBªakpoötAt
(
addªss
);

174 
vútuÆ
 
boﬁ
 
	`codeBªakpoötBëwìn
(
°¨t
, 
íd
);

175 
vútuÆ
 
boﬁ
 
	`°›At
(
addªss
);

176 
vútuÆ
 
	`∑r£Evíts
(const *);

178 
vútuÆ
 
	`íabÀProgømmög
();

179 
vútuÆ
 
	`dißbÀProgømmög
();

180 
vútuÆ
 
	`îa£ProgømMem‹y
();

181 
vútuÆ
 
	`îa£ProgømPage
(
addªss
);

182 
vútuÆ
 
	`dow∆ﬂdToT¨gë
(c⁄° * 
fûíame
, 
boﬁ
 
¥ogøm
, boﬁ 
vîify
);

184 
vútuÆ
 
	`gëProgømCou¡î
();

185 
vútuÆ
 
boﬁ
 
	`£tProgømCou¡î
(
pc
);

186 
vútuÆ
 
boﬁ
 
	`ª£tProgøm
(boﬁ 
ign‹ed
 = 
Ál£
);

187 
vútuÆ
 
boﬁ
 
	`öãºu±Progøm
();

188 
vútuÆ
 
boﬁ
 
	`ªsumeProgøm
();

189 
vútuÆ
 
boﬁ
 
	`jègSögÀSãp
(boﬁ 
u£HLL
 = 
Ál£
);

190 
vútuÆ
 
boﬁ
 
	`jègC⁄töue
();

192 
vútuÆ
 
uch¨
 *
	`jègRód
(
addr
, 
numByãs
);

193 
vútuÆ
 
boﬁ
 
	`jègWrôe
(
addr
, 
numByãs
, 
uch¨
 
buf„r
[]);

195 
¥iv©e
:

196 
vútuÆ
 
	`ch™geBôR©e
(
√wBôR©e
);

197 
vútuÆ
 
	`£tDevi˚Des¸ùt‹
(
jèg_devi˚_def_ty≥
 *
dev
);

198 
vútuÆ
 
boﬁ
 
	`synchr⁄i£At
(
bôøã
);

199 
vútuÆ
 
	`°¨tJègLök
();

200 
vútuÆ
 
	`devi˚AutoC⁄fig
();

201 
vútuÆ
 
	`c⁄figDaisyChaö
();

203 
	`£ndFøme
(
uch¨
 *
comm™d
, 
comm™dSize
);

204 
	`ªcvFøme
(*&
msg
, &
£qno
);

205 
	`ªcv
(*&
msg
);

207 
	$b4_to_u32
(*
b
) {

208 
l
;

209 
l
 = ()
b
[0];

210 
l
 +()
b
[1] << 8;

211 
l
 +()()
b
[2] << 16;

212 
l
 +()
b
[3] << 24;

214  
l
;

215 
	}
};

217 
	$u32_to_b4
(*
b
, 
l
) {

218 
b
[0] = 
l
 & 0xff;

219 
b
[1] = (
l
 >> 8) & 0xff;

220 
b
[2] = (
l
 >> 16) & 0xff;

221 
b
[3] = (
l
 >> 24) & 0xff;

222 
	}
};

224 
	$b2_to_u16
(*
b
) {

225 
l
;

226 
l
 = ()
b
[0];

227 
l
 +()
b
[1] << 8;

229  
l
;

230 
	}
};

232 
	$u16_to_b2
(*
b
, 
l
) {

233 
b
[0] = 
l
 & 0xff;

234 
b
[1] = (
l
 >> 8) & 0xff;

235 
	}
};

238 
boﬁ
 
£ndJègComm™d
(
uch¨
 *
comm™d
, 
comm™dSize
, &
åõs
,

239 
uch¨
 *&
msg
, &
msgsize
, 
boﬁ
 
vîify
 = 
åue
);

251 
boﬁ
 
doJègComm™d
(
uch¨
 *
comm™d
, 
comm™dSize
,

252 
uch¨
 *&
ª•⁄£
, &
ª•⁄£Size
,

253 
boﬁ
 
ªåyOnTimeout
 = 
åue
);

260 
doSim∂eJègComm™d
(
uch¨
 
cmd
);

266 
£tJègP¨amëî
(
uch¨
 
ôem
, uch¨ *
√wVÆue
, 
vÆSize
);

271 
gëJègP¨amëî
(
uch¨
 
ôem
, uch¨ *&
ª•
, &
ª•Size
);

273 
uch¨
 
mem‹yS∑˚
(&
addr
);

277 
upd©eBªakpötsDW
();

283 
boﬁ
 
evítLo›
();

	@jtag2_defs.h

53 
	#MESSAGE_START
 0x1b

	)

54 
	#TOKEN
 0x0e

	)

64 
	#MAX_MESSAGE
 100000

	)

67 
	#CMND_CHIP_ERASE
 0x13

	)

68 
	#CMND_CLEAR_EVENTS
 0x22

	)

69 
	#CMND_CLR_BREAK
 0x1A

	)

70 
	#CMND_ENTER_PROGMODE
 0x14

	)

71 
	#CMND_ERASEPAGE_SPM
 0x0D

	)

72 
	#CMND_FORCED_STOP
 0x0A

	)

73 
	#CMND_GET_BREAK
 0x12

	)

74 
	#CMND_GET_PARAMETER
 0x03

	)

75 
	#CMND_GET_SIGN_ON
 0x01

	)

76 
	#CMND_GET_SYNC
 0x0f

	)

77 
	#CMND_GO
 0x08

	)

78 
	#CMND_LEAVE_PROGMODE
 0x15

	)

79 
	#CMND_READ_MEMORY
 0x05

	)

80 
	#CMND_READ_PC
 0x07

	)

81 
	#CMND_RESET
 0x0B

	)

82 
	#CMND_RESTORE_TARGET
 0x23

	)

83 
	#CMND_RUN_TO_ADDR
 0x1C

	)

84 
	#CMND_SELFTEST
 0x10

	)

85 
	#CMND_SET_BREAK
 0x11

	)

86 
	#CMND_SET_DEVICE_DESCRIPTOR
 0x0C

	)

87 
	#CMND_SET_N_PARAMETERS
 0x16

	)

88 
	#CMND_SET_PARAMETER
 0x02

	)

89 
	#CMND_SIGN_OFF
 0x00

	)

90 
	#CMND_SINGLE_STEP
 0x09

	)

91 
	#CMND_SPI_CMD
 0x1D

	)

92 
	#CMND_WRITE_MEMORY
 0x04

	)

93 
	#CMND_WRITE_PC
 0x06

	)

96 
	#RSP_DEBUGWIRE_SYNC_FAILED
 0xAC

	)

97 
	#RSP_FAILED
 0xA0

	)

98 
	#RSP_GET_BREAK
 0x83

	)

99 
	#RSP_ILLEGAL_BREAKPOINT
 0xA8

	)

100 
	#RSP_ILLEGAL_COMMAND
 0xAA

	)

101 
	#RSP_ILLEGAL_EMULATOR_MODE
 0xA4

	)

102 
	#RSP_ILLEGAL_JTAG_ID
 0xA9

	)

103 
	#RSP_ILLEGAL_MCU_STATE
 0xA5

	)

104 
	#RSP_ILLEGAL_MEMORY_TYPE
 0xA2

	)

105 
	#RSP_ILLEGAL_MEMORY_RANGE
 0xA3

	)

106 
	#RSP_ILLEGAL_PARAMETER
 0xA1

	)

107 
	#RSP_ILLEGAL_POWER_STATE
 0xAD

	)

108 
	#RSP_ILLEGAL_VALUE
 0xA6

	)

109 
	#RSP_MEMORY
 0x82

	)

110 
	#RSP_NO_TARGET_POWER
 0xAB

	)

111 
	#RSP_OK
 0x80

	)

112 
	#RSP_PARAMETER
 0x81

	)

113 
	#RSP_PC
 0x84

	)

114 
	#RSP_SELFTEST
 0x85

	)

115 
	#RSP_SET_N_PARAMETERS
 0xA7

	)

116 
	#RSP_SIGN_ON
 0x86

	)

117 
	#RSP_SPI_DATA
 0x88

	)

120 
	#EVT_BREAK
 0xE0

	)

121 
	#EVT_DEBUG
 0xE6

	)

122 
	#EVT_ERROR_PHY_FORCE_BREAK_TIMEOUT
 0xE2

	)

123 
	#EVT_ERROR_PHY_MAX_BIT_LENGTH_DIFF
 0xED

	)

124 
	#EVT_ERROR_PHY_OPT_RECEIVE_TIMEOUT
 0xF9

	)

125 
	#EVT_ERROR_PHY_OPT_RECEIVED_BREAK
 0xFA

	)

126 
	#EVT_ERROR_PHY_RECEIVED_BREAK
 0xF8

	)

127 
	#EVT_ERROR_PHY_RECEIVE_TIMEOUT
 0xF7

	)

128 
	#EVT_ERROR_PHY_RELEASE_BREAK_TIMEOUT
 0xE3

	)

129 
	#EVT_ERROR_PHY_SYNC_OUT_OF_RANGE
 0xF5

	)

130 
	#EVT_ERROR_PHY_SYNC_TIMEOUT
 0xF0

	)

131 
	#EVT_ERROR_PHY_SYNC_TIMEOUT_BAUD
 0xF4

	)

132 
	#EVT_ERROR_PHY_SYNC_WAIT_TIMEOUT
 0xF6

	)

133 
	#EVT_RESULT_PHY_NO_ACTIVITY
 0xFB

	)

134 
	#EVT_EXT_RESET
 0xE7

	)

135 
	#EVT_ICE_POWER_ERROR_STATE
 0xEA

	)

136 
	#EVT_ICE_POWER_OK
 0xEB

	)

137 
	#EVT_IDR_DIRTY
 0xEC

	)

138 
	#EVT_NONE
 0xEF

	)

139 
	#EVT_PDSB_BREAK
 0xF2

	)

140 
	#EVT_PDSMB_BREAK
 0xF3

	)

141 
	#EVT_PROGRAM_BREAK
 0xF1

	)

142 
	#EVT_RUN
 0xE1

	)

143 
	#EVT_TARGET_POWER_OFF
 0xE5

	)

144 
	#EVT_TARGET_POWER_ON
 0xE4

	)

145 
	#EVT_TARGET_SLEEP
 0xE8

	)

146 
	#EVT_TARGET_WAKEUP
 0xE9

	)

149 
	#MTYPE_IO_SHADOW
 0x30

	)

150 
	#MTYPE_SRAM
 0x20

	)

151 
	#MTYPE_EEPROM
 0x22

	)

152 
	#MTYPE_EVENT
 0x60

	)

153 
	#MTYPE_SPM
 0xA0

	)

154 
	#MTYPE_FLASH_PAGE
 0xB0

	)

155 
	#MTYPE_EEPROM_PAGE
 0xB1

	)

156 
	#MTYPE_FUSE_BITS
 0xB2

	)

157 
	#MTYPE_LOCK_BITS
 0xB3

	)

158 
	#MTYPE_SIGN_JTAG
 0xB4

	)

159 
	#MTYPE_OSCCAL_BYTE
 0xB5

	)

160 
	#MTYPE_CAN
 0xB6

	)

163 
	#PAR_HW_VERSION
 0x01

	)

164 
	#PAR_FW_VERSION
 0x02

	)

165 
	#PAR_EMULATOR_MODE
 0x03

	)

166 
	#EMULATOR_MODE_DEBUGWIRE
 0x00

	)

167 
	#EMULATOR_MODE_JTAG
 0x01

	)

168 
	#EMULATOR_MODE_UNKNOWN
 0x02

	)

169 
	#EMULATOR_MODE_SPI
 0x03

	)

170 
	#PAR_IREG
 0x04

	)

171 
	#PAR_BAUD_RATE
 0x05

	)

172 
	#PAR_BAUD_2400
 0x01

	)

173 
	#PAR_BAUD_4800
 0x02

	)

174 
	#PAR_BAUD_9600
 0x03

	)

175 
	#PAR_BAUD_19200
 0x04

	)

176 
	#PAR_BAUD_38400
 0x05

	)

177 
	#PAR_BAUD_57600
 0x06

	)

178 
	#PAR_BAUD_115200
 0x07

	)

179 
	#PAR_BAUD_14400
 0x08

	)

180 
	#PAR_OCD_VTARGET
 0x06

	)

181 
	#PAR_OCD_JTAG_CLK
 0x07

	)

182 
	#PAR_OCD_BREAK_CAUSE
 0x08

	)

183 
	#PAR_TIMERS_RUNNING
 0x09

	)

184 
	#PAR_BREAK_ON_CHANGE_FLOW
 0x0A

	)

185 
	#PAR_BREAK_ADDR1
 0x0B

	)

186 
	#PAR_BREAK_ADDR2
 0x0C

	)

187 
	#PAR_COMBBREAKCTRL
 0x0D

	)

188 
	#PAR_JTAGID
 0x0E

	)

189 
	#PAR_UNITS_BEFORE
 0x0F

	)

190 
	#PAR_UNITS_AFTER
 0x10

	)

191 
	#PAR_BIT_BEFORE
 0x11

	)

192 
	#PAR_BIT_ATER
 0x12

	)

193 
	#PAR_EXTERNAL_RESET
 0x13

	)

194 
	#PAR_FLASH_PAGE_SIZE
 0x14

	)

195 
	#PAR_EEPROM_PAGE_SIZE
 0x15

	)

196 
	#PAR_UNUSED1
 0x16

	)

197 
	#PAR_PSB0
 0x17

	)

198 
	#PAR_PSB1
 0x18

	)

199 
	#PAR_PROTOCOL_DEBUG_EVENT
 0x19

	)

200 
	#PAR_MCU_STATE
 0x1A

	)

201 
	#STOPPED
 0x00

	)

202 
	#RUNNING
 0x01

	)

203 
	#PROGRAMMING
 0x02

	)

204 
	#PAR_DAISY_CHAIN_INFO
 0x1B

	)

205 
	#PAR_BOOT_ADDRESS
 0x1C

	)

206 
	#PAR_TARGET_SIGNATURE
 0x1D

	)

207 
	#PAR_DEBUGWIRE_BAUDRATE
 0x1E

	)

208 
	#PAR_PROGRAM_ENTRY_POINT
 0x1F

	)

209 
	#PAR_PACKET_PARSING_ERRORS
 0x40

	)

210 
	#PAR_VALID_PACKETS_RECEIVED
 0x41

	)

211 
	#PAR_INTERCOMMUNICATION_TX_FAILURES
 0x42

	)

212 
	#PAR_INTERCOMMUNICATION_RX_FAILURES
 0x43

	)

213 
	#PAR_CRC_ERRORS
 0x44

	)

214 
	#PAR_POWER_SOURCE
 0x45

	)

215 
	#POWER_EXTERNAL
 0x00

	)

216 
	#POWER_USB
 0x01

	)

217 
	#PAR_CAN_FLAG
 0x22

	)

218 
	#DONT_READ_CAN_MAILBOX
 0x00

	)

219 
	#READ_CAN_MAILBOX
 0x01

	)

220 
	#PAR_ENABLE_IDR_IN_RUN_MODE
 0x23

	)

221 
	#ACCESS_OSCCAL
 0x00

	)

222 
	#ACCESS_IDR
 0x01

	)

223 
	#PAR_ALLOW_PAGEPROGRAMMING_IN_SCANCHAIN
 0x24

	)

224 
	#PAGEPROG_NOT_ALLOWED
 0x00

	)

225 
	#PAGEPROG_ALLOWED
 0x01

	)

234 
	sdevi˚_des¸ùt‹


236 
	mucRódIO
[8];

237 
	mucRódIOShadow
[8];

238 
	mucWrôeIO
[8];

239 
	mucWrôeIOShadow
[8];

240 
	mucRódExtIO
[52];

241 
	mucRódIOExtShadow
[52];

242 
	mucWrôeExtIO
[52];

243 
	mucWrôeIOExtShadow
[52];

244 
	mucIDRAddªss
;

245 
	mucSPMCRAddªss
;

246 
	mucRAMPZAddªss
;

248 
	muiFœshPageSize
[2];

250 
	mucEïromPageSize
;

251 
	mulBoŸAddªss
[4];

252 
	muiUµîExtIOLoc
[2];

254 
	mulFœshSize
[4];

255 
	mucEïromIn°
[20];

256 
	mucFœshIn°
[3];

257 
	mucSPHaddr
;

258 
	mucSPLaddr
;

260 
	muiFœsh∑ges
[2];

261 
	mucDWDRAddªss
;

262 
	mucDWBa£PC
;

264 
	mucAŒowFuŒPageBô°ªam
;

266 
	muiSèπSmÆÀ°BoŸLﬂdîSe˘i⁄
[2];

268 
	mE«bÀPageProgømmög
;

270 
	mucCacheTy≥
;

274 
	muiSømSèπAddr
[2];

275 
	mucRe£tTy≥
;

277 
	mucPCMaskExãnded
;

278 
	mucPCMaskHigh
;

279 
	mucEödAddªss
;

281 
	mEECRAddªss
[2];

	@jtag2bp.cc

28 
	~<°d¨g.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

32 
	~<sys/°©.h
>

33 
	~<ãrmios.h
>

34 
	~<f˙é.h
>

35 
	~<°rög.h
>

37 
	~"av¨i˚.h
"

38 
	~"jèg.h
"

39 
	~"jèg2.h
"

41 
boﬁ
 
	gjèg2
::
	$codeBªakpoötAt
(
addªss
)

43 
boﬁ
 
ªtu∫vÆue
;

44 
i
;

46 
i
 = 0;

47 !
bp
[
i
].
œ°
)

49 i‡((
bp
[
i
].
addªss
 =addªssË&& (bp[i].
ty≥
 =
CODE
Ë&& bp[i].
íabÀd
)

50  
åue
;

52 
i
++;

55  
Ál£
;

56 
	}
}

58 
boﬁ
 
	gjèg2
::
	$codeBªakpoötBëwìn
(
°¨t
, 
íd
)

60 
i
;

61 
boﬁ
 
ªtu∫vÆue
;

63 
i
 = 0;

64 !
bp
[
i
].
œ°
)

66 i‡((
bp
[
i
].
addªss
 >
°¨t
 && bp[i].addªs†< 
íd
) &&

67 (
bp
[
i
].
ty≥
 =
CODE
Ë&& bp[i].
íabÀd
)

68  
åue
;

70 
i
++;

73  
Ál£
;

74 
	}
}

76 
	gjèg2
::
	$dñëeAŒBªakpoöts
()

78 
i
 = 0;

80 !
bp
[
i
].
œ°
)

82 i‡(
bp
[
i
].
íabÀd
 && bp[i].
i˚°©us
)

83 
bp
[
i
].
t‹emove
 = 
åue
;

85 
bp
[
i
].
íabÀd
 = 
Ál£
;

86 
i
++;

88 
	}
}

91 
boﬁ
 
	gjèg2
::
	$°›At
(
addªss
)

93 
uch¨
 
⁄e
 = 1;

94 
	`jègWrôe
(
BREAKPOINT_SPACE_ADDR_OFFSET
 + 
addªss
 / 2, 1, &
⁄e
);

95 
	}
}

97 #ifde‡
nŸyë


98 
boﬁ
 
	gjèg2
::
	$BªakpoötRoom
(
bpTy≥
 
ty≥
, 
Àngth
)

100 
numd©a
 = 0;

101 
numcode
 = 0;

102 
bp_i
 = 0;

105 i‡(
ty≥
 =
CODE
)

107 
numcode
++;

111 i‡((
bp
[
bp_i
].
ty≥
 =
READ_DATA
) ||

112 (
bp
[
bp_i
].
ty≥
 =(
READ_DATA
 | 
HAS_MASK
)) ||

113 (
bp
[
bp_i
].
ty≥
 =
WRITE_DATA
) ||

114 (
bp
[
bp_i
].
ty≥
 =(
WRITE_DATA
 | 
HAS_MASK
)) ||

115 (
bp
[
bp_i
].
ty≥
 =
ACCESS_DATA
) ||

116 (
bp
[
bp_i
].
ty≥
 =(
ACCESS_DATA
 | 
HAS_MASK
)))

119 i‡(
Àngth
 > 1)

121 
numd©a
 += 2;

125 
numd©a
++;

130 i‡(
u£DebugWúe
)

132 i‡(
numd©a
 > 0)

134 
	`debugOut
("DebugWire doesn't support data breakpoints.\n");

135  
Ál£
;

140 !
bp
[
bp_i
].
œ°
)

143 i‡(
bp
[
bp_i
].
tﬂdd
 || bp[bp_i].
íabÀd
)

145 i‡((
bp
[
bp_i
].
ty≥
 =
READ_DATA
) ||

146 (
bp
[
bp_i
].
ty≥
 =(
READ_DATA
 | 
HAS_MASK
)) ||

147 (
bp
[
bp_i
].
ty≥
 =
WRITE_DATA
) ||

148 (
bp
[
bp_i
].
ty≥
 =(
WRITE_DATA
 | 
HAS_MASK
)) ||

149 (
bp
[
bp_i
].
ty≥
 =
ACCESS_DATA
) ||

150 (
bp
[
bp_i
].
ty≥
 =(
ACCESS_DATA
 | 
HAS_MASK
)) ||

151 (
bp
[
bp_i
].
ty≥
 =
DATA_MASK
))

153 
numd©a
++;

155 i‡(
bp
[
bp_i
].
ty≥
 =
CODE
)

157 
numcode
++;

160 
bp_i
++;

165 i‡((
globÆ_p_devi˚_def
->
devi˚_Êags
 & 
DEVFL_NO_SOFTBP
) != 0)

169 i‡((
numcode
 > (
MAX_BREAKPOINTS2_CODE
 - 1)) ||

170 ((
numcode
 + 
numd©a
Ë> (
MAX_BREAKPOINTS2
 - 1)))

172  
Ál£
;

176 i‡(
numd©a
 > 
MAX_BREAKPOINTS2_DATA
)

178  
Ál£
;

182  
åue
;

183 
	}
}

186 
boﬁ
 
	gjèg2
::
	$addBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
)

188 
bp_i
;

190 
	`debugOut
("BP ADDÅy≥: %dáddr: 0x%x ", 
ty≥
, 
addªss
);

196 
bp_i
 = 0;

197 !
bp
[
bp_i
].
œ°
)

199 i‡((
bp
[
bp_i
].
addªss
 =addªssË&& (bp[bp_i].
ty≥
 ==Åype))

201 
bp
[
bp_i
].
íabÀd
 = 
åue
;

202 
	`debugOut
("ENABLED\n");

205 
bp_i
++;

209 i‡(!
bp
[
bp_i
].
íabÀd
 || (bp[bp_i].
addªss
 !addªssË|| (bp[bp_i].
ty≥
 ==Åype))

214 i‡((
bp_i
 + 1Ë=
MAX_TOTAL_BREAKPOINTS2
)

216 
bp_i
 = 0;

220 
bp
[
bp_i
].
íabÀd
 || bp[bp_i].
t‹emove
)

222 
bp_i
++;

227 i‡((
bp_i
 + 1Ë=
MAX_TOTAL_BREAKPOINTS2
)

229 
	`debugOut
("FAILED\n");

230  
Ál£
;

233 i‡(
bp
[
bp_i
].
œ°
)

236 
bp
[
bp_i
 + 1].
œ°
 = 
åue
;

237 
bp
[
bp_i
 + 1].
íabÀd
 = 
Ál£
;

238 
bp
[
bp_i
 + 1].
addªss
 = 0;

239 
bp
[
bp_i
 + 1].
ty≥
 = 
NONE
;

243 
bp
[
bp_i
].
œ°
 = 
Ál£
;

244 
bp
[
bp_i
].
íabÀd
 = 
åue
;

245 
bp
[
bp_i
].
addªss
 =áddress;

246 
bp
[
bp_i
].
ty≥
 =Åype;

251 i‡((
Àngth
 > 1Ë&& (
ty≥
 !
CODE
))

253 
bôno
 = 
	`ffs
(()
Àngth
);

254 
mask
 = 1 << (
bôno
 - 1);

255 i‡(
mask
 !
Àngth
)

257 
	`debugOut
("FAILED:ÜengthÇotÖower of 2 inÑange BP\n");

258 
bp
[
bp_i
].
œ°
 = 
åue
;

259 
bp
[
bp_i
].
íabÀd
 = 
Ál£
;

260  
Ál£
;

262 
mask
--;

263 i‡((
addªss
 & 
mask
) != 0)

265 
	`debugOut
("FAILED:áddress inÑange BP isÇot base-aligned\n");

266 
bp
[
bp_i
].
œ°
 = 
åue
;

267 
bp
[
bp_i
].
íabÀd
 = 
Ál£
;

268  
Ál£
;

270 
mask
 = ~mask;

272 
bp
[
bp_i
].
ty≥
 = (
bpTy≥
)—y≥ | 
HAS_MASK
);

276 i‡(!
	`addBªakpoöt
(
mask
, 
DATA_MASK
, 1))

278 
	`debugOut
("FAILED\n");

279 
bp
[
bp_i
].
œ°
 = 
åue
;

280 
bp
[
bp_i
].
íabÀd
 = 
Ál£
;

281  
Ál£
;

284 
j
;

285 
j
 = 0; !
bp
[j].
œ°
; j++)

287 i‡((
bp
[
j
].
ty≥
 =
DATA_MASK
Ë&& (bp[
bp_i
].
addªss
 =
mask
))

291 
bp
[
bp_i
].
mask_poöãr
 = 
j
;

293 
	`debugOut
("øngêBP ADDED: 0x%x/0x%x\n", 
addªss
, 
mask
);

299 i‡(!
bp
[
bp_i
].
i˚°©us
)

302 
bp
[
bp_i
].
tﬂdd
 = 
åue
;

303 
bp
[
bp_i
].
t‹emove
 = 
Ál£
;

307 
bp
[
bp_i
].
tﬂdd
 = 
Ál£
;

308 
bp
[
bp_i
].
t‹emove
 = 
Ál£
;

311 i‡(!
	`œyoutBªakpoöts
())

313 
	`debugOut
("NotÉnoughÑoom in ICE for breakpoint. FAILED.\n");

314 
bp
[
bp_i
].
íabÀd
 = 
Ál£
;

315 
bp
[
bp_i
].
tﬂdd
 = 
Ál£
;

317 i‡((
bp
[
bp_i
].
ty≥
 & 
HAS_MASK
) == HAS_MASK)

319 
bp
[bp[
bp_i
].
mask_poöãr
].
íabÀd
 = 
Ál£
;

320 
bp
[bp[
bp_i
].
mask_poöãr
].
tﬂdd
 = 
Ál£
;

324  
åue
;

325 
	}
}

327 
boﬁ
 
	gjèg2
::
	$dñëeBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
)

329 
bp_i
;

331 
	`debugOut
("BP DELÅy≥: %dáddr: 0x%x ", 
ty≥
, 
addªss
);

333 
bp_i
 = 0;

334 !
bp
[
bp_i
].
œ°
)

336 i‡((
bp
[
bp_i
].
addªss
 =addªssË&& (bp[bp_i].
ty≥
 ==Åype))

338 
bp
[
bp_i
].
íabÀd
 = 
Ál£
;

339 
	`debugOut
("DISABLED\n");

342 
bp_i
++;

346 i‡(
bp
[
bp_i
].
íabÀd
 || (bp[bp_i].
addªss
 !addªssË|| (bp[bp_i].
ty≥
 !=Åype))

348 
	`debugOut
("FAILED\n");

349  
Ál£
;

353 i‡(
bp
[
bp_i
].
i˚°©us
)

356 
bp
[
bp_i
].
tﬂdd
 = 
Ál£
;

357 
bp
[
bp_i
].
t‹emove
 = 
åue
;

361 
bp
[
bp_i
].
tﬂdd
 = 
Ál£
;

362 
bp
[
bp_i
].
t‹emove
 = 
Ál£
;

365  
åue
;

366 
	}
}

382 
boﬁ
 
	gjèg2
::
	$œyoutBªakpoöts
()

389 
boﬁ
 
ªmaöög_bps
[
MAX_BREAKPOINTS2
 + 2] = {
Ál£
, 
åue
,Årue,Årue, false, false};

390 
bp_i
;

391 
uch¨
 
b≤um
;

392 
boﬁ
 
so·w¨ebps
 = 
åue
;

393 
boﬁ
 
hadroom
 = 
åue
;

395 i‡(
globÆ_p_devi˚_def
->
devi˚_Êags
 =
DEVFL_NO_SOFTBP
)

397 
so·w¨ebps
 = 
Ál£
;

401 i‡(
u£DebugWúe
)

403 
k
;

404 
k
 = 1; k < 
MAX_BREAKPOINTS2
 + 1; k++)

406 
ªmaöög_bps
[
k
] = 
Ál£
;

410 
bp_i
 = 0;

411 !
bp
[
bp_i
].
œ°
)

415 i‡(
bp
[
bp_i
].
íabÀd
 && !bp[bp_i].
t‹emove
 && bp[bp_i].
i˚°©us
)

417 
ªmaöög_bps
[
bp
[
bp_i
].
b≤um
] = 
Ál£
;

420 
bp_i
++;

424 
bp_i
 = 0;

426 !
bp
[
bp_i
].
œ°
)

429 i‡(
bp
[
bp_i
].
íabÀd
 && bp[bp_i].
tﬂdd
 &&

430 ((
bp
[
bp_i
].
ty≥
 =
READ_DATA
) ||

431 (
bp
[
bp_i
].
ty≥
 =(
READ_DATA
 | 
HAS_MASK
)) ||

432 (
bp
[
bp_i
].
ty≥
 =
WRITE_DATA
) ||

433 (
bp
[
bp_i
].
ty≥
 =(
WRITE_DATA
 | 
HAS_MASK
)) ||

434 (
bp
[
bp_i
].
ty≥
 =
ACCESS_DATA
) ||

435 (
bp
[
bp_i
].
ty≥
 =(
ACCESS_DATA
 | 
HAS_MASK
))))

437 i‡((
bp
[
bp_i
].
ty≥
 & 
HAS_MASK
) == HAS_MASK)

440 i‡(!
ªmaöög_bps
[
BREAKPOINT2_DATA_MASK
] ||

441 !
ªmaöög_bps
[
BREAKPOINT2_FIRST_DATA
])

443 
	`debugOut
("NotÉnoughÑoomÅo storeÑange breakpoint\n");

444 
bp
[bp[
bp_i
].
mask_poöãr
].
íabÀd
 = 
Ál£
;

445 
bp
[bp[
bp_i
].
mask_poöãr
].
tﬂdd
 = 
Ál£
;

446 
bp
[
bp_i
].
íabÀd
 = 
Ál£
;

447 
bp
[
bp_i
].
tﬂdd
 = 
Ál£
;

448 
bp_i
++;

449 
hadroom
 = 
Ál£
;

454 
ªmaöög_bps
[
BREAKPOINT2_DATA_MASK
] = 
Ál£
;

455 
bp
[bp[
bp_i
].
mask_poöãr
].
b≤um
 = 
BREAKPOINT2_DATA_MASK
;

460 
b≤um
 = 
BREAKPOINT2_FIRST_DATA
;

461 !
ªmaöög_bps
[
b≤um
] && (b≤um <
MAX_BREAKPOINTS2
))

463 
b≤um
++;

466 i‡(
b≤um
 > 
MAX_BREAKPOINTS2
)

468 
	`debugOut
("No moreÑoom for data breakpoints.\n");

469 
hadroom
 = 
Ál£
;

473 
bp
[
bp_i
].
b≤um
 = bpnum;

474 
ªmaöög_bps
[
b≤um
] = 
Ál£
;

477 
bp_i
++;

482 
bp_i
 = 0;

483 !
bp
[
bp_i
].
œ°
)

486 
b≤um
 = 0x00;

487 !
ªmaöög_bps
[
b≤um
] && (b≤um <
MAX_BREAKPOINTS2
))

489 
	`debugOut
("SlŸ %d fuŒ\n", 
b≤um
);

490 
b≤um
++;

493 i‡(
b≤um
 > 
MAX_BREAKPOINTS2
)

495 i‡(
so·w¨ebps
)

497 
b≤um
 = 0x00;

501 
b≤um
 = 0xFF;

506 i‡(
bp
[
bp_i
].
íabÀd
 && bp[bp_i].
tﬂdd
 && (bp[bp_i].
ty≥
 =
CODE
))

508 i‡(
b≤um
 == 0xFF)

510 
	`debugOut
("No moreÑoom for code breakpoints.\n");

511 
hadroom
 = 
Ál£
;

514 
bp
[
bp_i
].
b≤um
 = bpnum;

515 
ªmaöög_bps
[
b≤um
] = 
Ál£
;

518 
bp_i
++;

521  
hadroom
;

522 
	}
}

524 
	gjèg2
::
	$upd©eBªakpoöts
()

526 
bp_i
;

528 
	`œyoutBªakpoöts
();

531 
bp_i
 = 0;

532 !
bp
[
bp_i
].
œ°
)

534 
uch¨
 
cmd
[6] = { 
CMND_CLR_BREAK
 };

536 i‡(
bp
[
bp_i
].
t‹emove
)

538 
	`debugOut
("Breakpoint deleted in ICE. slot: %dÅype: %dáddr: 0x%x\n",

539 
bp
[
bp_i
].
b≤um
, bp[bp_i].
ty≥
, bp[bp_i].
addªss
);

541 
cmd
[1] = 
bp
[
bp_i
].
b≤um
;

544 i‡(
bp
[
bp_i
].
b≤um
 == 0x00)

545 
	`u32_to_b4
(
cmd
 + 2, (
bp
[
bp_i
].
addªss
 / 2));

547 
	`u32_to_b4
(
cmd
 + 2, 0);

549 
uch¨
 *
ª•⁄£
;

550 
ª•⁄£Size
;

551 if(!
	`doJègComm™d
(
cmd
, 6, 
ª•⁄£
, 
ª•⁄£Size
))

552 
	`check
(
Ál£
, "FailedÅo clear breakpoint");

554 
dñëe
 [] 
ª•⁄£
;

557 
bp
[
bp_i
].
i˚°©us
 = 
Ál£
;

558 
bp
[
bp_i
].
t‹emove
 = 
Ál£
;

561 
bp_i
++;

565 
bp_i
 = 0;

566 !
bp
[
bp_i
].
œ°
)

568 
uch¨
 
cmd
[8] = { 
CMND_SET_BREAK
 };

570 i‡(
bp
[
bp_i
].
tﬂdd
 && bp[bp_i].
íabÀd
)

572 
	`debugOut
("Breakpointádded in ICE. slot: %dÅype: %dáddr: 0x%x\n",

573 
bp
[
bp_i
].
b≤um
, bp[bp_i].
ty≥
, bp[bp_i].
addªss
);

575 
cmd
[1] = 
bp
[
bp_i
].
ty≥
;

576 
cmd
[2] = 
bp
[
bp_i
].
b≤um
;

578 i‡(
bp
[
bp_i
].
ty≥
 =
CODE
)

583 
	`u32_to_b4
(
cmd
 + 3, (
bp
[
bp_i
].
addªss
 / 2));

587 
	`u32_to_b4
(
cmd
 + 3, 
bp
[
bp_i
].
addªss
);

590 
bp
[
bp_i
].
ty≥
)

592 
READ_DATA
:

593 
READ_DATA
 | 
HAS_MASK
:

594 
cmd
[7] = 0x00;

595 
cmd
[1] = 0x02;

597 
WRITE_DATA
:

598 
WRITE_DATA
 | 
HAS_MASK
:

599 
cmd
[7] = 0x01;

600 
cmd
[1] = 0x02;

602 
ACCESS_DATA
:

603 
ACCESS_DATA
 | 
HAS_MASK
:

604 
cmd
[7] = 0x02;

605 
cmd
[1] = 0x02;

607 
DATA_MASK
:

608 
cmd
[7] = 0x00;

609 
cmd
[1] = 0x03;

611 
CODE
:

612 
cmd
[1] = 
bp
[
bp_i
].
ty≥
;

613 
cmd
[7] = 0x03;

616 
	`check
(
Ál£
, "Invalid bp mode (for data bp)");

620 
uch¨
 *
ª•⁄£
;

621 
ª•⁄£Size
;

622 
	`check
(
	`doJègComm™d
(
cmd
, 8, 
ª•⁄£
, 
ª•⁄£Size
),

624 
dñëe
 [] 
ª•⁄£
;

627 
bp
[
bp_i
].
i˚°©us
 = 
åue
;

628 
bp
[
bp_i
].
tﬂdd
 = 
Ál£
;

631 
bp_i
++;

633 
	}
}

	@jtag2io.cc

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/time.h
>

32 
	~<ãrmios.h
>

33 
	~<f˙é.h
>

34 
	~<sig«l.h
>

35 
	~<°rög.h
>

36 
	~<î∫o.h
>

38 
	~"av¨i˚.h
"

39 
	~"¸c16.h
"

40 
	~"jèg.h
"

41 
	~"jèg2.h
"

42 
	~"jèg2_defs.h
"

44 
	gjèg2
::~
	$jèg2
()

47 i‡(
sig√dIn
)

53 
uch¨
 *
ª•⁄£
, 
r°cmd
 = 
CMND_RESTORE_TARGET
;

54 
ª•⁄£Size
;

55 ()
	`doJègComm™d
(&
r°cmd
, 1, 
ª•⁄£
, 
ª•⁄£Size
);

56 
dñëe
 [] 
ª•⁄£
;

57 
	`doSim∂eJègComm™d
(
CMND_SIGN_OFF
);

58 
sig√dIn
 = 
Ál£
;

60 
	}
}

67 
	gjèg2
::
	$£ndFøme
(
uch¨
 *
comm™d
, 
comm™dSize
)

69 *
buf
 = 
√w
 [
comm™dSize
 + 10];

70 
	`check
(
buf
 !
NULL
, "Out of memory");

72 
buf
[0] = 
MESSAGE_START
;

73 
	`u16_to_b2
(
buf
 + 1, 
comm™d_£quí˚
);

74 
	`u32_to_b4
(
buf
 + 3, 
comm™dSize
);

75 
buf
[7] = 
TOKEN
;

76 
	`mem˝y
(
buf
 + 8, 
comm™d
, 
comm™dSize
);

78 
	`¸ˇµíd
(
buf
, 
comm™dSize
 + 8);

80 
cou¡
 = 
	`ß„wrôe
(
buf
, 
comm™dSize
 + 10);

82 
dñëe
 [] 
buf
;

84 i‡(
cou¡
 < 0)

85 
	`jègCheck
(
cou¡
);

87 
	`check
(
cou¡
 =
comm™dSize
 + 10, 
JTAG_CAUSE
);

88 
	}
}

98 
	gjèg2
::
	$ªcvFøme
(*&
msg
, &
£qno
)

100 
	e°©es
 {

101 
sSTART
, 
sSEQNUM1
, 
sSEQNUM2
, 
sSIZE1
, 
sSIZE2
, 
sSIZE3
, 
sSIZE4
,

102 
sTOKEN
, 
sDATA
, 
sCSUM1
, 
sCSUM2
, 
sDONE


103 } 
°©e
 = 
sSTART
;

104 
msgÀn
 = 0, 
l
 = 0;

105 
hódîidx
 = 0;

106 
boﬁ
 
ign‹pkt
 = 
Ál£
;

107 
rv
;

108 
c
, *
buf
 = 
NULL
, 
hódî
[8];

109 
r_£qno
 = 0;

110 
checksum
 = 0;

112 
msg
 = 
NULL
;

114 i‡(
˘æPùe
 != -1)

117 
cmd
[1] = { 'r' };

118 ()
	`wrôe
(
˘æPùe
, 
cmd
, 1);

121 
°©e
 !
sDONE
) {

122 i‡(
°©e
 =
sDATA
) {

123 
	`debugOut
("sDATA:Ñódög %d byãs\n", 
msgÀn
);

124 
rv
 = 0;

125 i‡(
ign‹pkt
) {

127 
l
 = 0;Ü < 
msgÀn
;Ü++) {

128 
rv
 +
	`timeout_ªad
(&
c
, 1, 
JTAG_RESPONSE_TIMEOUT
);

129 
	`debugOut
("ign: 0x%02x\n", 
c
);

132 
rv
 +
	`timeout_ªad
(
buf
 + 8, 
msgÀn
, 
JTAG_RESPONSE_TIMEOUT
);

133 
	`debugOut
("read: ");

134 
l
 = 0;Ü < 
msgÀn
;Ü++) {

135 
	`debugOut
(" %02x", 
buf
[
l
 + 8]);

137 
	`debugOut
("\n");

139 i‡(
rv
 == 0)

143 
rv
 = 
	`timeout_ªad
(&
c
, 1, 
JTAG_RESPONSE_TIMEOUT
);

144 i‡(
rv
 == 0) {

146 
	`debugOut
("recv:Åimeout\n");

149 
	`debugOut
("ªcv: 0x%02x\n", 
c
);

151 
checksum
 ^
c
;

153 i‡(
°©e
 < 
sDATA
)

154 
hódî
[
hódîidx
++] = 
c
;

156 
°©e
) {

157 
sSTART
:

158 i‡(
c
 =
MESSAGE_START
) {

159 
°©e
 = 
sSEQNUM1
;

161 
hódîidx
 = 0;

164 
sSEQNUM1
:

165 
r_£qno
 = 
c
;

166 
°©e
 = 
sSEQNUM2
;

168 
sSEQNUM2
:

169 
r_£qno
 |(()
c
 << 8);

170 
°©e
 = 
sSIZE1
;

172 
sSIZE1
:

173 
°©e
 = 
sSIZE2
;

174 
domsgÀn
;

175 
sSIZE2
:

176 
°©e
 = 
sSIZE3
;

177 
domsgÀn
;

178 
sSIZE3
:

179 
°©e
 = 
sSIZE4
;

180 
domsgÀn
;

181 
sSIZE4
:

182 
°©e
 = 
sTOKEN
;

183 
domsgÀn
:

184 
msgÀn
 >>= 8;

185 
msgÀn
 |(()
c
 << 24);

187 
sTOKEN
:

188 i‡(
c
 =
TOKEN
) {

189 
°©e
 = 
sDATA
;

190 i‡(
msgÀn
 > 
MAX_MESSAGE
) {

191 
	`¥ötf
("msglen %luÉxceeds max message size %u, ignoring message\n",

192 
msgÀn
, 
MAX_MESSAGE
);

193 
°©e
 = 
sSTART
;

194 
hódîidx
 = 0;

196 
buf
 = 
√w
 [
msgÀn
 + 10];

197 
	`check
(
buf
 !
NULL
, "Out of memory");

199 
	`mem˝y
(
buf
, 
hódî
, 8);

202 
°©e
 = 
sSTART
;

203 
hódîidx
 = 0;

206 
sDATA
:

208 
l
 = 
msgÀn
 + 8;

209 
°©e
 = 
sCSUM1
;

211 
sCSUM1
:

212 
buf
[
l
++] = 
c
;

213 
°©e
 = 
sCSUM2
;

215 
sCSUM2
:

216 
buf
[
l
++] = 
c
;

217 i‡(
	`¸cvîify
(
buf
, 
msgÀn
 + 10)) {

218 
	`debugOut
("CRC OK");

219 
°©e
 = 
sDONE
;

221 
	`debugOut
("checksumÉrror");

222 
dñëe
 [] 
buf
;

227 
	`debugOut
("unknown state");

228 
dñëe
 [] 
buf
;

233 
£qno
 = 
r_£qno
;

234 
msg
 = 
buf
;

236  ()
msgÀn
;

237 
	}
}

243 
	gjèg2
::
	$ªcv
(
uch¨
 *&
msg
)

245 
r_£qno
;

246 
rv
;

249 i‡((
rv
 = 
	`ªcvFøme
(
msg
, 
r_£qno
)) <= 0)

250  
rv
;

251 
	`debugOut
("\nGot message seqno %d (command_sequence == %d)\n",

252 
r_£qno
, 
comm™d_£quí˚
);

253 i‡(
r_£qno
 =
comm™d_£quí˚
) {

254 i‡(++
comm™d_£quí˚
 == 0xffff)

255 
comm™d_£quí˚
 = 0;

261 
	`memmove
(
msg
, msg + 8, 
rv
);

262  
rv
;

264 i‡(
r_£qno
 == 0xffff) {

265 
	`debugOut
("\ngotásynchronousÉvent: 0x%02x\n",

266 
msg
[8]);

273 
	`debugOut
("\ngot wrong sequenceÇumber, %u != %u\n",

274 
r_£qno
, 
comm™d_£quí˚
);

276 
dñëe
 [] 
msg
;

278 
	}
}

293 
boﬁ
 
	gjèg2
::
	$£ndJègComm™d
(
uch¨
 *
comm™d
, 
comm™dSize
, &
åõs
,

294 
uch¨
 *&
msg
, &
msgsize
, 
boﬁ
 
vîify
)

296 
	`check
(
åõs
++ < 
MAX_JTAG_COMM_ATTEMPS
,

299 
	`debugOut
("\ncomm™d[0x%02x, %d]: ", 
comm™d
[0], 
åõs
);

301 
i
 = 0; i < 
comm™dSize
; i++)

302 
	`debugOut
("%.2X ", 
comm™d
[
i
]);

304 
	`debugOut
("\n");

306 
	`£ndFøme
(
comm™d
, 
comm™dSize
);

308 
msgsize
 = 
	`ªcv
(
msg
);

309 i‡(
vîify
)

310 
	`jègCheck
(
msgsize
 - 1);

311 i‡(
msgsize
 < 1)

312  
Ál£
;

314 
	`debugOut
("response: ");

315 
i
 = 0; i < 
msgsize
; i++)

317 
	`debugOut
("%.2X ", 
msg
[
i
]);

319 
	`debugOut
("\n");

321 
c
 = 
msg
[0];

323 i‡(
c
 >
RSP_OK
 && c < 
RSP_FAILED
)

324  
åue
;

326  
Ál£
;

327 
	}
}

330 
boﬁ
 
	gjèg2
::
	$doJègComm™d
(
uch¨
 *
comm™d
, 
comm™dSize
,

331 
uch¨
 *&
ª•⁄£
, &
ª•⁄£Size
,

332 
boﬁ
 
ªåyOnTimeout
)

334 
åyCou¡
 = 0;

339 i‡(
	`£ndJègComm™d
(
comm™d
, 
comm™dSize
, 
åyCou¡
, 
ª•⁄£
, 
ª•⁄£Size
, 
Ál£
))

340  
åue
;

342 i‡(
ª•⁄£Size
 > 0 || !
ªåyOnTimeout
)

345  
Ál£
;

347 i‡(
åyCou¡
 > 3 && 
˘æPùe
 != -1)

350 
	`debugOut
("Resetting EPs...\n");

351 
cmd
[1] = { 'c' };

352 ()
	`wrôe
(
˘æPùe
, 
cmd
, 1);

355 
	}
}

357 
	gjèg2
::
	$doSim∂eJègComm™d
(
uch¨
 
comm™d
)

359 
åyCou¡
 = 0, 
dummy
;

360 
uch¨
 *
ª∂ydummy
;

365 i‡(
	`£ndJègComm™d
(&
comm™d
, 1, 
åyCou¡
, 
ª∂ydummy
, 
dummy
, 
Ál£
)) {

366 
	`check
(
ª∂ydummy
 !
NULL
, 
JTAG_CAUSE
);

367 
	`check
(
dummy
 =1 && 
ª∂ydummy
[0] =
RSP_OK
,

369 
dñëe
 [] 
ª∂ydummy
;

373 
	`jègCheck
(
dummy
 <= 0);

375 
	}
}

378 
	gjèg2
::
	$ch™geBôR©e
(
√wBôR©e
)

383 i‡(
is_usb
)

386 
uch¨
 
jègøã
;

388 
√wBôR©e
) {

390 
jègøã
 = 
PAR_BAUD_9600
;

393 
jègøã
 = 
PAR_BAUD_19200
;

396 
jègøã
 = 
PAR_BAUD_38400
;

399 
jègøã
 = 
PAR_BAUD_57600
;

402 
jègøã
 = 
PAR_BAUD_115200
;

405 
	`£tJègP¨amëî
(
PAR_BAUD_RATE
, &
jègøã
, 1);

406 
	`ch™geLoˇlBôR©e
(
√wBôR©e
);

407 
	}
}

410 
	gjèg2
::
	$£tDevi˚Des¸ùt‹
(
jèg_devi˚_def_ty≥
 *
dev
)

412 
uch¨
 *
ª•⁄£
;

413 
uch¨
 *
comm™d
 = (uch¨ *)(&
dev
->
dev_desc2
);

414 
ª•Size
;

416 
	`check
(
	`doJègComm™d
(
comm™d
, 
devdes¸Àn
, 
ª•⁄£
, 
ª•Size
),

419 
dñëe
 [] 
ª•⁄£
;

420 
	}
}

423 
boﬁ
 
	gjèg2
::
	$synchr⁄i£At
(
bôøã
)

425 
	`debugOut
("Aâem±ög synchr⁄ißti⁄áàbôøã %d\n", 
bôøã
);

427 
	`ch™geLoˇlBôR©e
(
bôøã
);

429 
åõs
 = 0;

430 
uch¨
 *
sign⁄msg
, 
sign⁄cmd
 = 
CMND_GET_SIGN_ON
;

431 
msgsize
;

433 
åõs
 < 
MAX_JTAG_SYNC_ATTEMPS
)

435 i‡(
	`£ndJègComm™d
(&
sign⁄cmd
, 1, 
åõs
, 
sign⁄msg
, 
msgsize
, 
Ál£
)) {

436 
	`check
(
sign⁄msg
[0] =
RSP_SIGN_ON
 && 
msgsize
 > 17,

438 
sign⁄msg
[
msgsize
 - 1] = '\0';

439 
	`°©usOut
("Foundá devi˚: %s\n", 
sign⁄msg
 + 16);

440 
	`°©usOut
("SerialÇumber: %02x:%02x:%02x:%02x:%02x:%02x\n",

441 
sign⁄msg
[10], signonmsg[11], signonmsg[12],

442 
sign⁄msg
[13], signonmsg[14], signonmsg[15]);

443 
	`debugOut
("JTAG ICE mkII sign-on message:\n");

444 
	`debugOut
("CommunicationsÖrotocol version: %u\n",

445 ()
sign⁄msg
[1]);

446 
	`debugOut
("M_MCU:\n");

447 
	`debugOut
(" boot-loader FW version: %u\n",

448 ()
sign⁄msg
[2]);

449 
	`debugOut
(" firmware version: %u.%02u\n",

450 ()
sign⁄msg
[4], ()signonmsg[3]);

451 
	`debugOut
(" hardware version: %u\n",

452 ()
sign⁄msg
[5]);

453 
	`debugOut
("S_MCU:\n");

454 
	`debugOut
(" boot-loader FW version: %u\n",

455 ()
sign⁄msg
[6]);

456 
	`debugOut
(" firmware version: %u.%02u\n",

457 ()
sign⁄msg
[8], ()signonmsg[7]);

458 
	`debugOut
(" hardware version: %u\n",

459 ()
sign⁄msg
[9]);

462 i‡(
emu_ty≥
 =
EMULATOR_JTAGICE
)

464 
fwvî
 = (()
sign⁄msg
[8] << 8) | ()signonmsg[7];

468 
	#FWVER
(
maj
, 
mö
Ë((maj << 8Ë| (mö))

	)

469 i‡(
fwvî
 < 
	`FWVER
(3, 16)) {

470 
devdes¸Àn
 -= 2;

471 
	`Ârötf
(
°dîr
,

474 } i‡(
fwvî
 < 
	`FWVER
(4, 0)) {

475 
devdes¸Àn
 -= 2;

477 #unde‡
FWVER


480 
dñëe
 [] 
sign⁄msg
;

481  
åue
;

484  
Ál£
;

485 
	}
}

488 
	gjèg2
::
	$°¨tJègLök
()

490 
bôøãs
[] =

493 
i
 = 0; i <  
bôøãs
 /  *bitrates; i++)

494 i‡(
	`synchr⁄i£At
(
bôøãs
[
i
])) {

495 
uch¨
 
vÆ
;

497 i‡(
≠∂y_nSRST
) {

498 
vÆ
 = 0x01;

499 
	`£tJègP¨amëî
(
PAR_EXTERNAL_RESET
, &
vÆ
, 1);

502 
vÆ
 = 
u£DebugWúe
? 
EMULATOR_MODE_DEBUGWIRE
:

503 (
is_xmega
? 
EMULATOR_MODE_JTAG_XMEGA
: 
EMULATOR_MODE_JTAG
);

504 
	`£tJègP¨amëî
(
PAR_EMULATOR_MODE
, &
vÆ
, 1);

505 
sig√dIn
 = 
åue
;

510 
	`check
(
Ál£
, "FailedÅo synchronise withÅhe JTAG ICE (is it connectedándÖowered?)");

511 
	}
}

520 
	gjèg2
::
	$devi˚AutoC⁄fig
()

522 
devi˚_id
;

523 
uch¨
 *
ª•
;

524 
ª•Size
;

525 
i
;

526 
jèg_devi˚_def_ty≥
 *
pDevi˚
 = 
devi˚Deföôi⁄s
;

529 
	`debugOut
("Automatic device detection: ");

532 
	`c⁄figDaisyChaö
();

535 i‡(
u£DebugWúe
)

537 
	`gëJègP¨amëî
(
PAR_TARGET_SIGNATURE
, 
ª•
, 
ª•Size
);

538 
	`jègCheck
(
ª•Size
 == 2);

539 
devi˚_id
 = 
ª•
[1] | (resp[2] << 8);

540 
dñëe
 [] 
ª•
;

542 
	`°©usOut
("Rï‹ãd debugWúêdevi˚ ID: 0x%0X\n", 
devi˚_id
);

546 
	`gëJègP¨amëî
(
PAR_JTAGID
, 
ª•
, 
ª•Size
);

547 
	`jègCheck
(
ª•Size
 == 4);

548 
devi˚_id
 = 
ª•
[1] | (resp[2] << 8) | (resp[3] << 16) |Ñesp[4] << 24;

549 
dñëe
 [] 
ª•
;

551 
	`debugOut
("JTAG id = 0x%0X : Ver = 0x%0x : Device = 0x%0x : Manuf = 0x%0x\n",

552 
devi˚_id
,

553 (
devi˚_id
 & 0xF0000000) >> 28,

554 (
devi˚_id
 & 0x0FFFF000) >> 12,

555 (
devi˚_id
 & 0x00000FFE) >> 1);

557 
devi˚_id
 = (device_id & 0x0FFFF000) >> 12;

558 
	`°©usOut
("Rï‹ãd JTAG devi˚ ID: 0x%0X\n", 
devi˚_id
);

561 i‡(
devi˚_«me
 == 0)

563 
pDevi˚
->
«me
)

565 i‡(
pDevi˚
->
devi˚_id
 == device_id)

568 
pDevi˚
++;

570 
	`check
(
pDevi˚
->
«me
,

572 
devi˚_id
);

576 
	`debugOut
("Lookög f‹ devi˚: %s\n", 
devi˚_«me
);

578 
pDevi˚
->
«me
)

580 i‡(
	`°rˇ£cmp
(
pDevi˚
->
«me
, 
devi˚_«me
) == 0)

583 
pDevi˚
++;

585 
	`check
(
pDevi˚
->
«me
,

587 
devi˚_«me
);

590 i‡(
devi˚_«me
)

592 i‡(
devi˚_id
 !
pDevi˚
->device_id)

594 
	`°©usOut
("Configured for device ID: 0x%0X %s -- FORCED with %s\n",

595 
pDevi˚
->
devi˚_id
,ÖDevi˚->
«me
, 
devi˚_«me
);

599 
	`°©usOut
("Configured for device ID: 0x%0X %s -- Matched with "

600 "%s\n", 
pDevi˚
->
devi˚_id
,ÖDevi˚->
«me
, 
devi˚_«me
);

605 
	`°©usOut
("Configured for device ID: 0x%0X %s\n",

606 
pDevi˚
->
devi˚_id
,ÖDevi˚->
«me
);

609 
devi˚_«me
 = (*)
pDevi˚
->
«me
;

611 
globÆ_p_devi˚_def
 = 
pDevi˚
;

613 
	`£tDevi˚Des¸ùt‹
(
pDevi˚
);

614 
	}
}

617 
	gjèg2
::
	$öôJègBox
()

619 
	`°©usOut
("JTAG config starting.\n");

621 i‡(
devi˚_«me
 != 0)

623 
jèg_devi˚_def_ty≥
 *
pDevi˚
 = 
devi˚Deföôi⁄s
;

625 
pDevi˚
->
«me
)

627 i‡(
	`°rˇ£cmp
(
pDevi˚
->
«me
, 
devi˚_«me
) == 0)

630 
pDevi˚
++;

633 i‡(
pDevi˚
->
«me
 != 0)

637 
is_xmega
 = 
pDevi˚
->is_xmega;

641 
	`°¨tJègLök
();

642 
	`ch™geBôR©e
(115200);

644 
	`öãºu±Progøm
();

646 
	`devi˚AutoC⁄fig
();

649 
	`dñëeAŒBªakpoöts
();

651 
	`°©usOut
("JTAG config complete.\n");

652 
	}
}

655 
	gjèg2
::
	$öôJègOnChùDebuggög
(
bôøã
)

657 
	`°©usOut
("PreparingÅheÅarget device for On Chip Debugging.\n");

660 i‡(!
u£DebugWúe
)

662 
uch¨
 
br
;

663 i‡(
bôøã
 >= 6400000)

664 
br
 = 0;

665 i‡(
bôøã
 >= 2800000)

666 
br
 = 1;

667 i‡(
bôøã
 >= 20900)

668 
br
 = ()(5.35e6 / ()
bôøã
);

670 
br
 = 255;

672 
	`£tJègP¨amëî
(
PAR_OCD_JTAG_CLK
, &
br
, 1);

677 
	`íabÀProgømmög
();

680 
uch¨
 *
lockBôs
 = 0;

681 
lockBôs
 = 
	`jègRód
(
LOCK_SPACE_ADDR_OFFSET
 + 0, 1);

683 i‡(*
lockBôs
 !
LOCK_BITS_ALL_UNLOCKED
)

685 
lockBôs
[0] = 
LOCK_BITS_ALL_UNLOCKED
;

686 
	`jègWrôe
(
LOCK_SPACE_ADDR_OFFSET
 + 0, 1, 
lockBôs
);

689 
	`°©usOut
("\nDisablingÜock bits:\n");

690 
	`°©usOut
(" LockBô†-> 0x%02x\n", *
lockBôs
);

692 i‡(
lockBôs
)

694 
dñëe
 [] 
lockBôs
;

695 
lockBôs
 = 0;

699 
uch¨
 *
fu£Bôs
 = 0;

700 
	`°©usOut
("\nEnabling on-chip debugging:\n");

701 
fu£Bôs
 = 
	`jègRód
(
FUSE_SPACE_ADDR_OFFSET
 + 0, 3);

703 i‡((
fu£Bôs
[1] & 
FUSE_OCDEN
) == FUSE_OCDEN)

705 
fu£Bôs
[1] = fu£Bôs[1] & ~
FUSE_OCDEN
;

706 
	`jègWrôe
(
FUSE_SPACE_ADDR_OFFSET
 + 1, 1, &
fu£Bôs
[1]);

709 
	`jègDi•œyFu£s
(
fu£Bôs
);

711 i‡(
fu£Bôs
)

713 
dñëe
 [] 
fu£Bôs
;

714 
fu£Bôs
 = 0;

717 
	`dißbÀProgømmög
();

721 
	`ª£tProgøm
();

722 
uch¨
 
timîs
 = 0;

723 i‡(!
is_xmega
)

724 
	`£tJègP¨amëî
(
PAR_TIMERS_RUNNING
, &
timîs
, 1);

725 
	`ª£tProgøm
();

726 
	}
}

728 
	gjèg2
::
	$c⁄figDaisyChaö
()

730 
buf
[4];

732 i‡((
dchaö
.
unôs_bef‹e
 > 0) ||

733 (
dchaö
.
unôs_a·î
 > 0) ||

734 (
dchaö
.
bôs_bef‹e
 > 0) ||

735 (
dchaö
.
bôs_a·î
 > 0) ){

736 
buf
[0] = 
dchaö
.
unôs_bef‹e
;

737 
buf
[1] = 
dchaö
.
unôs_a·î
;

738 
buf
[2] = 
dchaö
.
bôs_bef‹e
;

739 
buf
[3] = 
dchaö
.
bôs_a·î
;

740 
	`£tJègP¨amëî
(
PAR_DAISY_CHAIN_INFO
, 
buf
, 4);

742 
	}
}

	@jtag2misc.cc

24 
	~<°d¨g.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

28 
	~<sys/°©.h
>

29 
	~<ãrmios.h
>

30 
	~<f˙é.h
>

31 
	~<°rög.h
>

33 
	~"av¨i˚.h
"

34 
	~"jèg.h
"

35 
	~"jèg2.h
"

37 
	gjèg2
::
	$£tJègP¨amëî
(
uch¨
 
ôem
, uch¨ *
√wVÆue
, 
vÆSize
)

39 
ª•size
;

44 
buf
[2 + 4], *
ª•
;

46 
	`check
(
vÆSize
 <= 4, "ParameterÅooÜarge in setJtagParameter");

48 
buf
[0] = 
CMND_SET_PARAMETER
;

49 
buf
[1] = 
ôem
;

50 
	`mem˝y
(
buf
 + 2, 
√wVÆue
, 
vÆSize
);

52 
	`check
(
	`doJègComm™d
(
buf
, 
vÆSize
 + 2, 
ª•
, 
ª•size
),

55 
dñëe
 [] 
ª•
;

56 
	}
}

63 
	gjèg2
::
	$gëJègP¨amëî
(
uch¨
 
ôem
, uch¨ *&
ª•
, &
ª•Size
)

69 
buf
[2];

71 
buf
[0] = 
CMND_GET_PARAMETER
;

72 
buf
[1] = 
ôem
;

74 
	`check
(
	`doJègComm™d
(
buf
, 2, 
ª•
, 
ª•Size
),

76 
	`check
(
ª•
[0] =
RSP_PARAMETER
 && 
ª•Size
 > 1,

78 
	}
}

	@jtag2prog.cc

30 
	~<°d¨g.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<uni°d.h
>

34 
	~<sys/°©.h
>

35 
	~<ãrmios.h
>

36 
	~<f˙é.h
>

37 
	~<°rög.h
>

38 
	~<m©h.h
>

39 
	~<bfd.h
>

41 
	~"av¨i˚.h
"

42 
	~"jèg.h
"

43 
	~"jèg2.h
"

46 #i‚de‡
bfd_gë_£˘i⁄_size


47 
	#bfd_gë_£˘i⁄_size
 
bfd_gë_£˘i⁄_size_bef‹e_ªloc


	)

50 
	$öôImage
(
BFDimage
 *
image
)

52 
i
;

53 
image
->
œ°_addªss
 = 0;

54 
image
->
fú°_addªss
 = 0;

55 
image
->
fú°_addªss_ok
 = 
Ál£
;

56 
image
->
has_d©a
 = 
Ál£
;

57 
i
=0;i<
MAX_IMAGE_SIZE
;i++)

59 
image
->image[
i
].
vÆ
 = 0x00;

60 
image
->image[
i
].
u£d
 = 
Ál£
;

62 
	}
}

64 
	gjèg2
::
	$íabÀProgømmög
()

66 i‡(!
u£DebugWúe
)

68 
¥ogømmögE«bÀd
 = 
åue
;

69 
	`doSim∂eJègComm™d
(
CMND_ENTER_PROGMODE
);

71 
	}
}

74 
	gjèg2
::
	$dißbÀProgømmög
()

76 i‡(!
u£DebugWúe
)

78 
¥ogømmögE«bÀd
 = 
Ál£
;

79 
	`doSim∂eJègComm™d
(
CMND_LEAVE_PROGMODE
);

81 
	}
}

86 
	gjèg2
::
	$îa£ProgømMem‹y
()

88 
	`doSim∂eJègComm™d
(
CMND_CHIP_ERASE
);

89 
	}
}

91 
	gjèg2
::
	$îa£ProgømPage
(
addªss
)

93 
uch¨
 *
ª•⁄£
;

94 
ª•Size
;

95 
uch¨
 
comm™d
[5] = { 
CMND_ERASEPAGE_SPM
 };

97 
comm™d
[1] = (
addªss
 & 0xff000000) >> 24;

98 
comm™d
[2] = (
addªss
 & 0xff0000) >> 16;

99 
comm™d
[3] = (
addªss
 & 0xff00) >> 8;

100 
comm™d
[4] = 
addªss
;

102 
	`check
(
	`doJègComm™d
(
comm™d
, (command),

103 
ª•⁄£
, 
ª•Size
),

106 
dñëe
 [] 
ª•⁄£
;

107 
	}
}

112 
	$check_fûe_f‹m©
(
bfd
 *
fûe
)

114 **
m©chög
;

115 
d⁄e
 = 0;

116 
îr
 = 1;

119 i‡(
	`bfd_check_f‹m©
(
fûe
, 
bfd_¨chive
Ë=
åue
)

121 
	`Ârötf
(
°dîr
, "Input file isárchive\n");

124 i‡(
	`bfd_check_f‹m©_m©ches
 (
fûe
, 
bfd_obje˘
, &
m©chög
))

125 
îr
 = 0;

127 i‡(
	`bfd_gë_îr‹
 (Ë=
bfd_îr‹_fûe_ambiguou¶y_ªcognized
)

129 
	`Ârötf
(
°dîr
, "File formatámbiguous: %s\n",

130 
	`bfd_îrmsg
(
	`bfd_gë_îr‹
()));

133 i‡(
	`bfd_gë_îr‹
 (Ë!
bfd_îr‹_fûe_nŸ_ªcognized
)

135 
	`Ârötf
(
°dîr
, "File formatÇot supported: %s\n",

136 
	`bfd_îrmsg
(
	`bfd_gë_îr‹
()));

139 i‡(
	`bfd_check_f‹m©_m©ches
 (
fûe
, 
bfd_c‹e
, &
m©chög
))

140 
îr
 = 0;

142  
îr
;

143 
	}
}

158 
	$gë_£˘i⁄_addr
(
a£˘i⁄
 *
£˘i⁄
, 
BFDmem‹yTy≥
 
memty≥
)

160 
BFDmem‹yTy≥
 
£˘memty≥
;

161 
addr
 = 
£˘i⁄
->
lma
;

163 i‡((
£˘i⁄
->
Êags
 & 
SEC_HAS_CONTENTS
) &&

164 ((
£˘i⁄
->
Êags
 & 
SEC_ALLOC
Ë|| (£˘i⁄->Êag†& 
SEC_LOAD
)))

166 i‡(
£˘i⁄
->
lma
 < 
DATA_SPACE_ADDR_OFFSET
)

167 
£˘memty≥
 = 
MEM_FLASH
;

168 i‡(
£˘i⁄
->
lma
 < 
EEPROM_SPACE_ADDR_OFFSET
)

169 
£˘memty≥
 = 
MEM_RAM
;

170 i‡(
£˘i⁄
->
lma
 < 
FUSE_SPACE_ADDR_OFFSET
)

171 
£˘memty≥
 = 
MEM_EEPROM
;

173 i‡(
memty≥
 =
£˘memty≥
) {

174 i‡(
£˘memty≥
 =
MEM_FLASH
) {

177  (
£˘i⁄
->
lma
);

179  (
£˘i⁄
->
lma
 &~ 
ADDR_SPACE_MASK
);

186 
	}
}

191 
	$jèg_¸óã_image
(
bfd
 *
fûe
, 
a£˘i⁄
 *
£˘i⁄
,

192 
BFDimage
 *
image
,

193 
BFDmem‹yTy≥
 
memty≥
)

195 c⁄° *
«me
;

196 
addr
;

197 
size
;

198 
uch¨
 
buf
[
MAX_IMAGE_SIZE
];

199 
i
;

202 i‡(! 
£˘i⁄
)

206 
«me
 = 
	`bfd_gë_£˘i⁄_«me
(
fûe
, 
£˘i⁄
);

207 
size
 = 
	`bfd_gë_£˘i⁄_size
(
£˘i⁄
);

209 i‡((
addr
 = 
	`gë_£˘i⁄_addr
(
£˘i⁄
, 
memty≥
)) != 0xffffff)

211 
	`debugOut
("Getting section contents,áddr=0x%lx size=0x%lx\n",

212 
addr
, 
size
);

215 
	`bfd_gë_£˘i⁄_c⁄ã¡s
(
fûe
, 
£˘i⁄
, 
buf
, 0, 
size
);

218 
i
=0; i<
size
; i++)

220 
c
 = 
i
+
addr
;

221 
image
->image[
c
].
vÆ
 = 
buf
[
i
];

222 
image
->image[
c
].
u£d
 = 
åue
;

226 i‡(
addr
+
size
 > 
image
->
œ°_addªss
)

227 
image
->
œ°_addªss
 = 
addr
+
size
;

230 i‡((! 
image
->
fú°_addªss_ok
Ë|| (
addr
 < image->
fú°_addªss
))

232 
image
->
fú°_addªss
 = 
addr
;

233 
image
->
fú°_addªss_ok
 = 
åue
;

235 
	`debugOut
("%s Image create: Adding %sátáddr 0x%lx size %d (0x%lx)\n",

236 
BFDmem‹yTy≥Såög
[
memty≥
], 
«me
, 
addr
, 
size
, size);

239 
image
->
has_d©a
 = 
åue
;

241 
	}
}

244 
	gjèg2
::
	$dow∆ﬂdToT¨gë
(c⁄° * 
fûíame
, 
boﬁ
 
¥ogøm
, boﬁ 
vîify
)

248 
°©
 
if°©
;

249 *
èrgë
 = 
NULL
;

250 *
deÁu…_èrgë
 = "binary";

251 
∑ge_size
;

252 
boﬁ
 
d⁄e
 = 0;

253 
bfd
 *
fûe
;

254 
a£˘i⁄
 *
p
;

256 
BFDimage
 
Êashimg
, 
ì¥omimg
;

258 
	`öôImage
(&
Êashimg
);

259 
	`öôImage
(&
ì¥omimg
);

261 
Êashimg
.
«me
 = 
BFDmem‹yTy≥Såög
[
MEM_FLASH
];

262 
ì¥omimg
.
«me
 = 
BFDmem‹yTy≥Såög
[
MEM_EEPROM
];

264 
	`unixCheck
(
	`°©
(
fûíame
, &
if°©
), "Can't stat() file %s", filename);

267 
	`bfd_öô
();

273 ! 
d⁄e
)

275 
fûe
 = 
	`bfd_›ír
(
fûíame
, 
èrgë
);

276 i‡(! 
fûe
)

278 
	`Ârötf
–
°dîr
, "CouldÇŸ o≥¿öpuàfûê%s:%s\n", 
fûíame
,

279 
	`bfd_îrmsg
(
	`bfd_gë_îr‹
()) );

280 
	`exô
(-1);

284 i‡(
	`check_fûe_f‹m©
(
fûe
))

289 
	`Ârötf
(
°dîr
, "Warning: File format unknown,ássuming "

291 
èrgë
 = 
deÁu…_èrgë
;

295 
d⁄e
 = 1;

302 
∑ge_size
 = 
	`gë_∑ge_size
(
MEM_FLASH
);

304 
	`debugOut
("FlashÖage size: 0x%0x\nEEPROMÖage size: 0x%0x\n",

305 
∑ge_size
, 
	`gë_∑ge_size
(
MEM_EEPROM
));

307 #i‡
nŸ√eded


308 
	`£tJègP¨amëî
(
JTAG_P_FLASH_PAGESIZE_LOW
, 
∑ge_size
 & 0xff);

309 
	`£tJègP¨amëî
(
JTAG_P_FLASH_PAGESIZE_HIGH
, 
∑ge_size
 >> 8);

311 
	`£tJègP¨amëî
(
JTAG_P_EEPROM_PAGESIZE
,

312 
	`gë_∑ge_size
(
MEM_EEPROM
));

316 
p
 = 
fûe
->
£˘i⁄s
;

317 
p
)

319 
	`jèg_¸óã_image
(
fûe
, 
p
, &
Êashimg
, 
MEM_FLASH
);

320 
	`jèg_¸óã_image
(
fûe
, 
p
, &
ì¥omimg
, 
MEM_EEPROM
);

321 
p
 =Ö->
√xt
;

324 
	`íabÀProgømmög
();

327 i‡(
Êashimg
.
has_d©a
)

328 
	`jèg_Êash_image
(&
Êashimg
, 
MEM_FLASH
, 
¥ogøm
, 
vîify
);

329 i‡(
ì¥omimg
.
has_d©a
)

330 
	`jèg_Êash_image
(&
ì¥omimg
, 
MEM_EEPROM
, 
¥ogøm
, 
vîify
);

332 
	`dißbÀProgømmög
();

334 
	`unixCheck
(
	`bfd_˛o£
(
fûe
), "Eº‹ closög %s", 
fûíame
);

336 
	`°©usOut
("\nDownload complete.\n");

337 
	}
}

	@jtag2run.cc

26 
	~<˘y≥.h
>

27 
	~<°d¨g.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<uni°d.h
>

31 
	~<sys/°©.h
>

32 
	~<sys/time.h
>

33 
	~<ãrmios.h
>

34 
	~<f˙é.h
>

35 
	~<°rög.h
>

37 
	~"av¨i˚.h
"

38 
	~"jèg.h
"

39 
	~"jèg2.h
"

40 
	~"ªmŸe.h
"

42 
	gjèg2
::
	$gëProgømCou¡î
()

44 
uch¨
 *
ª•⁄£
;

45 
ª•⁄£Size
;

46 
uch¨
 
comm™d
[] = { 
CMND_READ_PC
 };

48 
	`check
(
	`doJègComm™d
(
comm™d
, (comm™d), 
ª•⁄£
, 
ª•⁄£Size
),

50 
ªsu…
 = 
	`b4_to_u32
(
ª•⁄£
 + 1);

51 
dñëe
 [] 
ª•⁄£
;

55 
ªsu…
 *= 2;

57  
ªsu…
;

58 
	}
}

60 
boﬁ
 
	gjèg2
::
	$£tProgømCou¡î
(
pc
)

62 
uch¨
 *
ª•⁄£
;

63 
ª•⁄£Size
;

64 
uch¨
 
comm™d
[5] = { 
CMND_WRITE_PC
 };

66 
	`u32_to_b4
(
comm™d
 + 1, 
pc
 / 2);

68 
	`check
(
	`doJègComm™d
(
comm™d
, (comm™d), 
ª•⁄£
, 
ª•⁄£Size
),

71 
dñëe
 [] 
ª•⁄£
;

73  
åue
;

74 
	}
}

76 
boﬁ
 
	gjèg2
::
	$ª£tProgøm
(
boﬁ
 
possibÀ_nSRST_ign‹ed
)

78 i‡(
u£DebugWúe
) {

81  
	`öãºu±Progøm
()

82 && 
	`£tProgømCou¡î
(0);

84 
uch¨
 
cmd
[2] = { 
CMND_RESET
, 0x01 };

85 
uch¨
 *
ª•
;

86 
ª•Size
;

88 
boﬁ
 
rv
 = 
	`doJègComm™d
(
cmd
, 2, 
ª•
, 
ª•Size
);

89 
dñëe
 [] 
ª•
;

92 ()
	`evítLo›
();

94  
rv
;

96 
	}
}

98 
boﬁ
 
	gjèg2
::
	$öãºu±Progøm
()

100 
uch¨
 
cmd
[2] = { 
CMND_FORCED_STOP
, 0x01 };

101 
uch¨
 *
ª•
;

102 
ª•Size
;

104 
boﬁ
 
rv
 = 
	`doJègComm™d
(
cmd
, 2, 
ª•
, 
ª•Size
);

105 
dñëe
 [] 
ª•
;

107  
rv
;

108 
	}
}

110 
boﬁ
 
	gjèg2
::
	$ªsumeProgøm
()

112 
	`doSim∂eJègComm™d
(
CMND_GO
);

114  
åue
;

115 
	}
}

117 
boﬁ
 
	gjèg2
::
	$evítLo›
()

119 
maxfd
;

120 
fd_£t
 
ªadfds
;

121 
boﬁ
 
bªakpoöt
 = 
Ál£
, 
gdbI¡îru±
 = false;

126 i‡(
˘æPùe
 != -1)

129 
cmd
[1] = { 'p' };

130 ()
	`wrôe
(
˘æPùe
, 
cmd
, 1);

135 
	`debugOut
("Waiting for input.\n");

139 
	`FD_ZERO
 (&
ªadfds
);

140 i‡(
gdbFûeDes¸ùt‹
 != -1)

141 
	`FD_SET
 (
gdbFûeDes¸ùt‹
, &
ªadfds
);

142 
	`FD_SET
 (
jègBox
, &
ªadfds
);

143 i‡(
gdbFûeDes¸ùt‹
 != -1)

144 
maxfd
 = 
jègBox
 > 
gdbFûeDes¸ùt‹
 ? jtagBox : gdbFileDescriptor;

146 
maxfd
 = 
jègBox
;

148 
numfds
 = 
	`£À˘
(
maxfd
 + 1, &
ªadfds
, 0, 0, 0);

149 
	`unixCheck
(
numfds
, "GDB/JTAG ICE communications failure");

151 i‡(
gdbFûeDes¸ùt‹
 !-1 && 
	`FD_ISSET
(gdbFûeDes¸ùt‹, &
ªadfds
))

153 
c
 = 
	`gëDebugCh¨
();

154 i‡(
c
 == 3)

156 
	`debugOut
("interrupted by GDB\n");

157 
gdbI¡îru±
 = 
åue
;

160 
	`debugOut
("U√x≥˘ed GDB i≈uà`%02x'\n", 
c
);

163 i‡(
	`FD_ISSET
(
jègBox
, &
ªadfds
))

165 
uch¨
 *
evtbuf
;

166 
evtSize
;

167 
£qno
;

168 
evtSize
 = 
	`ªcvFøme
(
evtbuf
, 
£qno
);

169 i‡(
evtSize
 >= 0) {

172 i‡(
£qno
 != 0xffff)

173 
	`debugOut
("ExpectedÉventÖacket, got otherÑesponse");

174 i‡(!
n⁄bªakög_evíts
[
evtbuf
[8] - 
EVT_BREAK
])

176 
evtbuf
[8])

179 
EVT_BREAK
:

180 
EVT_EXT_RESET
:

181 
EVT_PDSB_BREAK
:

182 
EVT_PDSMB_BREAK
:

183 
EVT_PROGRAM_BREAK
:

184 
bªakpoöt
 = 
åue
;

187 
EVT_IDR_DIRTY
:

190 
gdbI¡îru±
 = 
åue
;

191 
	`¥ötf
("\nIDR dúty: 0x%02x\n", 
evtbuf
[9]);

195 
EVT_ERROR_PHY_FORCE_BREAK_TIMEOUT
:

196 
EVT_ERROR_PHY_MAX_BIT_LENGTH_DIFF
:

197 
EVT_ERROR_PHY_OPT_RECEIVE_TIMEOUT
:

198 
EVT_ERROR_PHY_OPT_RECEIVED_BREAK
:

199 
EVT_ERROR_PHY_RECEIVED_BREAK
:

200 
EVT_ERROR_PHY_RECEIVE_TIMEOUT
:

201 
EVT_ERROR_PHY_RELEASE_BREAK_TIMEOUT
:

202 
EVT_ERROR_PHY_SYNC_OUT_OF_RANGE
:

203 
EVT_ERROR_PHY_SYNC_TIMEOUT
:

204 
EVT_ERROR_PHY_SYNC_TIMEOUT_BAUD
:

205 
EVT_ERROR_PHY_SYNC_WAIT_TIMEOUT
:

206 
gdbI¡îru±
 = 
åue
;

207 
	`¥ötf
("\nFatal debugWIRE communicationÉvent: 0x%02x\n",

208 
evtbuf
[8]);

212 
EVT_ICE_POWER_ERROR_STATE
:

213 
gdbI¡îru±
 = 
åue
;

214 
	`¥ötf
("\nJTAG ICE mkIIÖower failure\n");

217 
EVT_TARGET_POWER_OFF
:

218 
gdbI¡îru±
 = 
åue
;

219 
	`¥ötf
("\nTargetÖowerÅurned off\n");

222 
EVT_TARGET_POWER_ON
:

223 
gdbI¡îru±
 = 
åue
;

224 
	`¥ötf
("\nTargetÖowerÑeturned\n");

227 
EVT_TARGET_SLEEP
:

228 
gdbI¡îru±
 = 
åue
;

229 
	`¥ötf
("\nTarget wentÅo sleep\n");

232 
EVT_TARGET_WAKEUP
:

233 
gdbI¡îru±
 = 
åue
;

234 
	`¥ötf
("\nTarget went out of sleep\n");

238 
EVT_NONE
:

239 
EVT_RUN
:

243 
gdbI¡îru±
 = 
åue
;

244 
	`¥ötf
("\nUnhandled JTAG ICE mkIIÉvent: 0x%0x2\n",

245 
evtbuf
[8]);

248 
dñëe
 [] 
evtbuf
;

253 i‡(
gdbI¡îru±
)

254  
Ál£
;

255 i‡(
bªakpoöt
)

256  
åue
;

258 
	}
}

261 
boﬁ
 
	gjèg2
::
	$jègSögÀSãp
(
boﬁ
 
u£HLL
)

263 
uch¨
 
cmd
[3] = { 
CMND_SINGLE_STEP
,

264 
u£HLL
? 0x02: 0x01,

265 
u£HLL
? 0x00: 0x01 };

266 
uch¨
 *
ª•
;

267 
ª•Size
, 
i
 = 2;

268 
boﬁ
 
rv
;

272 
rv
 = 
	`doJègComm™d
(
cmd
, 3, 
ª•
, 
ª•Size
);

273 
uch¨
 
°©
 = 
ª•
[0];

274 
dñëe
 [] 
ª•
;

276 i‡(
rv
)

279 i‡(
°©
 !
RSP_ILLEGAL_MCU_STATE
)

282 --
i
 >= 0);

284 i‡(!
rv
)

285  
Ál£
;

287 i‡(!
	`evítLo›
())

291 
	`öãºu±Progøm
();

294  
åue
;

295 
	}
}

297 
	gjèg2
::
	$∑r£Evíts
(c⁄° *
evéi°
)

299 
	`mem£t
(
n⁄bªakög_evíts
, 0, Çonbreaking_events);

303 
uch¨
 
num
;

304 c⁄° *
«me
;

305 } 
evâabÀ
[] =

307 { 
EVT_BREAK
, "break" },

308 { 
EVT_DEBUG
, "debug" },

309 { 
EVT_ERROR_PHY_FORCE_BREAK_TIMEOUT
, "error_phy_force_break_timeout" },

310 { 
EVT_ERROR_PHY_MAX_BIT_LENGTH_DIFF
, "error_phy_max_bit_length_diff" },

311 { 
EVT_ERROR_PHY_OPT_RECEIVE_TIMEOUT
, "error_phy_opt_receive_timeout" },

312 { 
EVT_ERROR_PHY_OPT_RECEIVED_BREAK
, "error_phy_opt_received_break" },

313 { 
EVT_ERROR_PHY_RECEIVED_BREAK
, "error_phy_received_break" },

314 { 
EVT_ERROR_PHY_RECEIVE_TIMEOUT
, "error_phy_receive_timeout" },

315 { 
EVT_ERROR_PHY_RELEASE_BREAK_TIMEOUT
, "error_phy_release_break_timeout" },

316 { 
EVT_ERROR_PHY_SYNC_OUT_OF_RANGE
, "error_phy_sync_out_of_range" },

317 { 
EVT_ERROR_PHY_SYNC_TIMEOUT
, "error_phy_sync_timeout" },

318 { 
EVT_ERROR_PHY_SYNC_TIMEOUT_BAUD
, "error_phy_sync_timeout_baud" },

319 { 
EVT_ERROR_PHY_SYNC_WAIT_TIMEOUT
, "error_phy_sync_wait_timeout" },

320 { 
EVT_RESULT_PHY_NO_ACTIVITY
, "result_phy_no_activity" },

321 { 
EVT_EXT_RESET
, "ext_reset" },

322 { 
EVT_ICE_POWER_ERROR_STATE
, "ice_power_error_state" },

323 { 
EVT_ICE_POWER_OK
, "ice_power_ok" },

324 { 
EVT_IDR_DIRTY
, "idr_dirty" },

325 { 
EVT_NONE
, "none" },

326 { 
EVT_PDSB_BREAK
, "pdsb_break" },

327 { 
EVT_PDSMB_BREAK
, "pdsmb_break" },

328 { 
EVT_PROGRAM_BREAK
, "program_break" },

329 { 
EVT_RUN
, "run" },

330 { 
EVT_TARGET_POWER_OFF
, "target_power_off" },

331 { 
EVT_TARGET_POWER_ON
, "target_power_on" },

332 { 
EVT_TARGET_SLEEP
, "target_sleep" },

333 { 
EVT_TARGET_WAKEUP
, "target_wakeup" },

337 c⁄° *
˝1
, *
˝2
;

338 
˝1
 = 
evéi°
;

339 *
˝1
 != '\0')

341 
	`is•a˚
(*
˝1
) || *cp1 == ',')

342 
˝1
++;

343 
˝2
 = 
˝1
;

344 *
˝2
 != '\0' && *cp2 != ',')

345 
˝2
++;

346 
size_t
 
l
 = 
˝2
 - 
˝1
;

347 
uch¨
 
evtvÆ
 = 0;

350 
i
 = 0; i <  
evâabÀ
 / Évttable[0]; i++)

352 i‡(
	`°∫cmp
(
evâabÀ
[
i
].
«me
, 
˝1
, 
l
) == 0)

354 
evtvÆ
 = 
evâabÀ
[
i
].
num
;

358 i‡(
evtvÆ
 == 0)

360 
	`Ârötf
(
°dîr
, "Warning:ÉventÇame %.*sÇot matched\n",

361 ()
l
, 
˝1
);

365 
n⁄bªakög_evíts
[
evtvÆ
 - 
EVT_BREAK
] = 
åue
;

368 
˝1
 = 
˝2
;

370 
	}
}

372 
boﬁ
 
	gjèg2
::
	$jègC⁄töue
()

374 
	`upd©eBªakpoöts
();

376 i‡(
haveHiddíBªakpoöt
)

380 ()
	`jègSögÀSãp
(
åue
);

382 
	`doSim∂eJègComm™d
(
CMND_GO
);

384  
	`evítLo›
();

385 
	}
}

	@jtag2rw.cc

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<sys/°©.h
>

31 
	~<ãrmios.h
>

32 
	~<f˙é.h
>

33 
	~<°rög.h
>

34 
	~<as£π.h
>

36 
	~"av¨i˚.h
"

37 
	~"jèg.h
"

38 
	~"jèg2.h
"

39 
	~"ªmŸe.h
"

45 
uch¨
 
	gjèg2
::
	$mem‹yS∑˚
(&
addr
)

47 
mask
;

51 i‡(
addr
 & 
DATA_SPACE_ADDR_OFFSET
)

53 
mask
 = 
addr
 & 
ADDR_SPACE_MASK
;

54 
addr
 &~
ADDR_SPACE_MASK
;

57 
mask
 = 0;

59 
mask
)

61 
EEPROM_SPACE_ADDR_OFFSET
:

62 i‡(!
u£DebugWúe
 && 
¥ogømmögE«bÀd
)

63  
MTYPE_EEPROM_PAGE
;

65  
MTYPE_EEPROM
;

66 
FUSE_SPACE_ADDR_OFFSET
:

67  
MTYPE_FUSE_BITS
;

68 
LOCK_SPACE_ADDR_OFFSET
:

69  
MTYPE_LOCK_BITS
;

70 
SIG_SPACE_ADDR_OFFSET
:

71  
MTYPE_SIGN_JTAG
;

74 
BREAKPOINT_SPACE_ADDR_OFFSET
:

75  
MTYPE_EVENT
;

76 
DATA_SPACE_ADDR_OFFSET
:

77  
MTYPE_SRAM
;

79 i‡(
u£DebugWúe
 || 
¥ogømmögE«bÀd
)

80  
MTYPE_FLASH_PAGE
;

82  
MTYPE_SPM
;

84 
	}
}

86 
uch¨
 *
	gjèg2
::
	$jègRód
(
addr
, 
numByãs
)

88 
uch¨
 *
ª•⁄£
;

89 
ª•⁄£Size
;

91 i‡(
numByãs
 == 0)

93 
ª•⁄£
 = 
√w
 
uch¨
[1];

94 
ª•⁄£
[0] = '\0';

95  
ª•⁄£
;

98 
	`debugOut
("jtagRead ");

99 
uch¨
 
whichS∑˚
 = 
	`mem‹yS∑˚
(
addr
);

100 
boﬁ
 
√edProgmode
 = 
whichS∑˚
 >
MTYPE_FLASH_PAGE
;

101 
∑geSize
 = 0;

102 
off£t
 = 0;

103 
boﬁ
 
wasProgmode
 = 
¥ogømmögE«bÀd
;

104 i‡(
√edProgmode
 && !
¥ogømmögE«bÀd
)

105 
	`íabÀProgømmög
();

107 *
ˇchePå
 = 
NULL
;

108 *
ˇcheBa£Addr
 = 
NULL
;

110 
whichS∑˚
)

115 
MTYPE_SPM
:

116 
off£t
 = 
addr
 & 1;

117 
addr
 &= ~1;

118 
numByãs
 = (numBytes + 1) & ~1;

121 
MTYPE_FLASH_PAGE
:

122 
∑geSize
 = 
globÆ_p_devi˚_def
->
Êash_∑ge_size
;

123 
ˇchePå
 = 
ÊashCache
;

124 
ˇcheBa£Addr
 = &
ÊashCachePageAddr
;

127 
MTYPE_EEPROM_PAGE
:

128 
∑geSize
 = 
globÆ_p_devi˚_def
->
ì¥om_∑ge_size
;

129 
ˇchePå
 = 
ì¥omCache
;

130 
ˇcheBa£Addr
 = &
ì¥omCachePageAddr
;

134 
uch¨
 
comm™d
[10] = { 
CMND_READ_MEMORY
 };

135 
comm™d
[1] = 
whichS∑˚
;

137 i‡(
∑geSize
 > 0) {

138 
	`u32_to_b4
(
comm™d
 + 2, 
∑geSize
);

139 
ª•⁄£
 = 
√w
 
uch¨
[
numByãs
];

141 
mask
 = 
∑geSize
 - 1;

142 
∑geAddr
 = 
addr
 & ~
mask
;

143 
chunksize
 = 
numByãs
;

144 
èrgëOff£t
 = 0;

146 i‡(
addr
 + 
numByãs
 >
∑geAddr
 + 
∑geSize
)

149 
chunksize
 -(
addr
 + 
numByãs
 - (
∑geAddr
 + 
∑geSize
));

150 
off£t
 = 
addr
 - 
∑geAddr
;

152 
numByãs
 > 0)

154 
uch¨
 *
ª•
;

156 i‡(
∑geAddr
 =*
ˇcheBa£Addr
)

159 
	`mem˝y
(
ª•⁄£
 + 
èrgëOff£t
,

160 
ˇchePå
 + 
off£t
,

161 
chunksize
);

166 
	`u32_to_b4
(
comm™d
 + 6, 
∑geAddr
);

167 
	`check
(
	`doJègComm™d
(
comm™d
,  comm™d, 
ª•
, 
ª•⁄£Size
),

169 
	`mem˝y
(
ˇchePå
, 
ª•
 + 1, 
∑geSize
);

170 *
ˇcheBa£Addr
 = 
∑geAddr
;

171 
	`mem˝y
(
ª•⁄£
 + 
èrgëOff£t
,

172 
ˇchePå
 + 
off£t
,

173 
chunksize
);

174 
dñëe
 [] 
ª•
;

177 
numByãs
 -
chunksize
;

178 
èrgëOff£t
 +
chunksize
;

180 
chunksize
 = 
numByãs
 > 
∑geSize
?ÖageSize:ÇumBytes;

181 
∑geAddr
 +
∑geSize
;

184 
	`u32_to_b4
(
comm™d
 + 2, 
numByãs
);

185 
	`u32_to_b4
(
comm™d
 + 6, 
addr
);

187 
	`check
(
	`doJègComm™d
(
comm™d
,  comm™d, 
ª•⁄£
, 
ª•⁄£Size
),

189 i‡(
off£t
 > 0)

190 
	`memmove
(
ª•⁄£
,Ñe•⁄£ + 1 + 
off£t
, 
ª•⁄£Size
 - 1 - offset);

192 
	`memmove
(
ª•⁄£
,Ñe•⁄£ + 1, 
ª•⁄£Size
 - 1);

195 i‡(
√edProgmode
 && !
wasProgmode
)

196 
	`dißbÀProgømmög
();

198  
ª•⁄£
;

199 
	}
}

201 
boﬁ
 
	gjèg2
::
	$jègWrôe
(
addr
, 
numByãs
, 
uch¨
 
buf„r
[])

203 i‡(
numByãs
 == 0)

204  
åue
;

206 
	`debugOut
("jtagWrite ");

207 
uch¨
 
whichS∑˚
 = 
	`mem‹yS∑˚
(
addr
);

215 i‡(
whichS∑˚
 =
MTYPE_SPM
 &&

216 
addr
 == 0 &&

217 
numByãs
 > 4)

219 
	`debugOut
("Detected GDB \"load\" command,Érasing flash.\n");

221 
	`îa£ProgømMem‹y
();

224 
boﬁ
 
√edProgmode
 = 
whichS∑˚
 >
MTYPE_FLASH_PAGE
;

225 
∑geSize
 = 0;

226 
boﬁ
 
wasProgmode
 = 
¥ogømmögE«bÀd
;

227 i‡(
√edProgmode
 && !
¥ogømmögE«bÀd
)

228 
	`íabÀProgømmög
();

230 
whichS∑˚
)

232 
MTYPE_FLASH_PAGE
:

233 
∑geSize
 = 
globÆ_p_devi˚_def
->
Êash_∑ge_size
;

236 
MTYPE_EEPROM_PAGE
:

237 
∑geSize
 = 
globÆ_p_devi˚_def
->
ì¥om_∑ge_size
;

240 i‡(
∑geSize
 > 0) {

241 
mask
 = 
∑geSize
 - 1;

242 
addr
 &~
mask
;

243 
	`check
(
numByãs
 =
∑geSize
,

246 
uch¨
 *
comm™d
 = 
√w
 uch¨ [10 + 
numByãs
];

247 
comm™d
[0] = 
CMND_WRITE_MEMORY
;

248 
comm™d
[1] = 
whichS∑˚
;

249 i‡(
∑geSize
) {

250 
	`u32_to_b4
(
comm™d
 + 2, 
∑geSize
);

251 
	`u32_to_b4
(
comm™d
 + 6, 
addr
);

253 
	`u32_to_b4
(
comm™d
 + 2, 
numByãs
);

254 
	`u32_to_b4
(
comm™d
 + 6, 
addr
);

256 
	`mem˝y
(
comm™d
 + 10, 
buf„r
, 
numByãs
);

258 
uch¨
 *
ª•⁄£
;

259 
ª•⁄£Size
;

261 
	`check
(
	`doJègComm™d
(
comm™d
, 10 + 
numByãs
, 
ª•⁄£
, 
ª•⁄£Size
),

263 
dñëe
 [] 
comm™d
;

264 
dñëe
 [] 
ª•⁄£
;

266 i‡(
√edProgmode
 && !
wasProgmode
)

267 
	`dißbÀProgømmög
();

269  
åue
;

270 
	}
}

	@jtag2usb.cc

25 
	~"av¨i˚.h
"

27 #ifde‡
HAVE_LIBUSB


29 
	~<°d¨g.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/sockë.h
>

35 
	~<sys/°©.h
>

36 
	~<sys/time.h
>

37 
	~<sys/waô.h
>

38 
	~<ãrmios.h
>

39 
	~<f˙é.h
>

40 
	~<sig«l.h
>

41 
	~<°rög.h
>

42 
	~<î∫o.h
>

44 
	~<usb.h
>

46 
	~"jèg.h
"

48 
	#USB_VENDOR_ATMEL
 1003

	)

49 
	#USB_DEVICE_JTAGICEMKII
 0x2103

	)

50 
	#USB_DEVICE_AVRDRAGON
 0x2107

	)

55 
	#JTAGICE_BULK_EP_WRITE
 0x02

	)

56 
	#JTAGICE_BULK_EP_READ
 0x82

	)

57 
	#JTAGICE_MAX_XFER
 64

	)

59 vﬁ©ûê
sig_©omic_t
 
	gsig«Œed
, 
	gexôög
, 
	gªady
;

60 
pid_t
 
	gusb_kid
;

66 
usb_dev_h™dÀ
 *
	$›ídev
(c⁄° *
jègDevi˚Name
, 
emuœt‹
 
emu_ty≥
,

67 &
usb_öãrÁ˚
)

69 
°rög
[256];

70 
usb_bus
 *
bus
;

71 
usb_devi˚
 *
dev
;

72 
usb_dev_h™dÀ
 *
udev
;

73 *
£∫o
, *
˝2
;

74 
u_öt16_t
 
pid
;

75 
size_t
 
x
;

77 
emu_ty≥
)

79 
EMULATOR_JTAGICE
:

80 
pid
 = 
USB_DEVICE_JTAGICEMKII
;

83 
EMULATOR_DRAGON
:

84 
pid
 = 
USB_DEVICE_AVRDRAGON
;

98 i‡((
£∫o
 = 
	`°rchr
(
jègDevi˚Name
, ':')Ë!
NULL
)

101 
˝2
 = ++
£∫o
;

103 (
˝2
 = 
	`°rchr
(˝2, ':')Ë!
NULL
)

105 
x
 = 
	`°æí
(
˝2
) - 1;

106 
	`memmove
(
˝2
, cp2 + 1, 
x
);

107 
˝2
[
x
] = '\0';

110 
	`unixCheck
(
	`°æí
(
£∫o
) <= 12, "invalid serialÇumber \"%s\"", serno);

113 
	`usb_öô
();

115 
	`usb_föd_bus£s
();

116 
	`usb_föd_devi˚s
();

118 
udev
 = 
NULL
;

119 
boﬁ
 
found
 = 
Ál£
;

120 
bus
 = 
	`usb_gë_bus£s
(); !
found
 && bus; bu†bus->
√xt
)

122 
dev
 = 
bus
->
devi˚s
; !
found
 && dev; dev = dev->
√xt
)

124 
udev
 = 
	`usb_›í
(
dev
);

125 i‡(
udev
)

127 i‡(
dev
->
des¸ùt‹
.
idVíd‹
 =
USB_VENDOR_ATMEL
 &&

128 
dev
->
des¸ùt‹
.
idProdu˘
 =
pid
)

131 
rv
 = 
	`usb_gë_°rög_sim∂e
(
udev
,

132 
dev
->
des¸ùt‹
.
iSîülNumbî
,

133 
°rög
, (string));

134 
	`unixCheck
(
rv
 >= 0, "cannotÑead serialÇumber \"%s\"",

135 
	`usb_°ªº‹
());

137 
	`debugOut
("Found JTAG ICE, sîno: %s\n", 
°rög
);

138 i‡(
£∫o
 !
NULL
)

145 
x
 = 
	`°æí
(
°rög
Ë- såÀn(
£∫o
);

146 i‡(
	`°rˇ£cmp
(
°rög
 + 
x
, 
£∫o
) != 0)

148 
	`debugOut
("serialÇumber doesn't match\n");

149 
	`usb_˛o£
(
udev
);

155 
found
 = 
åue
;

158 
	`usb_˛o£
(
udev
);

162 i‡(!
found
)

164 
	`¥ötf
("didÇot findány%s USB device \"%s\"\n",

165 
£∫o
? " (m©chög)": "", 
jègDevi˚Name
);

166  
NULL
;

169 i‡(
dev
->
c⁄fig
 =
NULL
)

171 
	`°©usOut
("USB device hasÇo configuration\n");

172 
Áû
:

173 
	`usb_˛o£
(
udev
);

174  
NULL
;

176 i‡(
	`usb_£t_c⁄figuøti⁄
(
udev
, 
dev
->
c⁄fig
[0].
bC⁄figuøti⁄VÆue
))

178 
	`°©usOut
("error setting configuration %d: %s\n",

179 
dev
->
c⁄fig
[0].
bC⁄figuøti⁄VÆue
,

180 
	`usb_°ªº‹
());

181 
Áû
;

183 
usb_öãrÁ˚
 = 
dev
->
c⁄fig
[0].
öãrÁ˚
[0].
Æt£âög
[0].
bI¡îÁ˚Numbî
;

184 i‡(
	`usb_˛aim_öãrÁ˚
(
udev
, 
usb_öãrÁ˚
))

186 
	`°©usOut
("error claiming interface %d: %s\n",

187 
usb_öãrÁ˚
, 
	`usb_°ªº‹
());

188 
Áû
;

191  
udev
;

192 
	}
}

197 
	$sigãrmh™dÀr
(
signo
)

200 
exôög
++;

201 
	`Æ¨m
(1);

202 
	}
}

204 
	$Æ¨mh™dÀr
(
signo
)

206 
sig«Œed
++;

207 
	}
}

209 
	$u§1h™dÀr
(
signo
)

211 
ªady
++;

212 
	}
}

214 
	$dummyh™dÀr
(
signo
)

217 
	}
}

222 
	$kûl_d´m⁄
()

224 
	`kûl
(
usb_kid
, 
SIGTERM
);

225 
	}
}

230 
	$öth™dÀr
(
signo
)

232 
°©us
;

234 
	`kûl
(
usb_kid
, 
SIGTERM
);

235 ()
	`waô
(&
°©us
);

236 
	`sig«l
(
signo
, 
SIG_DFL
);

237 
	`kûl
(
	`gëpid
(), 
signo
);

238 
	}
}

240 
	$chûdh™dÀr
(
signo
)

242 
°©us
;

243 
b
[500];

245 ()
	`waô
(&
°©us
);

247 
	#PRINTERR
(
msg
Ë
	`wrôe
(
	`fûío
(
°dîr
), msg, 
	`°æí
(msg))

	)

248 i‡(
ªady
)

249 
	`PRINTERR
("USB daemon died\n");

250 
	`_exô
(1);

251 
	}
}

258 
	$usb_d´m⁄
(
usb_dev_h™dÀ
 *
udev
, 
fd
, 
cfd
, 
usb_öãrÁ˚
)

260 
	`sig«l
(
SIGALRM
, 
Æ¨mh™dÀr
);

261 
	`sig«l
(
SIGTERM
, 
sigãrmh™dÀr
);

262 
	`sig«l
(
SIGINT
, 
sigãrmh™dÀr
);

264 #i‡
	`deföed
(
O_ASYNC
)

265 
ioÊags
;

267 i‡(
	`f˙é
(
fd
, 
F_GETFL
, &
ioÊags
) != -1)

269 
ioÊags
 |
O_ASYNC
;

270 i‡(
	`f˙é
(
fd
, 
F_SETFL
, &
ioÊags
) != -1)

271 
	`sig«l
(
SIGIO
, 
dummyh™dÀr
);

275 
highe°fd
 = 
fd
 > 
cfd
? fd: cfd;

276 
boﬁ
 
pﬁlög
 = 
Ál£
;

278 ; !
sig«Œed
;)

280 
fd_£t
 
r
;

281 
timevÆ
 
tv
;

282 
rv
;

283 
boﬁ
 
do_ªad
, 
˛ór_ïs
;

284 
buf
[
JTAGICE_MAX_XFER
];

286 
do_ªad
 = 
Ál£
;

287 
˛ór_ïs
 = 
Ál£
;

292 
	`FD_ZERO
(&
r
);

293 
	`FD_SET
(
fd
, &
r
);

294 
	`FD_SET
(
cfd
, &
r
);

295 i‡(
pﬁlög
)

297 
tv
.
tv_£c
 = 0;

298 
tv
.
tv_u£c
 = 100000;

302 
tv
.
tv_£c
 = 1;

303 
tv
.
tv_u£c
 = 0;

305 i‡(!
exôög
 && 
	`£À˘
(
highe°fd
 + 1, &
r
, 
NULL
, NULL, &
tv
) > 0)

307 i‡(
	`FD_ISSET
(
fd
, &
r
))

309 i‡((
rv
 = 
	`ªad
(
fd
, 
buf
, 
JTAGICE_MAX_XFER
)) > 0)

311 i‡(
	`usb_bulk_wrôe
(
udev
, 
JTAGICE_BULK_EP_WRITE
, 
buf
,

312 
rv
, 5000) !=

313 
rv
)

315 
	`Ârötf
(
°dîr
, "USB bulk writeÉrror: %s\n",

316 
	`usb_°ªº‹
());

317 
	`exô
(1);

321 i‡(
rv
 < 0 && 
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
)

323 
	`Ârötf
(
°dîr
, "readÉrror from AVaRICE: %s\n",

324 
	`°ªº‹
(
î∫o
));

325 
	`exô
(1);

328 i‡(
	`FD_ISSET
(
cfd
, &
r
))

330 
buf
[
JTAGICE_MAX_XFER
];

331 
cmd
[1];

333 i‡(
	`FD_ISSET
(
cfd
, &
r
))

335 i‡((
rv
 = 
	`ªad
(
cfd
, 
cmd
, 1)) > 0)

340 i‡(
cmd
[0] == 'r')

342 
pﬁlög
 = 
Ál£
;

343 
do_ªad
 = 
åue
;

345 i‡(
cmd
[0] == 'p')

347 
pﬁlög
 = 
åue
;

349 i‡(
cmd
[0] == 'c')

351 
˛ór_ïs
 = 
åue
;

355 
	`Ârötf
(
°dîr
, "unknown command in USB_daemon: %c\n",

356 
cmd
[0]);

359 i‡(
rv
 < 0 && 
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
)

361 
	`Ârötf
(
°dîr
, "readÉrror on controlÖipe from AVaRICE: %s\n",

362 
	`°ªº‹
(
î∫o
));

363 
	`exô
(1);

369 i‡(
˛ór_ïs
)

371 
	`usb_ª£ãp
(
udev
, 
JTAGICE_BULK_EP_READ
);

372 
	`usb_ª£ãp
(
udev
, 
JTAGICE_BULK_EP_WRITE
);

375 i‡(!
exôög
 && (
do_ªad
 || 
pﬁlög
))

377 
rv
 = 
	`usb_bulk_ªad
(
udev
, 
JTAGICE_BULK_EP_READ
, 
buf
,

378 
JTAGICE_MAX_XFER
, 500);

379 i‡(
rv
 =0 ||Ñv =-
EINTR
 ||Ñv =-
EAGAIN
 ||Ñv =-
ETIMEDOUT
)

383 i‡(
rv
 < 0)

385 i‡(!
exôög
)

386 
	`Ârötf
(
°dîr
, "USB bulkÑeadÉrror: %s\n",

387 
	`usb_°ªº‹
());

388 
	`exô
(1);

398 
pﬁlög
 = 
Ál£
;

399 i‡(
	`wrôe
(
fd
, 
buf
, 
rv
) !=Ñv)

401 
	`Ârötf
(
°dîr
, "short writeÅo AVaRICE: %s\n",

402 
	`°ªº‹
(
î∫o
));

403 
	`exô
(1);

405 
pkt_Àn
 = ()
buf
[3] +

406 (()
buf
[4] << 8) + (()buf[5] << 16) +

407 (()
buf
[6] << 24);

408 c⁄° 
hódî_size
 = 8;

409 c⁄° 
¸c_size
 = 2;

410 
pkt_Àn
 +
hódî_size
 + 
¸c_size
;

411 
pkt_Àn
 -
rv
;

413 !
exôög
 && 
pkt_Àn
 > 0)

415 
rv
 = 
	`usb_bulk_ªad
(
udev
, 
JTAGICE_BULK_EP_READ
, 
buf
,

416 
pkt_Àn
 > 
JTAGICE_MAX_XFER
? JTAGICE_MAX_XFER:Ökt_len,

424 i‡(
rv
 =-
EINTR
 ||Ñv =-
EAGAIN
 ||Ñv =-
ETIMEDOUT
)

428 i‡(
rv
 <= 0)

430 i‡(!
exôög
)

431 
	`Ârötf
(
°dîr
,

433 
	`usb_°ªº‹
());

434 
	`exô
(1);

436 i‡(
	`wrôe
(
fd
, 
buf
, 
rv
) !=Ñv)

438 
	`Ârötf
(
°dîr
, "short writeÅo AVaRICE: %s\n",

439 
	`°ªº‹
(
î∫o
));

440 
	`exô
(1);

442 
pkt_Àn
 -
rv
;

447 
	}
}

449 
pid_t
 
	gjèg
::
	$›íUSB
(c⁄° *
jègDevi˚Name
)

451 
usb_öãrÁ˚
;

452 
pid_t
 
p
;

453 
py≥
[2], 
˝ùe
[2];

454 
usb_dev_h™dÀ
 *
udev
;

456 
	`unixCheck
(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 
PF_UNSPEC
, 
py≥
) == 0,

458 
	`unixCheck
(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 
PF_UNSPEC
, 
˝ùe
) == 0,

461 
	`sig«l
(
SIGCHLD
, 
chûdh™dÀr
);

462 
	`sig«l
(
SIGUSR1
, 
u§1h™dÀr
);

463 (
p
 = 
	`f‹k
()))

466 
	`sig«l
(
SIGCHLD
, 
SIG_DFL
);

467 
	`sig«l
(
SIGUSR1
, 
SIG_DFL
);

468 
	`˛o£
(
py≥
[1]);

469 
	`˛o£
(
˝ùe
[1]);

471 
udev
 = 
	`›ídev
(
jègDevi˚Name
, 
emu_ty≥
, 
usb_öãrÁ˚
);

472 
	`check
(
udev
 !
NULL
, "USB deviceÇot found");

473 
	`kûl
(
	`gëµid
(), 
SIGUSR1
);

475 
	`usb_d´m⁄
(
udev
, 
py≥
[0], 
˝ùe
[0], 
usb_öãrÁ˚
);

477 ()
	`usb_ªÀa£_öãrÁ˚
(
udev
, 
usb_öãrÁ˚
);

478 
	`usb_˛o£
(
udev
);

479 
	`exô
(0);

483 
	`unixCheck
(-1, "Cannot fork");

487 
	`˛o£
(
py≥
[0]);

488 
	`˛o£
(
˝ùe
[0]);

489 
jègBox
 = 
py≥
[1];

490 
˘æPùe
 = 
˝ùe
[1];

491 
usb_kid
 = 
p
;

493 
	`©exô
(
kûl_d´m⁄
);

494 
	`sig«l
(
SIGTERM
, 
öth™dÀr
);

495 
	`sig«l
(
SIGINT
, 
öth™dÀr
);

496 
	`sig«l
(
SIGQUIT
, 
öth™dÀr
);

498 !
ªady
)

500 
	`sig«l
(
SIGUSR1
, 
SIG_DFL
);

501 
	}
}

	@jtagbp.cc

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<sys/°©.h
>

31 
	~<ãrmios.h
>

32 
	~<f˙é.h
>

33 
	~<°rög.h
>

35 
	~"av¨i˚.h
"

36 
	~"jèg.h
"

37 
	~"jèg1.h
"

39 
boﬁ
 
	gjèg1
::
	$codeBªakpoötAt
(
addªss
)

41 
addªss
 /= 2;

42 
i
 = 0; i < 
numBªakpoötsCode
; i++)

43 i‡(
bpCode
[
i
].
addªss
 ==áddress)

44  
åue
;

45  
Ál£
;

46 
	}
}

48 
boﬁ
 
	gjèg1
::
	$codeBªakpoötBëwìn
(
°¨t
, 
íd
)

50 
°¨t
 /2; 
íd
 /= 2;

51 
i
 = 0; i < 
numBªakpoötsCode
; i++)

52 i‡(
bpCode
[
i
].
addªss
 >
°¨t
 && bpCode[i].addªs†< 
íd
)

53  
åue
;

54  
Ál£
;

55 
	}
}

57 
	gjèg1
::
	$dñëeAŒBªakpoöts
()

59 
numBªakpoötsD©a
 = 
numBªakpoötsCode
 = 0;

60 
	}
}

62 
boﬁ
 
	gjèg1
::
	$°›At
(
addªss
)

64 
uch¨
 
zîo
 = 0;

65 
	`jègWrôe
(
BREAKPOINT_SPACE_ADDR_OFFSET
 + 
addªss
 / 2, 1, &
zîo
);

66 
	}
}

68 
boﬁ
 
	gjèg1
::
	$addBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
)

70 
bªakpoöt
 *
bp
;

72 
	`debugOut
("BP ADDÅy≥: %dáddr: 0x%x ", 
ty≥
, 
addªss
);

75 i‡(
numBªakpoötsCode
 + 
numBªakpoötsD©a
 =
MAX_BREAKPOINTS
)

76  
Ál£
;

80 i‡(
ty≥
 =
CODE
)

82 i‡(
numBªakpoötsCode
 =
MAX_BREAKPOINTS_CODE
)

84 
	`debugOut
("FAILED\n");

85  
Ál£
;

88 
bp
 = &
bpCode
[
numBªakpoötsCode
++];

92 
addªss
 /= 2;

96 i‡(
numBªakpoötsD©a
 =
MAX_BREAKPOINTS_DATA
)

98 
	`debugOut
("FAILED\n");

99  
Ál£
;

102 
bp
 = &
bpD©a
[
numBªakpoötsD©a
++];

105 
bp
->
addªss
 =áddress;

106 
bp
->
ty≥
 =Åype;

108 
	`debugOut
(" ADDED\n");

109  
åue
;

110 
	}
}

113 
boﬁ
 
	gjèg1
::
	$dñëeBªakpoöt
(
addªss
, 
bpTy≥
 
ty≥
, 
Àngth
)

115 
bªakpoöt
 *
bp
;

116 *
numBp
;

118 
	`debugOut
("BP DELÅy≥: %dáddr: 0x%x ", 
ty≥
, 
addªss
);

120 i‡(
ty≥
 =
CODE
)

122 
bp
 = 
bpCode
;

123 
numBp
 = &
numBªakpoötsCode
;

126 
addªss
 /= 2;

130 
bp
 = 
bpD©a
;

131 
numBp
 = &
numBªakpoötsD©a
;

135 
i
 = 0; i < *
numBp
; i++)

137 i‡(
bp
[
i
].
ty≥
 =ty≥ && bp[i].
addªss
 ==áddress)

139 
	`debugOut
("REMOVED %d\n", 
i
);

140 (*
numBp
)--;

141 
	`memmove
(&
bp
[
i
], &bp[ò+ 1], (*
numBp
 - iË* (
bªakpoöt
));

142  
åue
;

145 
	`debugOut
("FAILED\n");

146  
Ál£
;

147 
	}
}

150 
	gjèg1
::
	$upd©eBªakpoöts
()

152 
bpMode
 = 0x00;

153 
bpC
 = 0, 
bpD
 = 0;

154 
bªakpoöt
 *
bp
;

156 
	`debugOut
("updateBreakpoints\n");

162 i‡(
bpC
 < 
numBªakpoötsCode
)

164 
uch¨
 
zîo
 = 0;

165 
	`jègWrôe
(
BREAKPOINT_SPACE_ADDR_OFFSET
 + 
bpCode
[
bpC
++].
addªss
, 1, &
zîo
);

172 i‡(
bpC
 < 
numBªakpoötsCode
)

174 
uch¨
 
⁄e
 = 1;

175 
	`jègWrôe
(
BREAKPOINT_SPACE_ADDR_OFFSET
 + 
bpCode
[
bpC
++].
addªss
, 1, &
⁄e
);

182 
bp
 = 
NULL
;

183 i‡(
bpC
 < 
numBªakpoötsCode
)

184 
bp
 = &
bpCode
[
bpC
++];

185 i‡(
bpD
 < 
numBªakpoötsD©a
)

186 
bp
 = &
bpD©a
[
bpD
++];

189 i‡(
bp
)

191 
	`£tJègP¨amëî
(
JTAG_P_BP_X_HIGH
, 
bp
->
addªss
 >> 8);

192 
	`£tJègP¨amëî
(
JTAG_P_BP_X_LOW
, 
bp
->
addªss
 & 0xff);

194 
bpMode
 |= 0x20;

195 
bp
->
ty≥
)

197 
READ_DATA
:

198 
bpMode
 |= 0x00;

200 
WRITE_DATA
:

201 
bpMode
 |= 0x04;

203 
ACCESS_DATA
:

204 
bpMode
 |= 0x08;

206 
CODE
:

207 
bpMode
 |= 0x0c;

209 
NONE
:

216 
bp
 = 
NULL
;

217 i‡(
bpC
 < 
numBªakpoötsCode
)

218 
bp
 = &
bpCode
[
bpC
++];

219 i‡(
bpD
 < 
numBªakpoötsD©a
)

220 
bp
 = &
bpD©a
[
bpD
++];

223 i‡(
bp
)

225 
	`£tJègP¨amëî
(
JTAG_P_BP_Y_HIGH
, 
bp
->
addªss
 >> 8);

226 
	`£tJègP¨amëî
(
JTAG_P_BP_Y_LOW
, 
bp
->
addªss
 & 0xff);

229 
bpMode
 |= 0x10;

230 
bp
->
ty≥
)

232 
READ_DATA
:

233 
bpMode
 |= 0x00;

235 
WRITE_DATA
:

236 
bpMode
 |= 0x01;

238 
ACCESS_DATA
:

239 
bpMode
 |= 0x02;

241 
CODE
:

242 
bpMode
 |= 0x03;

244 
NONE
:

250 
	`£tJègP¨amëî
(
JTAG_P_BP_MODE
, 
bpMode
);

252 
	}
}

	@jtaggeneric.cc

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/time.h
>

32 
	~<ãrmios.h
>

33 
	~<f˙é.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

37 
	~"av¨i˚.h
"

38 
	~"jèg.h
"

40 c⁄° *
	gBFDmem‹yTy≥Såög
[] = {

46 c⁄° 
	gBFDmem‹yS∑˚Off£t
[] = {

47 
FLASH_SPACE_ADDR_OFFSET
,

48 
EEPROM_SPACE_ADDR_OFFSET
,

49 
DATA_SPACE_ADDR_OFFSET
,

56 
	gjèg
::
	$jègCheck
(
°©us
)

58 
	`unixCheck
(
°©us
, 
JTAG_CAUSE
, 
NULL
);

59 
	}
}

61 
	gjèg
::
	$ª°‹eSîülP‹t
()

63 i‡(!
is_usb
 && 
jègBox
 >0 && 
ﬁdtioVÆid
)

64 
	`tc£èâr
(
jègBox
, 
TCSANOW
, &
ﬁdtio
);

65 
	}
}

67 
	gjèg
::
	$jèg
()

69 
jègBox
 = 0;

70 
devi˚_«me
 = 0;

71 
ﬁdtioVÆid
 = 
is_usb
 = 
Ál£
;

72 
˘æPùe
 = -1;

73 
	}
}

75 
	gjèg
::
	$jèg
(c⁄° *
jègDevi˚Name
, *
«me
, 
emuœt‹
 
ty≥
)

77 
ãrmios
 
√wtio
;

79 
jègBox
 = 0;

80 
ﬁdtioVÆid
 = 
is_usb
 = 
Ál£
;

81 
˘æPùe
 = -1;

82 
devi˚_«me
 = 
«me
;

83 
emu_ty≥
 = 
ty≥
;

84 i‡(
	`°∫cmp
(
jègDevi˚Name
, "usb", 3) == 0)

86 #ifde‡
HAVE_LIBUSB


87 
is_usb
 = 
åue
;

88 
	`›íUSB
(
jègDevi˚Name
);

90 
throw
 "avarice hasÇot been compiled withÜibusb support\n";

98 
jègBox
 = 
	`›í
(
jègDevi˚Name
, 
O_RDWR
 | 
O_NOCTTY
 | 
O_NONBLOCK
);

99 
	`unixCheck
(
jègBox
, "FaûedÅÿ›í %s", 
jègDevi˚Name
);

102 
	`jègCheck
(
	`tcgë©å
(
jègBox
, &
ﬁdtio
));

103 
ﬁdtioVÆid
 = 
åue
;

105 
	`mem£t
(&
√wtio
, 0, (newtio));

106 
√wtio
.
c_cÊag
 = 
CS8
 | 
CLOCAL
 | 
CREAD
;

109 
	`jègCheck
(
	`cf£to•ìd
(&
√wtio
, 
B19200
));

110 
	`jègCheck
(
	`cf£ti•ìd
(&
√wtio
, 
B19200
));

114 
√wtio
.
c_iÊag
 = 
IGNPAR
;

117 
√wtio
.
c_oÊag
 = 0;

120 
√wtio
.
c_lÊag
 = 0;

125 
√wtio
.
c_cc
[
VTIME
] = 5;

126 
√wtio
.
c_cc
[
VMIN
] = 255;

130 
	`jègCheck
(
	`tcÊush
(
jègBox
, 
TCIFLUSH
));

131 
	`jègCheck
(
	`tc£èâr
(
jègBox
,
TCSANOW
,&
√wtio
));

133 
	}
}

136 
	gjèg
::~
	$jèg
()

138 
	`ª°‹eSîülP‹t
();

139 
	}
}

142 
	gjèg
::
	$timeout_ªad
(*
buf
, 
size_t
 
cou¡
, 
timeout
)

144 *
buf„r
 = (*)
buf
;

145 
size_t
 
a˘uÆ
 = 0;

147 
a˘uÆ
 < 
cou¡
)

149 
fd_£t
 
ªadfds
;

150 
	`FD_ZERO
(&
ªadfds
);

151 
	`FD_SET
(
jègBox
, &
ªadfds
);

153 
timevÆ
 
tmout
;

154 
tmout
.
tv_£c
 = 
timeout
 / 1000000;

155 
tmout
.
tv_u£c
 = 
timeout
 % 1000000;

157 
£À˘ed
 = 
	`£À˘
(
jègBox
 + 1, &
ªadfds
, 
NULL
, NULL, &
tmout
);

162 i‡((
£À˘ed
 < 0Ë&& (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
))

166 i‡(
£À˘ed
 == 0)

167  
a˘uÆ
;

169 
ssize_t
 
thi§ód
 = 
	`ªad
(
jègBox
, &
buf„r
[
a˘uÆ
], 
cou¡
 -áctual);

170 i‡((
thi§ód
 < 0Ë&& (
î∫o
 =
EAGAIN
))

172 
	`jègCheck
(
thi§ód
);

174 
a˘uÆ
 +
thi§ód
;

177  
cou¡
;

178 
	}
}

180 
	gjèg
::
	$ß„wrôe
(c⁄° *
b
, 
cou¡
)

182 *
buf„r
 = (*)
b
;

183 
a˘uÆ
 = 0;

184 
Êags
 = 
	`f˙é
(
jègBox
, 
F_GETFL
);

186 
	`f˙é
(
jègBox
, 
F_SETFL
, 0);

187 
cou¡
 > 0)

189 
n
 = 
	`wrôe
(
jègBox
, 
buf„r
, 
cou¡
);

191 i‡(
n
 =-1 && 
î∫o
 =
EINTR
)

193 i‡(
n
 == -1)

195 
a˘uÆ
 = -1;

199 
cou¡
 -
n
;

200 
a˘uÆ
 +
n
;

201 
buf„r
 +
n
;

203 
	`f˙é
(
jègBox
, 
F_SETFL
, 
Êags
);

204  
a˘uÆ
;

205 
	}
}

209 
	gjèg
::
	$ch™geLoˇlBôR©e
(
√wBôR©e
)

211 i‡(
is_usb
)

215 
ãrmios
 
tio
;

217 
	`jègCheck
(
	`tcgë©å
(
jègBox
, &
tio
));

219 
•ìd_t
 
√wP‹tS≥ed
 = 
B19200
;

221 
√wBôR©e
)

224 
√wP‹tS≥ed
 = 
B9600
;

227 
√wP‹tS≥ed
 = 
B19200
;

230 
√wP‹tS≥ed
 = 
B38400
;

233 
√wP‹tS≥ed
 = 
B57600
;

236 
√wP‹tS≥ed
 = 
B115200
;

239 
	`debugOut
("unsuµ‹ãd bôøã: %d\n", 
√wBôR©e
);

240 
	`exô
(1);

243 
	`cf£to•ìd
(&
tio
, 
√wP‹tS≥ed
);

244 
	`cf£ti•ìd
(&
tio
, 
√wP‹tS≥ed
);

246 
	`jègCheck
(
	`tc£èâr
(
jègBox
,
TCSANOW
,&
tio
));

247 
	`jègCheck
(
	`tcÊush
(
jègBox
, 
TCIFLUSH
));

248 
	}
}

250 
boﬁ
 
	$∑geIsEm±y
(
BFDimage
 *
image
, 
addr
, 
size
,

251 
BFDmem‹yTy≥
 
memty≥
)

253 
boﬁ
 
em±yPage
 = 
åue
;

256 
idx
=
addr
; idx<addr+
size
; idx++)

258 i‡(
idx
 >
image
->
œ°_addªss
)

264 i‡(
image
->image[
idx
].
u£d
)

266 i‡(!((
memty≥
 =
MEM_FLASH
) &&

267 (
image
->image[
idx
].
vÆ
 == 0xff)))

269 
em±yPage
 = 
Ál£
;

274  
em±yPage
;

275 
	}
}

278 
	gjèg
::
	$gë_∑ge_size
(
BFDmem‹yTy≥
 
memty≥
)

280 
∑ge_size
;

281  
memty≥
 ) {

282 
MEM_FLASH
:

283 
∑ge_size
 = 
globÆ_p_devi˚_def
->
Êash_∑ge_size
;

285 
MEM_EEPROM
:

286 
∑ge_size
 = 
globÆ_p_devi˚_def
->
ì¥om_∑ge_size
;

289 
∑ge_size
 = 1;

292  
∑ge_size
;

293 
	}
}

296 
	gjèg
::
	$jèg_Êash_image
(
BFDimage
 *
image
, 
BFDmem‹yTy≥
 
memty≥
,

297 
boﬁ
 
¥ogøm
, boﬁ 
vîify
)

299 
∑ge_size
 = 
	`gë_∑ge_size
(
memty≥
);

300 
uch¨
 
buf
[
MAX_IMAGE_SIZE
];

301 
i
;

302 
uch¨
 *
ª•⁄£
 = 
NULL
;

303 
boﬁ
 
em±yPage
 = 
åue
;

304 
addr
;

306 i‡(! 
image
->
has_d©a
)

308 
	`Ârötf
(
°dîr
, "File containsÇo data.\n");

309 
	`exô
(-1);

313 i‡(
¥ogøm
)

316 
addr
 = 
	`∑ge_addr
(
image
->
fú°_addªss
, 
memty≥
);

318 
	`°©usOut
("Dow∆ﬂdög %†imagêtÿèrgë.", 
image
->
«me
);

319 
	`°©usFlush
();

321 
addr
 < 
image
->
œ°_addªss
)

323 i‡(!
	`∑geIsEm±y
(
image
, 
addr
, 
∑ge_size
, 
memty≥
))

326 
	`debugOut
("WritingÖageátáddr 0x%.4lx size 0x%lx\n",

327 
addr
, 
∑ge_size
);

330 
i
=0; i<
∑ge_size
; i++)

331 
buf
[
i
] = 
image
->image[i+
addr
].
vÆ
;

333 
	`check
(
	`jègWrôe
(
BFDmem‹yS∑˚Off£t
[
memty≥
] + 
addr
,

334 
∑ge_size
,

335 
buf
),

340 
addr
 +
∑ge_size
;

342 
	`°©usOut
(".");

343 
	`°©usFlush
();

346 
	`°©usOut
("\n");

347 
	`°©usFlush
();

350 i‡(
vîify
)

352 
boﬁ
 
is_vîifõd
 = 
åue
;

355 
addr
 = 
	`∑ge_addr
(
image
->
fú°_addªss
, 
memty≥
);

357 
	`°©usOut
("\nVîifyög %s", 
image
->
«me
);

358 
	`°©usFlush
();

360 
addr
 < 
image
->
œ°_addªss
)

363 
	`debugOut
("VerifyingÖageátáddr 0x%.4lx size 0x%lx\n",

364 
addr
, 
∑ge_size
);

366 
ª•⁄£
 = 
	`jègRód
(
BFDmem‹yS∑˚Off£t
[
memty≥
] + 
addr
,

367 
∑ge_size
);

370 
i
=0; i < 
∑ge_size
; i++)

372 
c
 = 
i
 + 
addr
;

373 i‡(
image
->image[
c
].
u£d
 )

375 i‡(
image
->image[
c
].
vÆ
 !
ª•⁄£
[
i
])

377 
	`°©usOut
("\nError verifyingÅargetáddr %.4x. "

379 
c
, 
image
->image[c].
vÆ
, 
ª•⁄£
[
i
]);

380 
	`°©usFlush
();

381 
is_vîifõd
 = 
Ál£
;

386 
addr
 +
∑ge_size
;

388 
	`°©usOut
(".");

389 
	`°©usFlush
();

391 
dñëe
 [] 
ª•⁄£
;

393 
	`°©usOut
("\n");

394 
	`°©usFlush
();

396 
	`check
(
is_vîifõd
, "\nVerification failed!");

398 
	}
}

400 
	gjèg
::
	$jègWrôeFu£s
(*
fu£s
)

402 
ãmp
[3];

403 
uch¨
 
fu£Bôs
[3];

404 
uch¨
 *
ªadfu£Bôs
;

405 
c
;

407 
	`check
(
fu£s
,

411 
c
 = 
	`ssˇnf
(
fu£s
, "%02x%02x%02x", 
ãmp
+2,Åemp+1,Åemp );

412 
	`check
(
c
 == 3,

415 
fu£Bôs
[0] = (
uch¨
)
ãmp
[0];

416 
fu£Bôs
[1] = (
uch¨
)
ãmp
[1];

417 
fu£Bôs
[2] = (
uch¨
)
ãmp
[2];

419 
	`°©usOut
("\nWriting Fuse Bytes:\n");

420 
	`jègDi•œyFu£s
(
fu£Bôs
);

422 
	`íabÀProgømmög
();

424 
	`check
(
	`jègWrôe
(
FUSE_SPACE_ADDR_OFFSET
 + 0, 3, 
fu£Bôs
),

427 
ªadfu£Bôs
 = 
	`jègRód
(
FUSE_SPACE_ADDR_OFFSET
 + 0, 3);

429 
	`dißbÀProgømmög
();

431 
	`check
(
	`memcmp
(
fu£Bôs
, 
ªadfu£Bôs
, 3) == 0,

434 
dñëe
 [] 
ªadfu£Bôs
;

435 
	}
}

438 
	gjèg
::
	$jègRódFu£s
()

440 
uch¨
 *
fu£Bôs
 = 0;

442 
	`íabÀProgømmög
();

443 
	`°©usOut
("\nReading Fuse Bytes:\n");

444 
fu£Bôs
 = 
	`jègRód
(
FUSE_SPACE_ADDR_OFFSET
 + 0, 3);

445 
	`dißbÀProgømmög
();

447 
	`check
(
fu£Bôs
, "ErrorÑeading fuses");

449 
	`jègDi•œyFu£s
(
fu£Bôs
);

451 
dñëe
 [] 
fu£Bôs
;

452 
	}
}

455 
	gjèg
::
	$jègDi•œyFu£s
(
uch¨
 *
fu£Bôs
)

457 
	`°©usOut
(" Exãnded Fu£ byã -> 0x%02x\n", 
fu£Bôs
[2]);

458 
	`°©usOut
(" High Fu£ byã -> 0x%02x\n", 
fu£Bôs
[1]);

459 
	`°©usOut
(" Low Fu£ byã -> 0x%02x\n", 
fu£Bôs
[0]);

460 
	}
}

463 
	gjèg
::
	$jègWrôeLockBôs
(*
lock
)

465 
ãmp
[1];

466 
uch¨
 
lockBôs
[1];

467 
uch¨
 *
ªadlockBôs
;

468 
c
;

470 
	`check
(
lock
,

473 
	`check
(
	`°æí
(
lock
) == 2,

477 
c
 = 
	`ssˇnf
(
lock
, "%02x", 
ãmp
);

478 
	`check
(
c
 == 1,

481 
lockBôs
[0] = (
uch¨
)
ãmp
[0];

483 
	`°©usOut
("\nWrôög Lock Bô†-> 0x%02x\n", 
lockBôs
[0]);

485 
	`íabÀProgømmög
();

487 
	`check
(
	`jègWrôe
(
LOCK_SPACE_ADDR_OFFSET
 + 0, 1, 
lockBôs
),

490 
ªadlockBôs
 = 
	`jègRód
(
LOCK_SPACE_ADDR_OFFSET
 + 0, 1);

492 
	`dißbÀProgømmög
();

494 
	`check
(
	`memcmp
(
lockBôs
, 
ªadlockBôs
, 1) == 0,

497 
dñëe
 [] 
ªadlockBôs
;

498 
	}
}

501 
	gjèg
::
	$jègRódLockBôs
()

503 
uch¨
 *
lockBôs
 = 0;

505 
	`íabÀProgømmög
();

506 
	`°©usOut
("\nReading Lock Bits:\n");

507 
lockBôs
 = 
	`jègRód
(
LOCK_SPACE_ADDR_OFFSET
 + 0, 1);

508 
	`dißbÀProgømmög
();

510 
	`check
(
lockBôs
, "ErrorÑeadingÜock bits");

512 
	`jègDi•œyLockBôs
(
lockBôs
);

514 
dñëe
 [] 
lockBôs
;

515 
	}
}

518 
	gjèg
::
	$jègDi•œyLockBôs
(
uch¨
 *
lockBôs
)

520 
	`°©usOut
("Lock bô†-> 0x%02x\n\n", 
lockBôs
[0]);

522 
	`°©usOut
(" Bô 7 [ Re£rved ] -> %d\n", (
lockBôs
[0] >> 7) & 1);

523 
	`°©usOut
(" Bô 6 [ Re£rved ] -> %d\n", (
lockBôs
[0] >> 6) & 1);

524 
	`°©usOut
(" Bô 5 [ BLB12 ] -> %d\n", (
lockBôs
[0] >> 5) & 1);

525 
	`°©usOut
(" Bô 4 [ BLB11 ] -> %d\n", (
lockBôs
[0] >> 4) & 1);

526 
	`°©usOut
(" Bô 3 [ BLB02 ] -> %d\n", (
lockBôs
[0] >> 3) & 1);

527 
	`°©usOut
(" Bô 2 [ BLB01 ] -> %d\n", (
lockBôs
[0] >> 2) & 1);

528 
	`°©usOut
(" Bô 1 [ LB2 ] -> %d\n", (
lockBôs
[0] >> 1) & 1);

529 
	`°©usOut
(" Bô 0 [ LB1 ] -> %d\n", (
lockBôs
[0] >> 0) & 1);

530 
	}
}

	@jtagio.cc

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/time.h
>

32 
	~<ãrmios.h
>

33 
	~<f˙é.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

37 
	~"av¨i˚.h
"

38 
	~"jèg.h
"

39 
	~"jèg1.h
"

50 
SídResu…
 
	gjèg1
::
	$£ndJègComm™d
(
uch¨
 *
comm™d
, 
comm™dSize
, *
åõs
)

52 
	`check
((*
åõs
)++ < 
MAX_JTAG_COMM_ATTEMPS
,

55 
	`debugOut
("\ncomm™d[%c, %d]: ", 
comm™d
[0], *
åõs
);

57 
i
 = 0; i < 
comm™dSize
; i++)

58 
	`debugOut
("%.2X ", 
comm™d
[
i
]);

60 
	`debugOut
("\n");

63 
	`jègCheck
(
	`tcÊush
(
jègBox
, 
TCIFLUSH
));

65 
cou¡
 = 
	`ß„wrôe
(
comm™d
, 
comm™dSize
);

66 i‡(
cou¡
 < 0)

67 
	`jègCheck
(
cou¡
);

69 
	`check
(
cou¡
 =
comm™dSize
, 
JTAG_CAUSE
);

72 
	`jègCheck
(
	`tcdøö
(
jègBox
));

78 
uch¨
 
ok
;

79 
cou¡
 = 
	`timeout_ªad
(&
ok
, 1, 
JTAG_RESPONSE_TIMEOUT
);

80 
	`jègCheck
(
cou¡
);

83 i‡(
cou¡
 == 0)

85 
	`debugOut
("Timed out.\n");

86  
£nd_Áûed
;

89 
ok
)

91 
JTAG_R_OK
:  
£nd_ok
;

92 
JTAG_R_INFO
:

93 
öfobuf
[2];

96 
	`debugOut
("InfoÑesponse: ");

97 
cou¡
 = 
	`timeout_ªad
(
öfobuf
, 2, 
JTAG_RESPONSE_TIMEOUT
);

98 
i
 = 0; i < 
cou¡
; i++)

100 
	`debugOut
("%.2X ", 
öfobuf
[
i
]);

102 
	`debugOut
("\n");

103 i‡(
cou¡
 !2 || 
öfobuf
[1] !
JTAG_R_OK
)

104  
£nd_Áûed
;

106  (
SídResu…
)(
mcu_d©a
 + 
öfobuf
[0]);

109 
	`debugOut
("Ouào‡sync,Ñï⁄£ wa†`%02x'\n", 
ok
);

110  
£nd_Áûed
;

113 
	}
}

121 
uch¨
 *
	gjèg1
::
	$gëJègRe•⁄£
(
ª•⁄£Size
)

123 
uch¨
 *
ª•⁄£
;

124 
numCh¨sRód
;

129 
ª•⁄£
 = 
√w
 
uch¨
[
ª•⁄£Size
 + 1];

130 
ª•⁄£
[
ª•⁄£Size
] = '\0';

132 
numCh¨sRód
 = 
	`timeout_ªad
(
ª•⁄£
, 
ª•⁄£Size
,

133 
JTAG_RESPONSE_TIMEOUT
);

134 
	`jègCheck
(
numCh¨sRód
);

136 
	`debugOut
("response: ");

137 
i
 = 0; i < 
numCh¨sRód
; i++)

139 
	`debugOut
("%.2X ", 
ª•⁄£
[
i
]);

141 
	`debugOut
("\n");

143 i‡(
numCh¨sRód
 < 
ª•⁄£Size
)

145 
	`debugOut
("Timed Out (partialÑesponse)\n");

146 
dñëe
 [] 
ª•⁄£
;

147  
NULL
;

150  
ª•⁄£
;

151 
	}
}

153 
uch¨
 *
	gjèg1
::
	$doJègComm™d
(
uch¨
 *
comm™d
, 
comm™dSize
, 
ª•⁄£Size
)

155 
åyCou¡
 = 0;

160 
uch¨
 *
ª•⁄£
;

161 
uch¨
 
sync
[] = { ' ' };

162 
uch¨
 
°›
[] = { 'S', 
JTAG_EOM
 };

164 
	`£ndJègComm™d
(
comm™d
, 
comm™dSize
, &
åyCou¡
))

166 
£nd_ok
:

167 
ª•⁄£
 = 
	`gëJègRe•⁄£
(
ª•⁄£Size
);

168 
	`check
(
ª•⁄£
 !
NULL
, 
JTAG_CAUSE
);

169  
ª•⁄£
;

170 
£nd_Áûed
:

172 
	`£ndJègComm™d
(
sync
,  sync, &
åyCou¡
Ë!
£nd_ok
)

183 i‡(
	`£ndJègComm™d
(
°›
,  st›, &
åyCou¡
Ë=
£nd_ok
)

184 
	`gëJègRe•⁄£
(8);

189 
	}
}

191 
boﬁ
 
	gjèg1
::
	$doSim∂eJègComm™d
(
cmd
, 
ª•⁄£Size
)

193 
uch¨
 *
ª•⁄£
;

194 
uch¨
 
comm™d
[] = { 
cmd
, 
JTAG_EOM
 };

195 
boﬁ
 
ªsu…
;

197 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
,  comm™d, 
ª•⁄£Size
);

198 
ªsu…
 = 
ª•⁄£Size
 =0 || 
ª•⁄£
[ª•⁄£Sizê- 1] =
JTAG_R_OK
;

200 
dñëe
 [] 
ª•⁄£
;

202  
ªsu…
;

203 
	}
}

207 
	gjèg1
::
	$ch™geBôR©e
(
√wBôR©e
)

209 
uch¨
 
jègøã
;

211 
√wBôR©e
) {

213 
jègøã
 = 
BIT_RATE_9600
;

216 
jègøã
 = 
BIT_RATE_19200
;

219 
jègøã
 = 
BIT_RATE_38400
;

222 
jègøã
 = 
BIT_RATE_57600
;

225 
jègøã
 = 
BIT_RATE_115200
;

228 
	`£tJègP¨amëî
(
JTAG_P_BITRATE
, 
jègøã
);

229 
	`ch™geLoˇlBôR©e
(
√wBôR©e
);

230 
	}
}

233 
	gjèg1
::
	$£tDevi˚Des¸ùt‹
(
jèg_devi˚_def_ty≥
 *
dev
)

235 
uch¨
 *
ª•⁄£
 = 
NULL
;

236 
uch¨
 *
comm™d
 = (uch¨ *)(&
dev
->
dev_desc1
);

238 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
,  
dev
->
dev_desc1
, 1);

239 
	`check
(
ª•⁄£
[0] =
JTAG_R_OK
,

242 
dñëe
 [] 
ª•⁄£
;

243 
	}
}

247 
boﬁ
 
	gjèg1
::
	$checkF‹Emuœt‹
()

249 
uch¨
 *
ª•⁄£
;

250 
uch¨
 
comm™d
[] = { 'S', 
JTAG_EOM
 };

251 
boﬁ
 
ªsu…
;

252 
åõs
 = 0;

254 i‡(!
	`£ndJègComm™d
(
comm™d
,  comm™d, &
åõs
))

255  
Ál£
;

257 
ª•⁄£
 = 
	`gëJègRe•⁄£
(8);

258 
ªsu…
 = 
ª•⁄£
 && !
	`°rcmp
((*)response, "AVRNOCDA");

260 
dñëe
 [] 
ª•⁄£
;

262  
ªsu…
;

263 
	}
}

266 
boﬁ
 
	gjèg1
::
	$synchr⁄i£At
(
bôøã
)

268 
	`debugOut
("Aâem±ög synchr⁄ißti⁄áàbôøã %d\n", 
bôøã
);

270 
	`ch™geLoˇlBôR©e
(
bôøã
);

272 
åõs
 = 0;

273 
åõs
 < 
MAX_JTAG_SYNC_ATTEMPS
)

279 
	`£ndJègComm™d
((
uch¨
 *)"SE ", 4, &
åõs
);

280 
	`u¶ìp
(2 * 
JTAG_COMM_TIMEOUT
);

281 
	`jègCheck
(
	`tcÊush
(
jègBox
, 
TCIFLUSH
));

282 i‡(
	`checkF‹Emuœt‹
())

283  
åue
;

285  
Ál£
;

286 
	}
}

289 
	gjèg1
::
	$°¨tJègLök
()

291 
bôøãs
[] =

294 
i
 = 0; i <  
bôøãs
 /  *bitrates; i++)

295 i‡(
	`synchr⁄i£At
(
bôøãs
[
i
]))

298 
	`check
(
Ál£
, "FailedÅo synchronise withÅhe JTAG ICE (is it connectedándÖowered?)");

299 
	}
}

308 
	gjèg1
::
	$devi˚AutoC⁄fig
()

310 
devi˚_id
;

311 
i
;

312 
jèg_devi˚_def_ty≥
 *
pDevi˚
 = 
devi˚Deföôi⁄s
;

315 
	`debugOut
("Automatic device detection: ");

318 
	`c⁄figDaisyChaö
();

321 
devi˚_id
 = 
	`gëJègP¨amëî
(
JTAG_P_JTAGID_BYTE0
);

323 
	`öãºu±Progøm
();

324 
devi˚_id
 +(
	`gëJègP¨amëî
(
JTAG_P_JTAGID_BYTE1
) << 8) +

325 (
	`gëJègP¨amëî
(
JTAG_P_JTAGID_BYTE2
) << 16) +

326 (
	`gëJègP¨amëî
(
JTAG_P_JTAGID_BYTE3
) << 24);

329 
	`debugOut
("JTAG id = 0x%0X : Ver = 0x%0x : Device = 0x%0x : Manuf = 0x%0x\n",

330 
devi˚_id
,

331 (
devi˚_id
 & 0xF0000000) >> 28,

332 (
devi˚_id
 & 0x0FFFF000) >> 12,

333 (
devi˚_id
 & 0x00000FFE) >> 1);

335 
devi˚_id
 = (device_id & 0x0FFFF000) >> 12;

336 
	`°©usOut
("Rï‹ãd JTAG devi˚ ID: 0x%0X\n", 
devi˚_id
);

338 i‡(
devi˚_«me
 == 0)

340 
pDevi˚
->
«me
)

342 i‡(
pDevi˚
->
devi˚_id
 == device_id)

345 
pDevi˚
++;

347 
	`check
((
pDevi˚
->
devi˚_Êags
 & 
DEVFL_MKII_ONLY
) == 0,

349 
	`check
(
pDevi˚
->
«me
,

351 
devi˚_id
);

355 
	`debugOut
("Lookög f‹ devi˚: %s\n", 
devi˚_«me
);

357 
pDevi˚
->
«me
)

359 i‡(
	`°rˇ£cmp
(
pDevi˚
->
«me
, 
devi˚_«me
) == 0)

362 
pDevi˚
++;

364 
	`check
((
pDevi˚
->
devi˚_Êags
 & 
DEVFL_MKII_ONLY
) == 0,

366 
	`check
(
pDevi˚
->
«me
,

368 
devi˚_«me
);

371 i‡(
devi˚_«me
)

373 i‡(
devi˚_id
 !
pDevi˚
->device_id)

375 
	`°©usOut
("Configured for device ID: 0x%0X %s -- FORCED with %s\n",

376 
pDevi˚
->
devi˚_id
,ÖDevi˚->
«me
, 
devi˚_«me
);

380 
	`°©usOut
("Configured for device ID: 0x%0X %s -- Matched with "

381 "%s\n", 
pDevi˚
->
devi˚_id
,ÖDevi˚->
«me
, 
devi˚_«me
);

386 
	`°©usOut
("Configured for device ID: 0x%0X %s\n",

387 
pDevi˚
->
devi˚_id
,ÖDevi˚->
«me
);

390 
devi˚_«me
 = (*)
pDevi˚
->
«me
;

392 
globÆ_p_devi˚_def
 = 
pDevi˚
;

394 
	`£tDevi˚Des¸ùt‹
(
pDevi˚
);

395 
	}
}

398 
	gjèg1
::
	$öôJègBox
()

400 
	`°©usOut
("JTAG config starting.\n");

402 
	`°¨tJègLök
();

403 
	`ch™geBôR©e
(115200);

405 
uch¨
 
hw_vî
 = 
	`gëJègP¨amëî
(
JTAG_P_HW_VERSION
);

406 
	`°©usOut
("H¨dw¨êVîsi⁄: 0x%02x\n", 
hw_vî
);

409 
uch¨
 
sw_vî
 = 
	`gëJègP¨amëî
(
JTAG_P_SW_VERSION
);

410 
	`°©usOut
("So·w¨êVîsi⁄: 0x%02x\n", 
sw_vî
);

412 
	`öãºu±Progøm
();

414 
	`devi˚AutoC⁄fig
();

417 
	`dñëeAŒBªakpoöts
();

419 
	`°©usOut
("JTAG config complete.\n");

420 
	}
}

423 
	gjèg1
::
	$öôJègOnChùDebuggög
(
bôøã
)

425 
	`°©usOut
("PreparingÅheÅarget device for On Chip Debugging.\n");

427 
uch¨
 
br
;

428 i‡(
bôøã
 >= 1000000UL)

429 
br
 = 
JTAG_BITRATE_1_MHz
;

430 i‡(
bôøã
 >= 500000)

431 
br
 = 
JTAG_BITRATE_500_KHz
;

432 i‡(
bôøã
 >= 250000)

433 
br
 = 
JTAG_BITRATE_250_KHz
;

435 
br
 = 
JTAG_BITRATE_125_KHz
;

437 
	`£tJègP¨amëî
(
JTAG_P_CLOCK
, 
br
);

441 
	`íabÀProgømmög
();

444 
uch¨
 *
lockBôs
 = 0;

445 
lockBôs
 = 
	`jègRód
(
LOCK_SPACE_ADDR_OFFSET
 + 0, 1);

447 i‡(*
lockBôs
 !
LOCK_BITS_ALL_UNLOCKED
)

449 
lockBôs
[0] = 
LOCK_BITS_ALL_UNLOCKED
;

450 
	`jègWrôe
(
LOCK_SPACE_ADDR_OFFSET
 + 0, 1, 
lockBôs
);

453 
	`°©usOut
("\nDisablingÜock bits:\n");

454 
	`°©usOut
(" LockBô†-> 0x%02x\n", *
lockBôs
);

456 i‡(
lockBôs
)

458 
dñëe
 [] 
lockBôs
;

459 
lockBôs
 = 0;

463 
uch¨
 *
fu£Bôs
 = 0;

464 
	`°©usOut
("\nEnabling on-chip debugging:\n");

465 
fu£Bôs
 = 
	`jègRód
(
FUSE_SPACE_ADDR_OFFSET
 + 0, 3);

467 i‡((
fu£Bôs
[1] & 
FUSE_OCDEN
) == FUSE_OCDEN)

469 
fu£Bôs
[1] = fu£Bôs[1] & ~
FUSE_OCDEN
;

470 
	`jègWrôe
(
FUSE_SPACE_ADDR_OFFSET
 + 1, 1, &
fu£Bôs
[1]);

473 
	`jègDi•œyFu£s
(
fu£Bôs
);

475 i‡(
fu£Bôs
)

477 
dñëe
 [] 
fu£Bôs
;

478 
fu£Bôs
 = 0;

481 
	`dißbÀProgømmög
();

483 
	`ª£tProgøm
(
Ál£
);

484 
	`£tJègP¨amëî
(
JTAG_P_TIMERS_RUNNING
, 0x00);

485 
	`ª£tProgøm
(
åue
);

486 
	}
}

488 
	gjèg1
::
	$c⁄figDaisyChaö
()

491 i‡(
dchaö
.
unôs_bef‹e
 > 0)

492 
	`£tJègP¨amëî
(
JTAG_P_UNITS_BEFORE
,
dchaö
.
unôs_bef‹e
);

493 i‡(
dchaö
.
unôs_a·î
 > 0)

494 
	`£tJègP¨amëî
(
JTAG_P_UNITS_AFTER
,
dchaö
.
unôs_a·î
);

495 i‡(
dchaö
.
bôs_bef‹e
 > 0)

496 
	`£tJègP¨amëî
(
JTAG_P_BIT_BEFORE
,
dchaö
.
bôs_bef‹e
);

497 i‡(
dchaö
.
bôs_a·î
 > 0)

498 
	`£tJègP¨amëî
(
JTAG_P_BIT_AFTER
,
dchaö
.
bôs_a·î
);

499 
	}
}

	@jtagmisc.cc

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<sys/°©.h
>

31 
	~<ãrmios.h
>

32 
	~<f˙é.h
>

33 
	~<°rög.h
>

35 
	~"av¨i˚.h
"

36 
	~"jèg.h
"

37 
	~"jèg1.h
"

39 
	gjèg1
::
	$£tJègP¨amëî
(
uch¨
 
ôem
, uch¨ 
√wVÆue
)

41 
uch¨
 *
ª•⁄£
 = 
NULL
;

42 
uch¨
 
comm™d
[] = {'B', 0, 0, 
JTAG_EOM
 };

44 
comm™d
[1] = 
ôem
;

45 
comm™d
[2] = 
√wVÆue
;

47 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
, (command), 1);

48 
	`check
(
ª•⁄£
[0] =
JTAG_R_OK
, "JTAG ICE: UnknownÖarameter\n");

50 
dñëe
 [] 
ª•⁄£
;

51 
	}
}

53 
uch¨
 
	gjèg1
::
	$gëJègP¨amëî
(
uch¨
 
ôem
)

55 
uch¨
 *
ª•⁄£
 = 
NULL
;

56 
uch¨
 
comm™d
[] = {'q', 0, 
JTAG_EOM
 };

57 
ªsu…
 = 0;

59 
comm™d
[1] = 
ôem
;

60 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
, (command), 2);

61 
	`check
(
ª•⁄£
[1] =
JTAG_R_OK
, "JTAG ICE: UnknownÖarameter\n");

63 
ªsu…
 = 
ª•⁄£
[0];

65 
dñëe
 [] 
ª•⁄£
;

67  
ªsu…
;

68 
	}
}

	@jtagprog.cc

29 
	~<°d¨g.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

33 
	~<sys/°©.h
>

34 
	~<ãrmios.h
>

35 
	~<f˙é.h
>

36 
	~<°rög.h
>

37 
	~<m©h.h
>

38 
	~<bfd.h
>

40 
	~"av¨i˚.h
"

41 
	~"jèg.h
"

42 
	~"jèg1.h
"

45 #i‚de‡
bfd_gë_£˘i⁄_size


46 
	#bfd_gë_£˘i⁄_size
 
bfd_gë_£˘i⁄_size_bef‹e_ªloc


	)

49 
	$öôImage
(
BFDimage
 *
image
)

51 
i
;

52 
image
->
œ°_addªss
 = 0;

53 
image
->
fú°_addªss
 = 0;

54 
image
->
fú°_addªss_ok
 = 
Ál£
;

55 
image
->
has_d©a
 = 
Ál£
;

56 
i
=0;i<
MAX_IMAGE_SIZE
;i++)

58 
image
->image[
i
].
vÆ
 = 0x00;

59 
image
->image[
i
].
u£d
 = 
Ál£
;

61 
	}
}

64 
	gjèg1
::
	$íabÀProgømmög
()

66 
¥ogømmögE«bÀd
 = 
åue
;

67 
	`check
(
	`doSim∂eJègComm™d
(0xa3, 1),

69 
	}
}

72 
	gjèg1
::
	$dißbÀProgømmög
()

74 
¥ogømmögE«bÀd
 = 
Ál£
;

75 
	`check
(
	`doSim∂eJègComm™d
(0xa4, 1),

77 
	}
}

82 
	gjèg1
::
	$îa£ProgømMem‹y
()

84 
	`check
(
	`doSim∂eJègComm™d
(0xa5, 1),

86 
	}
}

88 
	gjèg1
::
	$îa£ProgømPage
(
addªss
)

90 
uch¨
 *
ª•⁄£
 = 
NULL
;

91 
uch¨
 
comm™d
[] = { 0xa1, 0, 0, 0, 
JTAG_EOM
 };

93 
comm™d
[1] = 
addªss
 >> 8;

94 
comm™d
[2] = 
addªss
;

96 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
, (command), 1);

97 
	`check
(
ª•⁄£
[0] =
JTAG_R_OK
, "PageÉrase failed\n");

99 
dñëe
 [] 
ª•⁄£
;

100 
	}
}

105 
	$check_fûe_f‹m©
(
bfd
 *
fûe
)

107 **
m©chög
;

108 
d⁄e
 = 0;

109 
îr
 = 1;

112 i‡(
	`bfd_check_f‹m©
(
fûe
, 
bfd_¨chive
Ë=
åue
)

114 
	`Ârötf
(
°dîr
, "Input file isárchive\n");

117 i‡(
	`bfd_check_f‹m©_m©ches
 (
fûe
, 
bfd_obje˘
, &
m©chög
))

118 
îr
 = 0;

120 i‡(
	`bfd_gë_îr‹
 (Ë=
bfd_îr‹_fûe_ambiguou¶y_ªcognized
)

122 
	`Ârötf
(
°dîr
, "File formatámbiguous: %s\n",

123 
	`bfd_îrmsg
(
	`bfd_gë_îr‹
()));

126 i‡(
	`bfd_gë_îr‹
 (Ë!
bfd_îr‹_fûe_nŸ_ªcognized
)

128 
	`Ârötf
(
°dîr
, "File formatÇot supported: %s\n",

129 
	`bfd_îrmsg
(
	`bfd_gë_îr‹
()));

132 i‡(
	`bfd_check_f‹m©_m©ches
 (
fûe
, 
bfd_c‹e
, &
m©chög
))

133 
îr
 = 0;

135  
îr
;

136 
	}
}

151 
	$gë_£˘i⁄_addr
(
a£˘i⁄
 *
£˘i⁄
, 
BFDmem‹yTy≥
 
memty≥
)

153 
BFDmem‹yTy≥
 
£˘memty≥
;

154 
addr
 = 
£˘i⁄
->
lma
;

156 i‡((
£˘i⁄
->
Êags
 & 
SEC_HAS_CONTENTS
) &&

157 ((
£˘i⁄
->
Êags
 & 
SEC_ALLOC
Ë|| (£˘i⁄->Êag†& 
SEC_LOAD
)))

159 i‡(
£˘i⁄
->
lma
 < 
DATA_SPACE_ADDR_OFFSET
)

160 
£˘memty≥
 = 
MEM_FLASH
;

161 i‡(
£˘i⁄
->
lma
 < 
EEPROM_SPACE_ADDR_OFFSET
)

162 
£˘memty≥
 = 
MEM_RAM
;

163 i‡(
£˘i⁄
->
lma
 < 
FUSE_SPACE_ADDR_OFFSET
)

164 
£˘memty≥
 = 
MEM_EEPROM
;

166 i‡(
memty≥
 =
£˘memty≥
) {

167 i‡(
£˘memty≥
 =
MEM_FLASH
) {

170  (
£˘i⁄
->
lma
);

172  (
£˘i⁄
->
lma
 &~ 
ADDR_SPACE_MASK
);

179 
	}
}

184 
	$jèg_¸óã_image
(
bfd
 *
fûe
, 
a£˘i⁄
 *
£˘i⁄
,

185 
BFDimage
 *
image
,

186 
BFDmem‹yTy≥
 
memty≥
)

188 c⁄° *
«me
;

189 
addr
;

190 
size
;

191 
uch¨
 
buf
[
MAX_IMAGE_SIZE
];

192 
i
;

195 i‡(! 
£˘i⁄
)

199 
«me
 = 
	`bfd_gë_£˘i⁄_«me
(
fûe
, 
£˘i⁄
);

200 
size
 = 
	`bfd_gë_£˘i⁄_size
(
£˘i⁄
);

202 i‡((
addr
 = 
	`gë_£˘i⁄_addr
(
£˘i⁄
, 
memty≥
)) != 0xffffff)

204 
	`debugOut
("Getting section contents,áddr=0x%lx size=0x%lx\n",

205 
addr
, 
size
);

208 
	`bfd_gë_£˘i⁄_c⁄ã¡s
(
fûe
, 
£˘i⁄
, 
buf
, 0, 
size
);

211 
i
=0; i<
size
; i++)

213 
c
 = 
i
+
addr
;

214 
image
->image[
c
].
vÆ
 = 
buf
[
i
];

215 
image
->image[
c
].
u£d
 = 
åue
;

219 i‡(
addr
+
size
 > 
image
->
œ°_addªss
)

220 
image
->
œ°_addªss
 = 
addr
+
size
;

223 i‡((! 
image
->
fú°_addªss_ok
Ë|| (
addr
 < image->
fú°_addªss
))

225 
image
->
fú°_addªss
 = 
addr
;

226 
image
->
fú°_addªss_ok
 = 
åue
;

228 
	`debugOut
("%s Image create: Adding %sátáddr 0x%lx size %d (0x%lx)\n",

229 
BFDmem‹yTy≥Såög
[
memty≥
], 
«me
, 
addr
, 
size
, size);

232 
image
->
has_d©a
 = 
åue
;

234 
	}
}

237 
	gjèg1
::
	$dow∆ﬂdToT¨gë
(c⁄° * 
fûíame
, 
boﬁ
 
¥ogøm
, boﬁ 
vîify
)

241 
°©
 
if°©
;

242 c⁄° *
èrgë
 = 
NULL
;

243 c⁄° *
deÁu…_èrgë
 = "binary";

244 
∑ge_size
;

245 
boﬁ
 
d⁄e
 = 0;

246 
bfd
 *
fûe
;

247 
a£˘i⁄
 *
p
;

249 
BFDimage
 
Êashimg
, 
ì¥omimg
;

251 
	`öôImage
(&
Êashimg
);

252 
	`öôImage
(&
ì¥omimg
);

254 
Êashimg
.
«me
 = 
BFDmem‹yTy≥Såög
[
MEM_FLASH
];

255 
ì¥omimg
.
«me
 = 
BFDmem‹yTy≥Såög
[
MEM_EEPROM
];

257 
	`unixCheck
(
	`°©
(
fûíame
, &
if°©
), "Can't stat() file %s", filename);

260 
	`bfd_öô
();

266 ! 
d⁄e
)

268 
fûe
 = 
	`bfd_›ír
(
fûíame
, 
èrgë
);

269 i‡(! 
fûe
)

271 
	`Ârötf
–
°dîr
, "CouldÇŸ o≥¿öpuàfûê%s:%s\n", 
fûíame
,

272 
	`bfd_îrmsg
(
	`bfd_gë_îr‹
()) );

273 
	`exô
(-1);

277 i‡(
	`check_fûe_f‹m©
(
fûe
))

282 
	`Ârötf
(
°dîr
, "Warning: File format unknown,ássuming "

284 
èrgë
 = 
deÁu…_èrgë
;

288 
d⁄e
 = 1;

295 
∑ge_size
 = 
	`gë_∑ge_size
(
MEM_FLASH
);

297 
	`debugOut
("FlashÖage size: 0x%0x\nEEPROMÖage size: 0x%0x\n",

298 
∑ge_size
, 
	`gë_∑ge_size
(
MEM_EEPROM
));

300 
	`£tJègP¨amëî
(
JTAG_P_FLASH_PAGESIZE_LOW
, 
∑ge_size
 & 0xff);

301 
	`£tJègP¨amëî
(
JTAG_P_FLASH_PAGESIZE_HIGH
, 
∑ge_size
 >> 8);

303 
	`£tJègP¨amëî
(
JTAG_P_EEPROM_PAGESIZE
,

304 
	`gë_∑ge_size
(
MEM_EEPROM
));

307 
p
 = 
fûe
->
£˘i⁄s
;

308 
p
)

310 
	`jèg_¸óã_image
(
fûe
, 
p
, &
Êashimg
, 
MEM_FLASH
);

311 
	`jèg_¸óã_image
(
fûe
, 
p
, &
ì¥omimg
, 
MEM_EEPROM
);

312 
p
 =Ö->
√xt
;

315 
	`íabÀProgømmög
();

318 i‡(
Êashimg
.
has_d©a
)

319 
	`jèg_Êash_image
(&
Êashimg
, 
MEM_FLASH
, 
¥ogøm
, 
vîify
);

320 i‡(
ì¥omimg
.
has_d©a
)

321 
	`jèg_Êash_image
(&
ì¥omimg
, 
MEM_EEPROM
, 
¥ogøm
, 
vîify
);

323 
	`dißbÀProgømmög
();

325 
	`unixCheck
(
	`bfd_˛o£
(
fûe
), "Eº‹ closög %s", 
fûíame
);

327 
	`°©usOut
("\nDownload complete.\n");

328 
	}
}

	@jtagrun.cc

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/time.h
>

32 
	~<ãrmios.h
>

33 
	~<f˙é.h
>

34 
	~<°rög.h
>

36 
	~"av¨i˚.h
"

37 
	~"jèg.h
"

38 
	~"jèg1.h
"

39 
	~"ªmŸe.h
"

41 
	gjèg1
::
	$gëProgømCou¡î
()

43 
uch¨
 *
ª•⁄£
 = 
NULL
;

44 
uch¨
 
comm™d
[] = {'2', 
JTAG_EOM
 };

45 
ªsu…
 = 0;

47 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
, (command), 4);

49 i‡(
ª•⁄£
[3] !
JTAG_R_OK
)

50 
ªsu…
 = 
PC_INVALID
;

53 
ªsu…
 = 
	`decodeAddªss
(
ª•⁄£
);

55 
ªsu…
--;

59 
ªsu…
 *= 2;

62 
dñëe
 [] 
ª•⁄£
;

63  
ªsu…
;

64 
	}
}

66 
boﬁ
 
	gjèg1
::
	$£tProgømCou¡î
(
pc
)

68 
uch¨
 *
ª•⁄£
 = 
NULL
;

69 
uch¨
 
comm™d
[] = {'3', 0, 0, 0, 
JTAG_EOM
 };

70 
boﬁ
 
ªsu…
;

73 
	`ícodeAddªss
(&
comm™d
[1], 
pc
 / 2 + 1);

75 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
, (command), 1);

77 
ªsu…
 = 
ª•⁄£
[0] =
JTAG_R_OK
;

79 
dñëe
 [] 
ª•⁄£
;

81  
ªsu…
;

82 
	}
}

84 
boﬁ
 
	gjèg1
::
	$ª£tProgøm
(
boﬁ
 
possibÀ_nSRST
)

86 
boﬁ
 
ªsu…
;

88 i‡(
possibÀ_nSRST
 && 
≠∂y_nSRST
) {

89 
	`£tJègP¨amëî
(
JTAG_P_EXTERNAL_RESET
, 0x01);

91 
ªsu…
 = 
	`doSim∂eJègComm™d
('x', 1);

92 i‡(
possibÀ_nSRST
 && 
≠∂y_nSRST
) {

93 
	`£tJègP¨amëî
(
JTAG_P_EXTERNAL_RESET
, 0x00);

95  
ªsu…
;

96 
	}
}

98 
boﬁ
 
	gjèg1
::
	$öãºu±Progøm
()

102  
	`doSim∂eJègComm™d
('F', 4);

103 
	}
}

105 
boﬁ
 
	gjèg1
::
	$ªsumeProgøm
()

107  
	`doSim∂eJègComm™d
('G', 0);

108 
	}
}

110 
boﬁ
 
	gjèg1
::
	$jègSögÀSãp
(
boﬁ
 
u£HLL
)

112  
	`doSim∂eJègComm™d
('1', 1);

113 
	}
}

115 
	gjèg1
::
	$∑r£Evíts
(const *)

118 
	}
}

120 
boﬁ
 
jèg1
::
	$jègC⁄töue
()

122 
	`upd©eBªakpoöts
();

124 i‡(!
	`doSim∂eJègComm™d
('G', 0))

126 
	`gdbOut
("FailedÅo continue\n");

127  
åue
;

132 
maxfd
;

133 
fd_£t
 
ªadfds
;

134 
boﬁ
 
bªakpoöt
 = 
Ál£
, 
gdbI¡îru±
 = false;

138 
	`debugOut
("Waiting for input.\n");

142 
	`FD_ZERO
 (&
ªadfds
);

143 
	`FD_SET
 (
gdbFûeDes¸ùt‹
, &
ªadfds
);

144 
	`FD_SET
 (
jègBox
, &
ªadfds
);

145 
maxfd
 = 
jègBox
 > 
gdbFûeDes¸ùt‹
 ? jtagBox : gdbFileDescriptor;

147 
numfds
 = 
	`£À˘
(
maxfd
 + 1, &
ªadfds
, 0, 0, 0);

148 
	`unixCheck
(
numfds
, "GDB/JTAG ICE communications failure");

150 i‡(
	`FD_ISSET
(
gdbFûeDes¸ùt‹
, &
ªadfds
))

152 
c
 = 
	`gëDebugCh¨
();

153 i‡(
c
 == 3)

155 
	`debugOut
("interrupted by GDB\n");

156 
gdbI¡îru±
 = 
åue
;

159 
	`debugOut
("U√x≥˘ed GDB i≈uà`%02x'\n", 
c
);

176 
uch¨
 
ª•⁄£
;

181 
	`timeout_ªad
(&
ª•⁄£
, 1, 1) == 1)

183 
uch¨
 
buf
[2];

184 
cou¡
;

186 
	`debugOut
("JTAG box síà%c", 
ª•⁄£
);

187 
ª•⁄£
)

189 
JTAG_R_BREAK
:

190 
cou¡
 = 
	`timeout_ªad
(
buf
, 2, 
JTAG_RESPONSE_TIMEOUT
);

191 
	`jègCheck
(
cou¡
);

192 
	`check
(
cou¡
 =2, 
JTAG_CAUSE
);

193 
bªakpoöt
 = 
åue
;

194 
	`debugOut
(": Break Status Register = 0x%02x%02x\n",

195 
buf
[0], buf[1]);

197 
JTAG_R_INFO
: 
JTAG_R_SLEEP
:

199 
cou¡
 = 
	`timeout_ªad
(
buf
, 2, 
JTAG_RESPONSE_TIMEOUT
);

200 
	`jègCheck
(
cou¡
);

201 
	`check
(
cou¡
 =2, 
JTAG_CAUSE
);

202 
	`debugOut
(": 0x%02, 0x%02\n", 
buf
[0], buf[1]);

204 
JTAG_R_POWER
:

206 
	`debugOut
("\n");

209 
	`debugOut
(": UnknownÑesponse\n");

215 i‡(
gdbI¡îru±
)

216  
Ál£
;

217 i‡(
bªakpoöt
)

218  
åue
;

220 
	}
}

	@jtagrw.cc

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<sys/°©.h
>

31 
	~<ãrmios.h
>

32 
	~<f˙é.h
>

33 
	~<°rög.h
>

34 
	~<as£π.h
>

36 
	~"av¨i˚.h
"

37 
	~"jèg.h
"

38 
	~"jèg1.h
"

39 
	~"ªmŸe.h
"

45 
uch¨
 
	$mem‹yS∑˚
(*
addr
)

47 
mask
;

51 i‡(*
addr
 & 
DATA_SPACE_ADDR_OFFSET
)

53 
mask
 = *
addr
 & 
ADDR_SPACE_MASK
;

54 *
addr
 &~
ADDR_SPACE_MASK
;

57 
mask
 = 0;

59 
mask
)

61 
EEPROM_SPACE_ADDR_OFFSET
:  
ADDR_EEPROM_SPACE
;

62 
FUSE_SPACE_ADDR_OFFSET
:  
ADDR_FUSE_SPACE
;

63 
LOCK_SPACE_ADDR_OFFSET
:  
ADDR_LOCK_SPACE
;

64 
SIG_SPACE_ADDR_OFFSET
:  
ADDR_SIG_SPACE
;

65 
BREAKPOINT_SPACE_ADDR_OFFSET
:  
ADDR_BREAKPOINT_SPACE
;

66 
DATA_SPACE_ADDR_OFFSET
:  
ADDR_DATA_SPACE
;

69 
	}
}

71 
	$sw≠Byãs
(
uch¨
 *
buf„r
, 
cou¡
)

73 
	`as£π
(!(
cou¡
 & 1));

74 
i
 = 0; i < 
cou¡
; i += 2)

76 
uch¨
 
ãmp
 = 
buf„r
[
i
];

77 
buf„r
[
i
] = buffer[i + 1];

78 
buf„r
[
i
 + 1] = 
ãmp
;

80 
	}
}

83 
uch¨
 *
	gjèg1
::
	$jègRód
(
addr
, 
numByãs
)

85 
uch¨
 *
ª•⁄£
;

86 
whichS∑˚
 = 0;

87 
uch¨
 
comm™d
[] = { 'R', 0, 0, 0, 0, 0, 
JTAG_EOM
 };

89 i‡(
numByãs
 == 0)

91 
ª•⁄£
 = 
√w
 
uch¨
[1];

92 
ª•⁄£
[0] = '\0';

93  
ª•⁄£
;

96 
	`debugOut
("jtagRead ");

97 
whichS∑˚
 = 
	`mem‹yS∑˚
(&
addr
);

98 i‡(
whichS∑˚
)

100 
comm™d
[1] = 
whichS∑˚
;

101 i‡(
numByãs
 > 256)

102  
NULL
;

103 
comm™d
[2] = 
numByãs
 - 1;

104 
	`ícodeAddªss
(&
comm™d
[3], 
addr
);

111 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
,  comm™d, 
numByãs
 + 2);

113 i‡(
ª•⁄£
[
numByãs
 + 1] =
JTAG_R_OK
)

114  
ª•⁄£
;

116 
dñëe
 [] 
ª•⁄£
;

118  
NULL
;

124 
whichS∑˚
 = 
¥ogømmögE«bÀd
 ?

125 
ADDR_PROG_SPACE_PROG_ENABLED
 : 
ADDR_PROG_SPACE_PROG_DISABLED
;

128 
numLoˇti⁄s
;

129 i‡(
addr
 & 1)

130 
numLoˇti⁄s
 = (
numByãs
 + 2) / 2;

132 
numLoˇti⁄s
 = (
numByãs
 + 1) / 2;

133 i‡(
numLoˇti⁄s
 > 256)

134  
Ál£
;

136 
comm™d
[1] = 
whichS∑˚
;

137 
comm™d
[2] = 
numLoˇti⁄s
 - 1;

138 
	`ícodeAddªss
(&
comm™d
[3], 
addr
 / 2);

140 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
,  comm™d, 
numLoˇti⁄s
 * 2 + 2);

142 i‡(
ª•⁄£
[
numLoˇti⁄s
 * 2 + 1] =
JTAG_R_OK
)

145 i‡(!
¥ogømmögE«bÀd
)

146 
	`sw≠Byãs
(
ª•⁄£
, 
numLoˇti⁄s
 * 2);

148 i‡(
addr
 & 1)

150 
	`memmove
(
ª•⁄£
,Ñe•⁄£ + 1, 
numByãs
);

152  
ª•⁄£
;

156 
dñëe
 [] 
ª•⁄£
;

158  
NULL
;

159 
	}
}

161 
boﬁ
 
	gjèg1
::
	$jègWrôe
(
addr
, 
numByãs
, 
uch¨
 
buf„r
[])

163 
uch¨
 *
ª•⁄£
;

164 
whichS∑˚
 = 0;

165 
numLoˇti⁄s
;

166 
uch¨
 
comm™d
[] = { 'W', 0, 0, 0, 0, 0, 
JTAG_EOM
 };

168 i‡(
numByãs
 == 0)

169  
åue
;

171 
	`debugOut
("jtagWrite ");

172 
whichS∑˚
 = 
	`mem‹yS∑˚
(&
addr
);

174 i‡(
whichS∑˚
)

175 
numLoˇti⁄s
 = 
numByãs
;

181 i‡((
addr
 & 1))

183 
	`debugOut
 ("\nOddÖgm wráddr\n");

184  
Ál£
;

188 i‡((
numByãs
 & 1))

190 
	`debugOut
 ("\nOddÖgm wrÜength\n");

191 
numByãs
+=1;

194 
addr
 /= 2;

195 
numLoˇti⁄s
 = 
numByãs
 / 2;

197 i‡(
¥ogømmögE«bÀd
)

198 
whichS∑˚
 = 
ADDR_PROG_SPACE_PROG_ENABLED
;

201 
whichS∑˚
 = 
ADDR_PROG_SPACE_PROG_DISABLED
;

202 
	`sw≠Byãs
(
buf„r
, 
numByãs
);

206  
Ál£
;

212 i‡(
numLoˇti⁄s
 > 256)

213  
Ál£
;

218 
comm™d
[1] = 
whichS∑˚
;

219 
comm™d
[2] = 
numLoˇti⁄s
 - 1;

220 
	`ícodeAddªss
(&
comm™d
[3], 
addr
);

222 
ª•⁄£
 = 
	`doJègComm™d
(
comm™d
,  command, 0);

223 i‡(!
ª•⁄£
)

224  
Ál£
;

225 
dñëe
 [] 
ª•⁄£
;

243 
uch¨
 *
txBuf„r
 = 
√w
 uch¨[
numByãs
 + 3];

244 
txBuf„r
[0] = 'h';

246 
	`mem˝y
(&
txBuf„r
[1], 
buf„r
, 
numByãs
);

248 
txBuf„r
[
numByãs
 + 1] = ' ';

249 
txBuf„r
[
numByãs
 + 2] = ' ';

251 
ª•⁄£
 = 
	`doJègComm™d
(
txBuf„r
, 
numByãs
 + 3, 1);

252 
dñëe
 [] 
txBuf„r
;

254 i‡(!
ª•⁄£
)

255  
Ál£
;

256 
dñëe
 [] 
ª•⁄£
;

258  
åue
;

259 
	}
}

	@main.cc

28 
	~<˘y≥.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/sockë.h
>

34 
	~<ãrmios.h
>

35 
	~<¨∑/öë.h
>

36 
	~<√tdb.h
>

37 
	~<√töë/ö.h
>

38 
	~<uni°d.h
>

39 
	~<√töë/t˝.h
>

40 
	~<f˙é.h
>

42 
	~"av¨i˚.h
"

43 
	~"ªmŸe.h
"

44 
	~"jèg.h
"

45 
	~"jèg1.h
"

46 
	~"jèg2.h
"

47 
	~"gnu_gë›t.h
"

49 
boﬁ
 
	gign‹eI¡îru±s
;

51 
	$makeSockë
(
sockaddr_ö
 *
«me
, 
p‹t
)

53 
sock
;

54 
tmp
;

55 
¥Ÿ€¡
 *protoent;

57 
sock
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

58 
	`gdbCheck
(
sock
);

61 
tmp
 = 1;

62 
	`gdbCheck
(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
tmp
, (tmp)));

65 
tmp
 = 1;

66 
	`gdbCheck
(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
tmp
, (tmp)));

68 
	`gdbCheck
(
	`böd
(
sock
, (
sockaddr
 *)
«me
, (*name)));

70 
¥Ÿ€¡
 = 
	`gë¥Ÿoby«me
("tcp");

71 
	`check
(
¥Ÿ€¡
 !
NULL
, "tcpÖrotocol unknown (oops?)");

73 
tmp
 = 1;

74 
	`gdbCheck
(
	`£tsock›t
(
sock
, 
¥Ÿ€¡
->
p_¥Ÿo
, 
TCP_NODELAY
,

75 (*)&
tmp
, (tmp)));

77  
sock
;

78 
	}
}

81 
	$öôSockëAddªss
(
sockaddr_ö
 *
«me
,

82 c⁄° *
ho°«me
, 
p‹t
)

84 
ho°ít
 *
ho°Info
;

86 
	`mem£t
(
«me
, 0, (*name));

87 
«me
->
sö_Ámûy
 = 
AF_INET
;

88 
«me
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

91 i‡(
	`öë_©⁄
(
ho°«me
, &
«me
->
sö_addr
) == 0)

93 
ho°Info
 = 
	`gëho°by«me
(
ho°«me
);

94 
	`check
(
ho°Info
 !
NULL
, "Unknow¿ho° %s", 
ho°«me
);

95 
«me
->
sö_addr
 = *(
ö_addr
 *)
ho°Info
->
h_addr
;

97 
	}
}

99 
	$∑r£JègBôøã
(c⁄° *
vÆ
)

101 *
íd±r
, 
c
;

102 
v
;

104 
	`check
(*
vÆ
 != '\0', "invalidÇumber in JTAG bitÑate");

105 
v
 = 
	`°πoul
(
vÆ
, &
íd±r
, 10);

106 i‡(*
íd±r
 == '\0')

107  
v
;

108 
	`is•a˚
(()(
c
 = *
íd±r
)))

109 
íd±r
++;

110 
c
)

114 
v
 *= 1000UL;

115  
v
;

118 
v
 *= 1000000UL;

119  
v
;

121 i‡(
	`°rcmp
(
íd±r
, "Hz") == 0)

122  
v
;

124 
	`check
(
Ál£
, "invalidÇumber in JTAG bitÑate");

126 
	}
}

128 
	$ußge
(c⁄° *
¥og«me
)

130 
	`Ârötf
(
°dîr
,

131 "Ußge: %†[OPTION]... [[HOST_NAME]:PORT]\n\n", 
¥og«me
);

132 
	`Ârötf
(
°dîr
, "Options:\n");

133 
	`Ârötf
(
°dîr
,

135 
	`Ârötf
(
°dîr
,

137 
	`Ârötf
(
°dîr
,

139 
	`Ârötf
(
°dîr
,

146 
	`Ârötf
(
°dîr
,

151 
	`Ârötf
(
°dîr
,

155 
	`Ârötf
(
°dîr
,

157 
	`Ârötf
(
°dîr
,

159 
	`Ârötf
(
°dîr
,

161 
	`Ârötf
(
°dîr
,

165 
	`Ârötf
(
°dîr
,

170 
	`Ârötf
(
°dîr
,

175 
	`Ârötf
(
°dîr
,

179 
	`Ârötf
(
°dîr
,

181 
	`Ârötf
(
°dîr
,

183 
	`Ârötf
(
°dîr
,

185 
	`Ârötf
(
°dîr
,

187 
	`Ârötf
(
°dîr
,

190 
	`Ârötf
(
°dîr
,

194 
	`Ârötf
(
°dîr
,

196 
	`Ârötf
(
°dîr
,

198 
	`Ârötf
(
°dîr
,

200 
	`Ârötf
(
°dîr
,

203 
	`Ârötf
(
°dîr
,

206 
	`Ârötf
(
°dîr
,

208 
	`Ârötf
(
°dîr
,

210 
	`Ârötf
(
°dîr
,

213 
	`Ârötf
(
°dîr
,

215 
¥og«me
);

216 
	`exô
(0);

217 
	}
}

219 
	$com∑ª«mes
(c⁄° *
a
, c⁄° *
b
)

221 c⁄° 
jèg_devi˚_def_ty≥
 *
ja
 = (c⁄° jèg_devi˚_def_ty≥ *)
a
;

222 c⁄° 
jèg_devi˚_def_ty≥
 *
jb
 = (c⁄° jèg_devi˚_def_ty≥ *)
b
;

224  
	`°rcmp
(
ja
->
«me
, 
jb
->name);

225 
	}
}

227 
	$knownP¨ts
()

229 
	`Ârötf
(
°dîr
, "List of known AVR devices:\n\n");

231 
jèg_devi˚_def_ty≥
* 
dev
 = 
devi˚Deföôi⁄s
;

233 
size_t
 
n
 = 0;

234 
dev
->
«me
 !
NULL
)

235 
n
++, 
dev
++;

238 
	`qs‹t
(
devi˚Deföôi⁄s
, 
n
, (
jèg_devi˚_def_ty≥
),

239 
com∑ª«mes
);

240 
	`Ârötf
(
°dîr
,

243 
	`Ârötf
(
°dîr
,

246 
dev
 = 
devi˚Deföôi⁄s
;

247 
n
-- != 0)

249 
ìsize
 = 
dev
->
ì¥om_∑ge_size
 * dev->
ì¥om_∑ge_cou¡
;

251 i‡(
ìsize
 != 0 &&Éesize < 1024)

252 
	`Ârötf
(
°dîr
, "%-15s 0x%04X %4d KiB %4.1f KiB\n",

253 
dev
->
«me
,

254 
dev
->
devi˚_id
,

255 
dev
->
Êash_∑ge_size
 * dev->
Êash_∑ge_cou¡
 / 1024,

256 
ìsize
 / 1024.0);

258 
	`Ârötf
(
°dîr
, "%-15s 0x%04X %4d KiB %4d KiB\n",

259 
dev
->
«me
,

260 
dev
->
devi˚_id
,

261 
dev
->
Êash_∑ge_size
 * dev->
Êash_∑ge_cou¡
 / 1024,

262 
ìsize
 / 1024);

263 
dev
++;

266 
	`exô
(1);

267 
	}
}

269 
›ti⁄
 
	gl⁄g_›ts
[] = {

300 
jèg
 *
	gtheJègICE
;

302 
	$maö
(
¨gc
, **
¨gv
)

304 
sock
;

305 
sockaddr_ö
 
˛õ¡«me
;

306 
sockaddr_ö
 
«me
;

307 *
öFûeName
 = 0;

308 c⁄° *
jègDevi˚Name
 = 
NULL
;

309 *
devi˚_«me
 = 0;

310 c⁄° *
evíéi°
 = "none,run,target_power_on,target_sleep,target_wakeup";

311 
jègBôøã
 = 0;

312 c⁄° *
ho°Name
 = "0.0.0.0";

313 
ho°P‹tNumbî
;

314 
boﬁ
 
îa£
 = 
Ál£
;

315 
boﬁ
 
¥ogøm
 = 
Ál£
;

316 
boﬁ
 
ªadFu£s
 = 
Ál£
;

317 
boﬁ
 
wrôeFu£s
 = 
Ál£
;

318 *
fu£s
;

319 
boﬁ
 
ªadLockBôs
 = 
Ál£
;

320 
boﬁ
 
wrôeLockBôs
 = 
Ál£
;

321 
boﬁ
 
gdbSîvîMode
 = 
Ál£
;

322 *
lockBôs
;

323 
boﬁ
 
dëach
 = 
Ál£
;

324 
boﬁ
 
ˇ±uª
 = 
Ál£
;

325 
boﬁ
 
vîify
 = 
Ál£
;

326 
boﬁ
 
is_døg⁄
 = 
Ál£
;

327 
boﬁ
 
≠∂y_n§°
 = 
Ál£
;

328 
boﬁ
 
is_xmega
 = 
Ál£
;

329 *
¥og«me
 = 
¨gv
[0];

331 
MKI
, 
MKII
, 
MKII_DW


332 } 
¥Ÿocﬁ
 = 
MKI
;

333 
›ti⁄_ödex
;

334 
unôs_bef‹e
 = 0;

335 
unôs_a·î
 = 0;

336 
bôs_bef‹e
 = 0;

337 
bôs_a·î
 = 0;

339 
	`°©usOut
("AVaRICE version %s, %s %s\n\n",

340 
PACKAGE_VERSION
, 
__DATE__
, 
__TIME__
);

342 
devi˚_«me
 = 0;

344 
›ãº
 = 0;

348 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "12B:Cc:DdeE:f:ghIj:kL:lP:pRrVvwW:x",

349 
l⁄g_›ts
, &
›ti⁄_ödex
);

350 i‡(
c
 == -1)

353 
c
) {

356 
	`ußge
(
¥og«me
);

358 
	`knownP¨ts
();

360 
¥Ÿocﬁ
 = 
MKI
;

364 i‡(
¥Ÿocﬁ
 !
MKII_DW
)

365 
¥Ÿocﬁ
 = 
MKII
;

368 
jègBôøã
 = 
	`∑r£JègBôøã
(
›èrg
);

371 
ˇ±uª
 = 
åue
;

374 i‡(
	`ssˇnf
(
›èrg
,"%u,%u,%u,%u",

375 &
unôs_bef‹e
, &
unôs_a·î
,

376 &
bôs_bef‹e
, &
bôs_a·î
) != 4)

377 
	`ußge
(
¥og«me
);

378 i‡(
unôs_bef‹e
 > 
bôs_bef‹e
 || 
unôs_a·î
 > 
bôs_a·î
 ||

379 
bôs_bef‹e
 > 32 || 
bôs_a·î
 > 32) {

380 
	`Ârötf
(
°dîr
,

383 
¥og«me
);

384 
	`exô
(1);

388 
dëach
 = 
åue
;

391 
debugMode
 = 
åue
;

394 
îa£
 = 
åue
;

397 
evíéi°
 = 
›èrg
;

400 
öFûeName
 = 
›èrg
;

404 i‡(
¥Ÿocﬁ
 !
MKII_DW
)

405 
¥Ÿocﬁ
 = 
MKII
;

406 
is_døg⁄
 = 
åue
;

409 
ign‹eI¡îru±s
 = 
åue
;

412 
jègDevi˚Name
 = 
›èrg
;

415 
lockBôs
 = 
›èrg
;

416 
wrôeLockBôs
 = 
åue
;

419 
ªadLockBôs
 = 
åue
;

422 
devi˚_«me
 = 
›èrg
;

425 
¥ogøm
 = 
åue
;

428 
≠∂y_n§°
 = 
åue
;

431 
ªadFu£s
 = 
åue
;

434 
	`exô
(0);

436 
vîify
 = 
åue
;

439 
¥Ÿocﬁ
 = 
MKII_DW
;

442 
fu£s
 = 
›èrg
;

443 
wrôeFu£s
 = 
åue
;

446 
is_xmega
 = 
åue
;

449 
	`Ârötf
 (
°dîr
, "getop() did something screwey");

450 
	`exô
 (1);

454 i‡((
›töd
+1Ë=
¨gc
) {

458 
i
;

459 *
¨g
 = 
¨gv
[
›töd
];

460 
Àn
 = 
	`°æí
 (
¨g
);

461 *
ho°
 = 
√w
 [
Àn
+1];

462 
	`mem£t
 (
ho°
, '\0', 
Àn
+1);

464 
i
=0; i<
Àn
; i++) {

465 i‡((
¨g
[
i
] == '\0') || (arg[i] == ':'))

468 
ho°
[
i
] = 
¨g
[i];

471 i‡(
	`°æí
 (
ho°
)) {

472 
ho°Name
 = 
ho°
;

475 i‡(
¨g
[
i
] == ':') {

476 
i
++;

479 i‡(
i
 >
Àn
) {

481 
	`Ârötf
 (
°dîr
, "avarice: %s isÇotá valid host:port value.\n",

482 
¨g
);

483 
	`exô
 (1);

486 *
íd±r
;

487 
ho°P‹tNumbî
 = ()
	`°πﬁ
(
¨g
+
i
, &
íd±r
, 0);

488 i‡(
íd±r
 =
¨g
+
i
) {

490 
	`Ârötf
 (
°dîr
, "avarice: failedÅo convertÖortÇumber: %s\n",

491 
¨g
+
i
);

492 
	`exô
 (1);

498 i‡((
ho°P‹tNumbî
 < 1024) || (hostPortNumber > 0xffff)) {

499 
	`Ârötf
 (
°dîr
, "avarice: invalidÖortÇumber: %d (must be >= %d"

500 "ánd <%d)\n", 
ho°P‹tNumbî
, 1024, 0xffff);

501 
	`exô
 (1);

504 
gdbSîvîMode
 = 
åue
;

506 i‡(
›töd
 !
¨gc
) {

507 
	`ußge
 (
¥og«me
);

510 i‡(
jègBôøã
 =0 && (
¥Ÿocﬁ
 =
MKI
 ||ÖrŸocﬁ =
MKII
))

512 
	`Ârötf
 (
°dout
,

515 
jègBôøã
 = 250000;

522 i‡(
jègDevi˚Name
 =
NULL
)

524 *
˝
 = 
	`gëív
 ("JTAG_DEV");

526 i‡(
˝
 !
NULL
)

527 
jègDevi˚Name
 = 
˝
;

528 i‡(
is_døg⁄
)

529 
jègDevi˚Name
 = "usb";

531 
jègDevi˚Name
 = "/dev/avrjtag";

534 
åy
 {

536 
¥Ÿocﬁ
) {

537 
MKI
:

538 
theJègICE
 = 
√w
 
	`jèg1
(
jègDevi˚Name
, 
devi˚_«me
, 
≠∂y_n§°
);

541 
MKII
:

542 
theJègICE
 = 
√w
 
	`jèg2
(
jègDevi˚Name
, 
devi˚_«me
, 
Ál£
,

543 
is_døg⁄
, 
≠∂y_n§°
, 
is_xmega
);

546 
MKII_DW
:

547 
theJègICE
 = 
√w
 
	`jèg2
(
jègDevi˚Name
, 
devi˚_«me
, 
åue
,

548 
is_døg⁄
, 
≠∂y_n§°
);

553 
theJègICE
->
dchaö
.
unôs_bef‹e
 = () units_before;

554 
theJègICE
->
dchaö
.
unôs_a·î
 = () units_after;

555 
theJègICE
->
dchaö
.
bôs_bef‹e
 = () bits_before;

556 
theJègICE
->
dchaö
.
bôs_a·î
 = () bits_after;

559 
theJègICE
->
	`∑r£Evíts
(
evíéi°
);

562 
theJègICE
->
	`öôJègBox
();

564 
	`ˇtch
(c⁄° *
msg
)

566 
	`Ârötf
(
°dîr
, "%s\n", 
msg
);

569 
	`ˇtch
(...)

571 
	`Ârötf
(
°dîr
, "Cannot initialize JTAG ICE\n");

575 i‡(
îa£
)

577 i‡(
¥Ÿocﬁ
 =
MKII_DW
)

579 
	`°©usOut
("WARNING: ChipÉraseÇotÖossible in debugWire mode; ignored\n");

583 
theJègICE
->
	`íabÀProgømmög
();

584 
	`°©usOut
("ErasingÖrogram memory.\n");

585 
theJègICE
->
	`îa£ProgømMem‹y
();

586 
	`°©usOut
("Erase complete.\n");

587 
theJègICE
->
	`dißbÀProgømmög
();

591 i‡(
ªadFu£s
)

593 
theJègICE
->
	`jègRódFu£s
();

596 i‡(
ªadLockBôs
)

598 
theJègICE
->
	`jègRódLockBôs
();

601 i‡(
wrôeFu£s
)

602 
theJègICE
->
	`jègWrôeFu£s
(
fu£s
);

608 if–
gdbSîvîMode
 && ( ! 
ˇ±uª
 ) )

609 
theJègICE
->
	`öôJègOnChùDebuggög
(
jègBôøã
);

611 i‡(
öFûeName
 != (*)0)

613 i‡((
¥ogøm
 =
Ál£
Ë&& (
vîify
 == false)) {

619 
¥ogøm
 = 
åue
;

622 i‡((
îa£
 =
Ál£
Ë&& (
¥ogøm
 =
åue
)) {

623 
	`°©usOut
("WARNING: The default behaviour has changed.\n"

631 
theJègICE
->
	`dow∆ﬂdToT¨gë
(
öFûeName
, 
¥ogøm
, 
vîify
);

632 
theJègICE
->
	`ª£tProgøm
(
Ál£
);

636 
	`check
–(!
¥ogøm
Ë&& (!
vîify
),

642 i‡(
wrôeLockBôs
)

643 
theJègICE
->
	`jègWrôeLockBôs
(
lockBôs
);

646 i‡(!
gdbSîvîMode
)

647 
theJègICE
->
	`ªsumeProgøm
();

650 
	`öôSockëAddªss
(&
«me
, 
ho°Name
, 
ho°P‹tNumbî
);

651 
sock
 = 
	`makeSockë
(&
«me
, 
ho°P‹tNumbî
);

652 
	`°©usOut
("Waôög f‹ c⁄√˘i⁄ o¿p‹à%hu.\n", 
ho°P‹tNumbî
);

653 
	`gdbCheck
(
	`li°í
(
sock
, 1));

655 i‡(
dëach
)

657 
chûd
 = 
	`f‹k
();

659 
	`unixCheck
(
chûd
, "FailedÅo fork");

660 i‡(
chûd
 != 0)

661 
	`_exô
(0);

663 
	`unixCheck
(
	`£tsid
(), "setsid failed - weird bug");

667 
sockÀn_t
 
size
 = (sockÀn_t)(
˛õ¡«me
);

668 
gfd
 = 
	`ac˚±
(
sock
, (
sockaddr
 *)&
˛õ¡«me
, &
size
);

669 
	`gdbCheck
(
gfd
);

670 
	`°©usOut
("Connection opened by host %s,Öort %hu.\n",

671 
	`öë_¡ﬂ
(
˛õ¡«me
.
sö_addr
), 
	`¡ohs
(˛õ¡«me.
sö_p‹t
));

673 
	`£tGdbFûe
(
gfd
);

679 
	`èlkToGdb
();

682 
dñëe
 
theJègICE
;

685 
	}
}

	@remote.cc

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<ãrmios.h
>

28 
	~<sys/time.h
>

29 
	~<uni°d.h
>

30 
	~<î∫o.h
>

31 
	~<°dio.h
>

32 
	~<f˙é.h
>

33 
	~<sig«l.h
>

35 
	~"av¨i˚.h
"

36 
	~"ªmŸe.h
"

37 
	~"jèg.h
"

45 
	mBUFMAX
 = 400,

46 
	mNUMREGS
 = 32 ,

47 
	mSREG
 = 32,

48 
	mSP
 = 33,

49 
	mPC
 = 34,

52 
	mNUMREGBYTES
 = (
NUMREGS
 + 1 + 2 + 4),

55 
	gªmcomInBuf„r
[
BUFMAX
];

56 
	gªmcomOutBuf„r
[
BUFMAX
];

58 
ok
();

59 
îr‹
(
n
);

61 
	ggdbFûeDes¸ùt‹
 = -1;

63 
	$gdbCheck
(
°©us
)

65 
	`unixCheck
(
°©us
, 
GDB_CAUSE
);

66 
	}
}

68 
	$£tGdbFûe
(
fd
)

70 
gdbFûeDes¸ùt‹
 = 
fd
;

71 
ªt
 = 
	`f˙é
(
gdbFûeDes¸ùt‹
, 
F_SETFL
, 
O_NONBLOCK
);

72 
	`gdbCheck
(
ªt
);

73 
	}
}

75 
	$waôF‹GdbOuçut
()

77 
numfds
;

78 
fd_£t
 
wrôefds
;

80 
	`FD_ZERO
 (&
wrôefds
);

81 
	`FD_SET
 (
gdbFûeDes¸ùt‹
, &
wrôefds
);

83 
numfds
 = 
	`£À˘
 (
gdbFûeDes¸ùt‹
 + 1, 0, &
wrôefds
, 0, 0);

84 
	`gdbCheck
(
numfds
);

85 
	}
}

88 
	$putDebugCh¨
(
c
)

94 
ªt
 = 
	`wrôe
(
gdbFûeDes¸ùt‹
, &
c
, 1);

96 i‡(
ªt
 == 1)

99 i‡(
ªt
 == 0)

100 
	`check
(
Ál£
, 
GDB_CAUSE
);

102 i‡(
î∫o
 !
EAGAIN
)

103 
	`gdbCheck
(
ªt
);

105 
	`waôF‹GdbOuçut
();

107 
	}
}

109 
	$waôF‹GdbI≈ut
()

111 
numfds
;

112 
fd_£t
 
ªadfds
;

114 
	`FD_ZERO
 (&
ªadfds
);

115 
	`FD_SET
 (
gdbFûeDes¸ùt‹
, &
ªadfds
);

117 
numfds
 = 
	`£À˘
 (
gdbFûeDes¸ùt‹
 + 1, &
ªadfds
, 0, 0, 0);

118 
	`gdbCheck
(
numfds
);

119 
	}
}

123 
	$gëDebugCh¨
()

125 
uch¨
 
c
 = 0;

126 
ªsu…
;

130 
	`waôF‹GdbI≈ut
();

131 
ªsu…
 = 
	`ªad
(
gdbFûeDes¸ùt‹
, &
c
, 1);

133 
ªsu…
 < 0 && 
î∫o
 =
EAGAIN
);

135 
	`gdbCheck
(
ªsu…
);

137 i‡(
ªsu…
 == 0)

139 
	`°©usOut
("gdbÉxited.\n");

140 
theJègICE
->
	`ªsumeProgøm
();

141 
dñëe
 
theJègICE
;

142 
	`exô
(0);

145  ()
c
;

146 
	}
}

148 
	$checkF‹DebugCh¨
()

150 
uch¨
 
c
 = 0;

151 
ªsu…
;

153 
ªsu…
 = 
	`ªad
(
gdbFûeDes¸ùt‹
, &
c
, 1);

155 i‡(
ªsu…
 < 0 && 
î∫o
 =
EAGAIN
)

158 
	`gdbCheck
(
ªsu…
);

160 i‡(
ªsu…
 == 0)

162 
	`°©usOut
("gdbÉxited.\n");

163 
theJègICE
->
	`ªsumeProgøm
();

164 
	`exô
(0);

167  ()
c
;

168 
	}
}

170 c⁄° 
	ghexch¨s
[] = "0123456789abcdef";

172 *
	$byãToHex
(
uch¨
 
x
, *
buf
)

174 *
buf
++ = 
hexch¨s
[
x
 >> 4];

175 *
buf
++ = 
hexch¨s
[
x
 & 0xf];

177  
buf
;

178 
	}
}

180 
	$hex
(
ch
)

182 if((
ch
 >= 'a') && (ch <= 'f'))

184  (
ch
 - 'a' + 10);

186 if((
ch
 >= '0') && (ch <= '9'))

188  (
ch
 - '0');

190 if((
ch
 >= 'A') && (ch <= 'F'))

192  (
ch
 - 'A' + 10);

195 
	}
}

202 
	$hexToI¡
(**
±r
, *
ötVÆue
)

204 
numCh¨s
 = 0;

205 
hexVÆue
;

207 *
ötVÆue
 = 0;

208 **
±r
)

210 
hexVÆue
 = 
	`hex
(**
±r
);

211 if(
hexVÆue
 >= 0)

213 *
ötVÆue
 = (*ötVÆuê<< 4Ë| 
hexVÆue
;

214 
numCh¨s
++;

220 (*
±r
)++;

222  (
numCh¨s
);

223 
	}
}

228 *
	$mem2hex
(
uch¨
 *
mem
, *
buf
, 
cou¡
)

230 
i
 = 0; i < 
cou¡
; i++)

231 
buf
 = 
	`byãToHex
(*
mem
++, buf);

232 *
buf
 = 0;

234  (
buf
);

235 
	}
}

240 
uch¨
 *
	$hex2mem
(*
buf
, 
uch¨
 *
mem
, 
cou¡
)

242 
i
;

243 
ch
;

245 
i
 = 0; i < 
cou¡
; i++)

247 
ch
 = 
	`hex
(*
buf
++) << 4;

248 
ch
 = ch + 
	`hex
(*
buf
++);

249 *
mem
++ = 
ch
;

252  (
mem
);

253 
	}
}

260 
uch¨
 *
	$bö2mem
(*
buf
, 
uch¨
 *
mem
, 
cou¡
)

262 
i
;

264 
i
 = 0; i < 
cou¡
; i++)

268 if(*
buf
 == 0x7d)

270 *(
buf
 + 1))

275 
buf
++;

276 *
buf
 |= 0x20;

284 *
mem
++ = *
buf
++;

287  
mem
;

288 
	}
}

290 
puçackë
(*
buf„r
);

292 
	$vgdbOut
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

296 
boﬁ
 
ªíãªd
 = 
Ál£
;

298 i‡(
gdbFûeDes¸ùt‹
 >0 && !
ªíãªd
)

300 
ãxtbuf
[
BUFMAX
], 
hexbuf
[2 * BUFMAX], *
ãxtsˇn
, *
hexsˇn
;

302 
ªíãªd
 = 
åue
;

304 
	`v¢¥ötf
(
ãxtbuf
, 
BUFMAX
, 
fmt
, 
¨gs
);

306 
hexsˇn
 = 
hexbuf
;

307 *
hexsˇn
++ = 'O';

308 
ãxtsˇn
 = 
ãxtbuf
; *textscan;Åextscan++)

309 
hexsˇn
 = 
	`byãToHex
(*
ãxtsˇn
, hexscan);

310 *
hexsˇn
 = '\0';

311 
	`puçackë
(
hexbuf
);

313 
ªíãªd
 = 
Ál£
;

315 
	}
}

317 
	$gdbOut
(c⁄° *
fmt
, ...)

319 
va_li°
 
¨gs
;

320 
	`va_°¨t
(
¨gs
, 
fmt
);

321 
	`vgdbOut
(
fmt
, 
¨gs
);

322 
	`va_íd
(
¨gs
);

323 
	}
}

341 
	$ªp‹tSètusExãnded
(
sigvÆ
)

343 
uch¨
 *
jègBuf„r
;

344 
pc
 = 
theJègICE
->
	`gëProgømCou¡î
();

347 
jègBuf„r
 = 
theJègICE
->
	`jègRód
(0x5D + 
DATA_SPACE_ADDR_OFFSET
, 0x03);

349 i‡(
jègBuf„r
)

353 
	`¢¥ötf
 (
ªmcomOutBuf„r
, (remcomOutBuffer),

355 
sigvÆ
 & 0xff,

356 
jègBuf„r
[2],

357 
jègBuf„r
[0],

358 
jègBuf„r
[1],

359 
pc
 & 0xff, (pc >> 8) & 0xff,

360 (
pc
 >> 16) & 0xff, (pc >> 24) & 0xff);

362 
dñëe
 [] 
jègBuf„r
;

363 
jègBuf„r
 = 0;

367 
	`îr‹
(1);

370 
	}
}

373 
	$ªp‹tSètus
(
sigvÆ
)

375 *
±r
 = 
ªmcomOutBuf„r
;

382 *
±r
++ = 'S';

383 
±r
 = 
	`byãToHex
(
sigvÆ
,Ötr);

384 *
±r
++ = 0;

385 
	}
}

388 
	$ªadLW‹d
(
addªss
)

390 *
mem
 = 
theJègICE
->
	`jègRód
(
DATA_SPACE_ADDR_OFFSET
 + 
addªss
, 2);

392 i‡(!
mem
)

395 
vÆ
 = 
mem
[0] | mem[1] << 8;

396 
dñëe
[] 
mem
;

397  
vÆ
;

398 
	}
}

401 
	$ªadBW‹d
(
addªss
)

403 *
mem
 = 
theJègICE
->
	`jègRód
(
DATA_SPACE_ADDR_OFFSET
 + 
addªss
, 2);

405 i‡(!
mem
)

408 
vÆ
 = 
mem
[0] << 8 | mem[1];

409 
dñëe
[] 
mem
;

410  
vÆ
;

411 
	}
}

413 
	$ªadSP
()

415  
	`ªadLW‹d
(0x5d);

416 
	}
}

418 
boﬁ
 
	$h™dÀI¡îru±
()

420 
boﬁ
 
ªsu…
;

423 
	`debugOut
("INTERRUPT\n");

424 
öåSP
 = 
	`ªadSP
();

425 
ªtPC
 = 
	`ªadBW‹d
(
öåSP
 + 1) << 1;

426 
	`debugOut
("INT SP = %x,ÑëPC = %x\n", 
öåSP
, 
ªtPC
);

428 
boﬁ
 
√edBP
 = !
theJègICE
->
	`codeBªakpoötAt
(
ªtPC
);

432 i‡(
√edBP
)

441 i‡(!
theJègICE
->
	`addBªakpoöt
(
ªtPC
, 
CODE
, 0))

442  
Ál£
;

444 
ªsu…
 = 
theJègICE
->
	`jègC⁄töue
();

445 i‡(
√edBP
)

446 
theJègICE
->
	`dñëeBªakpoöt
(
ªtPC
, 
CODE
, 0);

448 i‡(!
ªsu…
 || !
√edBP
)

453 i‡(
	`ªadSP
(Ë> 
öåSP
)

456  
ªsu…
;

457 
	}
}

459 
boﬁ
 
	$sögÀSãp
()

461 i‡(!
theJègICE
->
	`jègSögÀSãp
())

462 
	`gdbOut
("FailedÅo single-step");

464 
√wPC
 = 
theJègICE
->
	`gëProgømCou¡î
();

465 i‡(
theJègICE
->
	`codeBªakpoötAt
(
√wPC
))

466  
åue
;

468 i‡(
ign‹eI¡îru±s
 && 
√wPC
 < 
globÆ_p_devi˚_def
->
ve˘‹s_íd
)

469  
	`h™dÀI¡îru±
();

471  
åue
;

472 
	}
}

479 *
	$gë∑ckë
()

481 *
buf„r
 = &
ªmcomInBuf„r
[0];

482 
checksum
;

483 
xmôcsum
;

484 
cou¡
;

485 
ch
;

491 (
ch
 = 
	`gëDebugCh¨
()) != '$')

494 
ªåy
:

495 
checksum
 = 0;

496 
xmôcsum
 = 0;

497 
cou¡
 = 0;

500 
cou¡
 < 
BUFMAX
 - 1)

502 
ch
 = 
	`gëDebugCh¨
();

503 if(
ch
 == '$')

505 
ªåy
;

507 if(
ch
 == '#')

511 
checksum
 = checksum + 
ch
;

512 
buf„r
[
cou¡
] = 
ch
;

513 
cou¡
 = count + 1;

515 
buf„r
[
cou¡
] = 0;

517 if(
ch
 == '#')

519 
ch
 = 
	`gëDebugCh¨
();

520 
xmôcsum
 = 
	`hex
(
ch
) << 4;

521 
ch
 = 
	`gëDebugCh¨
();

522 
xmôcsum
 +
	`hex
(
ch
);

524 if(
checksum
 !
xmôcsum
)

526 
buf
[16];

528 
	`mem2hex
(&
checksum
, 
buf
, 4);

529 
	`gdbOut
("Bad checksum: my cou¡ = %s, ", 
buf
);

530 
	`mem2hex
(&
xmôcsum
, 
buf
, 4);

531 
	`gdbOut
("£¡ cou¡ = %s\n", 
buf
);

532 
	`gdbOut
(" -- Bad buf„r: \"%s\"\n", 
buf„r
);

534 
	`putDebugCh¨
('-');

538 
	`putDebugCh¨
('+');

541 if(
buf„r
[2] == ':')

543 
	`putDebugCh¨
(
buf„r
[0]);

544 
	`putDebugCh¨
(
buf„r
[1]);

546  &
buf„r
[3];

549  &
buf„r
[0];

553 
	}
}

556 
	$puçackë
(*
buf„r
)

558 
checksum
;

559 
cou¡
;

560 
ch
;

565 
	`putDebugCh¨
('$');

566 
checksum
 = 0;

567 
cou¡
 = 0;

569 (
ch
 = 
buf„r
[
cou¡
]))

571 
	`putDebugCh¨
(
ch
);

572 
checksum
 +
ch
;

573 
cou¡
 += 1;

575 
	`putDebugCh¨
('#');

576 
	`putDebugCh¨
(
hexch¨s
[
checksum
 >> 4]);

577 
	`putDebugCh¨
(
hexch¨s
[
checksum
 % 16]);

578 } 
	`gëDebugCh¨
() != '+');

579 
	}
}

582 
	$ok
()

584 
	`°r˝y
(
ªmcomOutBuf„r
, "OK");

585 
	}
}

588 
	$îr‹
(
n
)

590 *
±r
 = 
ªmcomOutBuf„r
;

592 *
±r
++ = 'E';

593 
±r
 = 
	`byãToHex
(
n
,Ötr);

594 *
±r
 = '\0';

595 
	}
}

597 
	$ªpSètus
(
boﬁ
 
bªaktime
)

599 i‡(
bªaktime
)

600 
	`ªp‹tSètusExãnded
(
SIGTRAP
);

605 
theJègICE
->
	`öãºu±Progøm
();

607 
	`ªp‹tSètusExãnded
(
SIGINT
);

609 
	}
}

612 
	$èlkToGdb
()

614 
addr
, 
°¨t
, 
íd
;

615 
Àngth
;

616 
i
;

617 
√wPC
;

618 
ªgno
;

619 *
±r
;

620 
boﬁ
 
addög
 = 
Ál£
;

621 
boﬁ
 
d⁄tSídRïly
 = 
Ál£
;

622 
cmd
;

623 
œ°_cmd
 = 0;

625 
±r
 = 
	`gë∑ckë
();

627 
	`debugOut
("GDB: <%s>\n", 
±r
);

630 
ªmcomOutBuf„r
[0] = 0;

632 
cmd
 = *
±r
++;

633 
cmd
)

639 
d⁄tSídRïly
 = 
åue
;

643 i‡(!
theJègICE
->
	`ª£tProgøm
(
Ál£
))

644 
	`gdbOut
("reset failed\n");

645 
d⁄tSídRïly
 = 
åue
;

649 
	`ok
();

654 
uch¨
 *
jègBuf„r
;

655 
Àad
 = 0;

656 
boﬁ
 
œ°_‹ph™_≥ndög
 = 
Ál£
;

657 
uch¨
 
œ°_‹ph™
 = 0xff;

662 
	`îr‹
(1);

663 if((
	`hexToI¡
(&
±r
, &
addr
)) &&

664 (*(
±r
++) == ',') &&

665 (
	`hexToI¡
(&
±r
, &
Àngth
)) &&

666 (*(
±r
++) == ':') &&

667 (
Àngth
 > 0))

669 
	`debugOut
("\nGDB: Write %d bytesÅo 0x%X\n",

670 
Àngth
, 
addr
);

678 i‡(
addr
 & 1)

681 i‡((
œ°_cmd
 ='M'Ë&& (
œ°_‹ph™_≥ndög
))

683 
Àngth
++;

684 
addr
--;

685 
Àad
 = 1;

689 
œ°_‹ph™_≥ndög
 = 
Ál£
;

691 
jègBuf„r
 = 
√w
 
uch¨
[
Àngth
];

692 
	`hex2mem
(
±r
, 
jègBuf„r
+
Àad
, 
Àngth
);

693 i‡(
Àad
)

694 
jègBuf„r
[0] = 
œ°_‹ph™
;

696 i‡((
addr
 < 
DATA_SPACE_ADDR_OFFSET
Ë&& (
Àngth
 & 1))

700 
œ°_‹ph™_≥ndög
 = 
åue
;

701 
œ°_‹ph™
 = 
jègBuf„r
[
Àngth
];

702 
Àngth
--;

705 i‡(
theJègICE
->
	`jègWrôe
(
addr
, 
Àngth
, 
jègBuf„r
))

706 
	`ok
();

707 
dñëe
 [] 
jègBuf„r
;

715 
uch¨
 *
jègBuf„r
;

717 
	`îr‹
(1);

718 if((
	`hexToI¡
(&
±r
, &
addr
)) &&

719 (*(
±r
++) == ',') &&

720 (
	`hexToI¡
(&
±r
, &
Àngth
)))

722 
	`debugOut
("\nGDB: Ród %d byã†‰om 0x%X\n", 
Àngth
, 
addr
);

723 
jègBuf„r
 = 
theJègICE
->
	`jègRód
(
addr
, 
Àngth
);

724 i‡(
jègBuf„r
)

726 
	`mem2hex
(
jègBuf„r
, 
ªmcomOutBuf„r
, 
Àngth
);

727 
dñëe
 [] 
jègBuf„r
;

734 
	`ªp‹tSètus
(
SIGTRAP
);

739 
uch¨
 *
jègBuf„r
;

740 
uch¨
 
ªgBuf„r
[40];

742 
	`mem£t
(
ªgBuf„r
, 0, (regBuffer));

748 
	`debugOut
("\nGDB: (Registers)Read %d bytes from 0x%X\n",

749 0x20, 0x00 + 
DATA_SPACE_ADDR_OFFSET
);

750 
jègBuf„r
 = 
theJègICE
->
	`jègRód
(0x00 + 
DATA_SPACE_ADDR_OFFSET
, 0x20);

752 i‡(
jègBuf„r
)

755 
	`mem˝y
(
ªgBuf„r
, 
jègBuf„r
, 0x20);

757 
dñëe
 [] 
jègBuf„r
;

758 
jègBuf„r
 = 0;

762 
	`îr‹
 (1);

767 
jègBuf„r
 = 
theJègICE
->
	`jègRód
(0x5D + 
DATA_SPACE_ADDR_OFFSET
, 0x03);

769 i‡(
jègBuf„r
)

774 
ªgBuf„r
[0x20] = 
jègBuf„r
[0x02];

779 
ªgBuf„r
[0x21] = 
jègBuf„r
[0x00];

782 
ªgBuf„r
[0x22] = 
jègBuf„r
[0x01];

784 
dñëe
 [] 
jègBuf„r
;

785 
jègBuf„r
 = 0;

789 
	`îr‹
 (1);

794 
√wPC
 = 
theJègICE
->
	`gëProgømCou¡î
();

795 
ªgBuf„r
[35] = ()(
√wPC
 & 0xff);

796 
ªgBuf„r
[36] = ()((
√wPC
 & 0xff00) >> 8);

797 
ªgBuf„r
[37] = ()((
√wPC
 & 0xff0000) >> 16);

798 
ªgBuf„r
[38] = ()((
√wPC
 & 0xff000000) >> 24);

799 
	`debugOut
("PC = %x\n", 
√wPC
);

801 i‡(
√wPC
 =
PC_INVALID
)

802 
	`îr‹
(1);

804 
	`mem2hex
(
ªgBuf„r
, 
ªmcomOutBuf„r
, 32 + 1 + 2 + 4);

811 
uch¨
* 
jègBuf„r
;

813 
Àngth
 = 
	`°æí
("Ravr.io_reg");

814 i‡–
	`°∫cmp
(
±r
, "Ravr.io_ªg", 
Àngth
) == 0 )

816 
i
, 
j
, 
ªgcou¡
;

817 
gdb_io_ªg_def_ty≥
 *
io_ªg_defs
;

819 
	`debugOut
("\nGDB: (ioÑegisters) Read %d bytes from 0x%X\n",

824 
io_ªg_defs
 = 
globÆ_p_devi˚_def
->io_reg_defs;

825 i‡(
io_ªg_defs
)

828 
ªgcou¡
 = 0;

829 
io_ªg_defs
[
ªgcou¡
].
«me
)

831 
ªgcou¡
++;

834 
±r
 +
Àngth
;

835 i‡(*
±r
 == '\0')

837 
	`•rötf
(
ªmcomOutBuf„r
, "%02x", 
ªgcou¡
);

839 i‡(*
±r
 == ':')

842 
off£t
;

843 
i
 = 0;

844 
j
 = 0;

845 
cou¡
;

846 
addr
;

849 
±r
++;

850 
	`hexToI¡
(&
±r
,&
i
);

853 i‡(*
±r
++ == ',')

855 
	`hexToI¡
(&
±r
,&
j
);

860 (
j
 > 0Ë&& (
i
 < 
ªgcou¡
))

862 
cou¡
 = 0;

864 i‡((
io_ªg_defs
[
i
].
«me
 != 0x00)

865 && (
io_ªg_defs
[
i
].
Êags
 != 0x00))

868 
off£t
 = 
	`°æí
(
ªmcomOutBuf„r
);

869 
	`•rötf
(&
ªmcomOutBuf„r
[
off£t
],

870 "[-- %†--],00;", 
io_ªg_defs
[
i
].
«me
);

871 
i
++;

872 
j
--;

878 
addr
 = 
io_ªg_defs
[
i
].
ªg_addr
;

883 
cou¡
 = 0; cou¡ < 
j
; count++)

885 i‡((
io_ªg_defs
[
i
+
cou¡
].
«me
 == 0x00)

886 || (
io_ªg_defs
[
i
+
cou¡
].
Êags
 != 0x00)

887 || (
io_ªg_defs
[
i
+
cou¡
].
ªg_addr
 !
addr
))

891 
addr
++;

894 i‡(
cou¡
)

897 
jègBuf„r
 = 
theJègICE
->
	`jègRód
(
DATA_SPACE_ADDR_OFFSET
 +

898 
io_ªg_defs
[
i
].
ªg_addr
,

899 
cou¡
);

901 i‡(
jègBuf„r
)

903 
k
 = 0;

905 
cou¡
--)

907 
off£t
 = 
	`°æí
(
ªmcomOutBuf„r
);

908 
	`•rötf
(&
ªmcomOutBuf„r
[
off£t
],

910 
io_ªg_defs
[
i
].
«me
,

911 
jègBuf„r
[
k
++]);

912 
i
++;

913 
j
--;

916 
dñëe
 [] 
jègBuf„r
;

917 
jègBuf„r
 = 0;

930 
	`îr‹
(1);

931 i‡(
	`hexToI¡
(&
±r
, &
ªgno
) && *ptr++ == '=')

933 
uch¨
 
ªg
[4];

935 i‡(
ªgno
 >0 &&Ñegnÿ< 
NUMREGS
)

937 
	`hex2mem
(
±r
, 
ªg
, 1);

938 i‡(
theJègICE
->
	`jègWrôe
(
ªgno
+
DATA_SPACE_ADDR_OFFSET
, 1, 
ªg
))

939 
	`ok
();

942 i‡(
ªgno
 =
SREG
)

944 
	`hex2mem
(
±r
, 
ªg
, 1);

945 i‡(
theJègICE
->
	`jègWrôe
(0x5f+
DATA_SPACE_ADDR_OFFSET
, 1, 
ªg
))

946 
	`ok
();

948 i‡(
ªgno
 =
SP
)

950 
	`hex2mem
(
±r
, 
ªg
, 2);

951 i‡(
theJègICE
->
	`jègWrôe
(0x5d+
DATA_SPACE_ADDR_OFFSET
, 2, 
ªg
))

952 
	`ok
();

954 i‡(
ªgno
 =
PC
)

956 
	`hex2mem
(
±r
, 
ªg
, 4);

957 i‡(
theJègICE
->
	`£tProgømCou¡î
(
ªg
[0] |Ñeg[1] << 8 |

958 
ªg
[2] << 16 |Ñeg[3] << 24))

959 
	`ok
();

968 
	`îr‹
(1);

973 i‡(
	`hexToI¡
(&
±r
, &
addr
))

975 i‡(!
theJègICE
->
	`£tProgømCou¡î
(
addr
))

976 
	`gdbOut
("FailedÅo set PC");

978 
	`ªpSètus
(
	`sögÀSãp
());

992 
sig
;

994 i‡(
	`hexToI¡
(&
±r
, &
sig
))

996 i‡(
sig
 =
SIGHUP
)

998 i‡(
theJègICE
->
	`ª£tProgøm
(
Ál£
))

1000 
	`ªp‹tSètusExãnded
(
SIGTRAP
);

1009 i‡(
	`hexToI¡
(&
±r
, &
addr
))

1011 i‡(!
theJègICE
->
	`£tProgømCou¡î
(
addr
))

1012 
	`gdbOut
("FailedÅo set PC");

1014 
	`ªpSètus
(
theJègICE
->
	`jègC⁄töue
());

1020 i‡(
theJègICE
->
	`ªsumeProgøm
())

1021 
	`ok
();

1023 
	`îr‹
(1);

1027 
addög
 = 
åue
;

1029 
	`îr‹
(1);

1032 i‡(
	`hexToI¡
(&
±r
, &
i
) && *ptr++ == ',' &&

1033 
	`hexToI¡
(&
±r
, &
addr
) && *ptr++ == ',' &&

1034 
	`hexToI¡
(&
±r
, &
Àngth
))

1036 
bpTy≥
 
mode
 = 
NONE
;

1038 
i
)

1042 
mode
 = 
CODE
;

1045 
mode
 = 
WRITE_DATA
;

1048 
mode
 = 
READ_DATA
;

1051 
mode
 = 
ACCESS_DATA
;

1054 
	`debugOut
("Unknown breakpointÅype from GDB.\n");

1055 
dñëe
 
theJègICE
;

1056 
	`exô
(1);

1059 i‡(
addög
)

1061 i‡(
theJègICE
->
	`addBªakpoöt
(
addr
, 
mode
, 
Àngth
))

1062 
	`ok
();

1066 i‡(
theJègICE
->
	`dñëeBªakpoöt
(
addr
, 
mode
, 
Àngth
))

1067 
	`ok
();

1074 
œ°_cmd
 = 
cmd
;

1077 i‡(!
d⁄tSídRïly
)

1079 
	`debugOut
("->GDB: %s\n", 
ªmcomOutBuf„r
);

1080 
	`puçackë
(
ªmcomOutBuf„r
);

1082 
	}
}

	@remote.h

22 #i‚de‡
INCLUDE_REMOTE_H


23 
	#INCLUDE_REMOTE_H


	)

26 
gdbFûeDes¸ùt‹
;

29 
£tGdbFûe
(
fd
);

31 
	#GDB_CAUSE
 "gdb communiˇti⁄†Áûuª"

	)

34 
gdbCheck
(
°©us
);

38 
gëDebugCh¨
();

41 
gdbOut
(c⁄° *
fmt
, ...);

42 
vgdbOut
(c⁄° *
fmt
, 
va_li°
 
¨gs
);

45 
èlkToGdb
();

	@utils.cc

21 
	~<°dio.h
>

22 
	~<°d¨g.h
>

23 
	~<î∫o.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"av¨i˚.h
"

28 
	~"ªmŸe.h
"

30 
boﬁ
 
	gdebugMode
 = 
Ál£
;

32 
	$vdebugOut
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

34 i‡(
debugMode
)

36 ()
	`vÂrötf
(
°dîr
, 
fmt
, 
¨gs
);

38 
	}
}

40 
	$debugOut
(c⁄° *
fmt
, ...)

42 
va_li°
 
¨gs
;

43 
	`va_°¨t
(
¨gs
, 
fmt
);

44 
	`vdebugOut
(
fmt
, 
¨gs
);

45 
	`va_íd
(
¨gs
);

46 
	}
}

48 
	$v°©usOut
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

50 
	`v¥ötf
(
fmt
, 
¨gs
);

51 
	}
}

53 
	$°©usOut
(c⁄° *
fmt
, ...)

55 
va_li°
 
¨gs
;

56 
	`va_°¨t
(
¨gs
, 
fmt
);

57 
	`v°©usOut
(
fmt
, 
¨gs
);

58 
	`va_íd
(
¨gs
);

59 
	}
}

61 
	$°©usFlush
()

63 
	`fÊush
(
°dout
);

64 
	}
}

66 
	$check_1
(
boﬁ
 
¥ötUnixEº‹
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

68 
í
 = 
î∫o
;

69 #ifde‡
va_c›y


70 
va_li°
 
c›y_¨gs
;

72 
	`va_c›y
(
c›y_¨gs
, 
¨gs
);

73 
	`v°©usOut
(
fmt
, 
c›y_¨gs
);

75 
	`v°©usOut
(
fmt
, 
¨gs
);

77 i‡(
¥ötUnixEº‹
)

78 
	`°©usOut
(": %s", 
	`°ªº‹
(
í
));

79 
	`°©usOut
("\n");

81 
	`vgdbOut
(
fmt
, 
¨gs
);

82 i‡(
¥ötUnixEº‹
)

83 
	`gdbOut
(": %s", 
	`°ªº‹
(
í
));

84 
	`gdbOut
("\n");

86 
	`exô
(
EXIT_FAILURE
);

87 
	}
}

89 
	$check
(
boﬁ
 
ok
, c⁄° *
fmt
, ...)

91 
va_li°
 
¨gs
;

92 
	`va_°¨t
(
¨gs
, 
fmt
);

93 i‡(!
ok
)

94 
	`check_1
(
Ál£
, 
fmt
, 
¨gs
);

95 
	`va_íd
(
¨gs
);

96 
	}
}

98 
	$unixCheck
(
°©us
, c⁄° *
fmt
, ...)

100 
va_li°
 
¨gs
;

101 
	`va_°¨t
(
¨gs
, 
fmt
);

102 i‡(
°©us
 < 0)

103 
	`check_1
(
åue
, 
fmt
, 
¨gs
);

104 
	`va_íd
(
¨gs
);

105 
	}
}

	@/usr/include/arpa/inet.h

84 #i‚de‡
_INET_H_


85 
	#_INET_H_


	)

89 
	~<_ty≥s.h
>

90 
	~<°döt.h
>

91 
	~<machöe/ídün.h
>

92 
	~<sys/_ídün.h
>

93 
	~<√töë/ö.h
>

95 
__BEGIN_DECLS


97 
ö_addr_t
 
öë_addr
(const *);

98 *
öë_¡ﬂ
(
ö_addr
);

99 c⁄° *
öë_¡›
(, c⁄° *, *, 
sockÀn_t
);

100 
öë_±⁄
(, const *, *);

101 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

102 
ascii2addr
(, const *, *);

103 *
addr2ascii
(, const *, , *);

104 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

105 
ö_addr_t
 
öë_ aof
(
ö_addr
);

106 
ö_addr
 
öë_makóddr
(
ö_addr_t
, in_addr_t);

107 
ö_addr_t
 
öë_√tof
(
ö_addr
);

108 
ö_addr_t
 
öë_√tw‹k
(const *);

109 *
öë_√t_¡›
(, c⁄° *, , *, 
__d¨wö_size_t
);

110 
öë_√t_±⁄
(, c⁄° *, *, 
__d¨wö_size_t
);

111 *
öë_√è
(
ö_addr_t
, *, 
__d¨wö_size_t
);

112 
öë_nßp_addr
(c⁄° *, *, 
maxÀn
);

113 *
öë_nßp_¡ﬂ
(, c⁄° *, *
ascii
);

116 
	g__END_DECLS


	@/usr/include/assert.h

42 
	~<sys/cdefs.h
>

43 #ifde‡
__˝lu•lus


44 
	~<°dlib.h
>

52 #unde‡
as£π


53 #unde‡
__as£π


55 #ifde‡
NDEBUG


56 
	#as£π
(
e
Ë(()0)

	)

59 #i‚de‡
__GNUC__


61 
	g__BEGIN_DECLS


62 #i‚de‡
__˝lu•lus


63 
	$ab‹t
(Ë
__dód2
;

65 
	`¥ötf
(c⁄° * 
__ª°ri˘
, ...);

66 
__END_DECLS


68 
	#as£π
(
e
) \

69 ((Ë((
e
Ë? 0 : 
	`__as£π
 (#e, 
__FILE__
, 
__LINE__
)))

	)

70 
	#__as£π
(
e
, 
fûe
, 
löe
) \

71 (()
	`¥ötf
 ("%s:%u: faûedás£πi⁄ `%s'\n", 
fûe
, 
löe
, 
e
), 
	`ab‹t
())

	)

75 
__BEGIN_DECLS


76 
	$__as£π_πn
(c⁄° *, c⁄° *, , c⁄° *Ë
__dód2
;

77 
	$__ïrötf
(c⁄° *, c⁄° *, , c⁄° *Ë
__dód2
;

78 
__END_DECLS


80 
	#__as£π
(
e
, 
fûe
, 
löe
) \

81 
	`__ïrötf
 ("%s:%u: faûedás£πi⁄ `%s'\n", 
fûe
, 
löe
, 
e
)

	)

83 #i‡
__DARWIN_UNIX03


84 
	#as£π
(
e
) \

85 (
	`__buûtö_ex≥˘
(!(
e
), 0Ë? 
	`__as£π_πn
(
__func__
, 
__FILE__
, 
__LINE__
, #eË: ()0)

	)

87 
	#as£π
(
e
) \

88 (
	`__buûtö_ex≥˘
(!(
e
), 0Ë? 
	`__as£π
 (#e, 
__FILE__
, 
__LINE__
Ë: ()0)

	)

	@/usr/include/ctype.h

66 #i‚def 
_CTYPE_H_


67 
	#_CTYPE_H_


	)

69 
	~<ru√ty≥.h
>

71 
	#_CTYPE_A
 0x00000100L

	)

72 
	#_CTYPE_C
 0x00000200L

	)

73 
	#_CTYPE_D
 0x00000400L

	)

74 
	#_CTYPE_G
 0x00000800L

	)

75 
	#_CTYPE_L
 0x00001000L

	)

76 
	#_CTYPE_P
 0x00002000L

	)

77 
	#_CTYPE_S
 0x00004000L

	)

78 
	#_CTYPE_U
 0x00008000L

	)

79 
	#_CTYPE_X
 0x00010000L

	)

80 
	#_CTYPE_B
 0x00020000L

	)

81 
	#_CTYPE_R
 0x00040000L

	)

82 
	#_CTYPE_I
 0x00080000L

	)

83 
	#_CTYPE_T
 0x00100000L

	)

84 
	#_CTYPE_Q
 0x00200000L

	)

85 
	#_CTYPE_SW0
 0x20000000L

	)

86 
	#_CTYPE_SW1
 0x40000000L

	)

87 
	#_CTYPE_SW2
 0x80000000L

	)

88 
	#_CTYPE_SW3
 0xc0000000L

	)

89 
	#_CTYPE_SWM
 0xe0000000L

	)

90 
	#_CTYPE_SWS
 30

	)

92 #ifde‡
_NONSTD_SOURCE


96 
	#_A
 
_CTYPE_A


	)

97 
	#_C
 
_CTYPE_C


	)

98 
	#_D
 
_CTYPE_D


	)

99 
	#_G
 
_CTYPE_G


	)

100 
	#_L
 
_CTYPE_L


	)

101 
	#_P
 
_CTYPE_P


	)

102 
	#_S
 
_CTYPE_S


	)

103 
	#_U
 
_CTYPE_U


	)

104 
	#_X
 
_CTYPE_X


	)

105 
	#_B
 
_CTYPE_B


	)

106 
	#_R
 
_CTYPE_R


	)

107 
	#_I
 
_CTYPE_I


	)

108 
	#_T
 
_CTYPE_T


	)

109 
	#_Q
 
_CTYPE_Q


	)

110 
	#_SW0
 
_CTYPE_SW0


	)

111 
	#_SW1
 
_CTYPE_SW1


	)

112 
	#_SW2
 
_CTYPE_SW2


	)

113 
	#_SW3
 
_CTYPE_SW3


	)

120 #ifde‡
_EXTERNALIZE_CTYPE_INLINES_


121 
	#_USE_CTYPE_INLINE_


	)

122 
	#__DARWIN_CTYPE_°©ic_ölöe


	)

124 
	#__DARWIN_CTYPE_°©ic_ölöe
 
__ölöe


	)

131 #ifde‡
_EXTERNALIZE_CTYPE_INLINES_TOP_


132 
	#_USE_CTYPE_INLINE_


	)

133 
	#__DARWIN_CTYPE_TOP_°©ic_ölöe


	)

135 
	#__DARWIN_CTYPE_TOP_°©ic_ölöe
 
__ölöe


	)

141 #i‡!
deföed
(
_DONT_USE_CTYPE_INLINE_
) && \

142 (
deföed
(
_USE_CTYPE_INLINE_
Ë|| deföed(
__GNUC__
Ë|| 
	$deföed
(
__˝lu•lus
))

145 
__BEGIN_DECLS


146 
	`___ru√ty≥
(
__d¨wö_˘_ru√_t
);

147 
__d¨wö_˘_ru√_t
 
	`___tﬁowî
(__darwin_ct_rune_t);

148 
__d¨wö_˘_ru√_t
 
	`___touµî
(__darwin_ct_rune_t);

149 
__END_DECLS


151 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

152 
	$ißscii
(
_c
)

154  ((
_c
 & ~0x7F) == 0);

155 
	}
}

157 #ifde‡
USE_ASCII


158 
__DARWIN_CTYPE_°©ic_ölöe
 

159 
	$__maskru√
(
__d¨wö_˘_ru√_t
 
_c
, 
_f
)

161  
_DeÁu…Ru√LoˇÀ
.
__ru√ty≥
[
_c
 & 0xff] & 
_f
;

162 
	}
}

164 
__BEGIN_DECLS


165 
__maskru√
(
__d¨wö_˘_ru√_t
, );

166 
	g__END_DECLS


169 
__DARWIN_CTYPE_°©ic_ölöe
 

170 
	$__i°y≥
(
__d¨wö_˘_ru√_t
 
_c
, 
_f
)

172 #ifde‡
USE_ASCII


173  !!(
	`__maskru√
(
_c
, 
_f
));

175  (
	`ißscii
(
_c
Ë? !!(
_DeÁu…Ru√LoˇÀ
.
__ru√ty≥
[_c] & 
_f
)

176 : !!
	`__maskru√
(
_c
, 
_f
));

178 
	}
}

180 
__DARWIN_CTYPE_°©ic_ölöe
 
__d¨wö_˘_ru√_t


181 
	$__is˘y≥
(
__d¨wö_˘_ru√_t
 
_c
, 
_f
)

183 #ifde‡
USE_ASCII


184  !!(
	`__maskru√
(
_c
, 
_f
));

186  (
_c
 < 0 || _¯>
_CACHED_RUNES
) ? 0 :

187 !!(
_DeÁu…Ru√LoˇÀ
.
__ru√ty≥
[
_c
] & 
_f
);

189 
	}
}

191 #ifde‡
USE_ASCII


192 
__DARWIN_CTYPE_°©ic_ölöe
 
__d¨wö_˘_ru√_t


193 
	$__touµî
(
__d¨wö_˘_ru√_t
 
_c
)

195  
_DeÁu…Ru√LoˇÀ
.
__m≠uµî
[
_c
 & 0xff];

196 
	}
}

198 
__DARWIN_CTYPE_°©ic_ölöe
 
__d¨wö_˘_ru√_t


199 
	$__tﬁowî
(
__d¨wö_˘_ru√_t
 
_c
)

201  
_DeÁu…Ru√LoˇÀ
.
__m≠lowî
[
_c
 & 0xff];

202 
	}
}

204 
__BEGIN_DECLS


205 
__d¨wö_˘_ru√_t
 
__touµî
(__darwin_ct_rune_t);

206 
__d¨wö_˘_ru√_t
 
__tﬁowî
(__darwin_ct_rune_t);

207 
	g__END_DECLS


210 
__DARWIN_CTYPE_°©ic_ölöe
 

211 
	$__wcwidth
(
__d¨wö_˘_ru√_t
 
_c
)

213 
_x
;

215 i‡(
_c
 == 0)

217 
_x
 = ()
	`__maskru√
(
_c
, 
_CTYPE_SWM
|
_CTYPE_R
);

218 i‡((
_x
 & 
_CTYPE_SWM
) != 0)

219  ((
_x
 & 
_CTYPE_SWM
Ë>> 
_CTYPE_SWS
);

220  ((
_x
 & 
_CTYPE_R
) != 0 ? 1 : -1);

221 
	}
}

223 #i‚de‡
_EXTERNALIZE_CTYPE_INLINES_


225 
	#_tﬁowî
(
c
Ë
	`__tﬁowî
(c)

	)

226 
	#_touµî
(
c
Ë
	`__touµî
(c)

	)

228 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

229 
	$iß um
(
_c
)

231  (
	`__i°y≥
(
_c
, 
_CTYPE_A
|
_CTYPE_D
));

232 
	}
}

234 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

235 
	$ißÕha
(
_c
)

237  (
	`__i°y≥
(
_c
, 
_CTYPE_A
));

238 
	}
}

240 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

241 
	$isbœnk
(
_c
)

243  (
	`__i°y≥
(
_c
, 
_CTYPE_B
));

244 
	}
}

246 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

247 
	$is˙ål
(
_c
)

249  (
	`__i°y≥
(
_c
, 
_CTYPE_C
));

250 
	}
}

253 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

254 
	$isdigô
(
_c
)

256  (
	`__is˘y≥
(
_c
, 
_CTYPE_D
));

257 
	}
}

259 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

260 
	$isgøph
(
_c
)

262  (
	`__i°y≥
(
_c
, 
_CTYPE_G
));

263 
	}
}

265 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

266 
	$i¶owî
(
_c
)

268  (
	`__i°y≥
(
_c
, 
_CTYPE_L
));

269 
	}
}

271 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

272 
	$i•röt
(
_c
)

274  (
	`__i°y≥
(
_c
, 
_CTYPE_R
));

275 
	}
}

277 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

278 
	$i•un˘
(
_c
)

280  (
	`__i°y≥
(
_c
, 
_CTYPE_P
));

281 
	}
}

283 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

284 
	$is•a˚
(
_c
)

286  (
	`__i°y≥
(
_c
, 
_CTYPE_S
));

287 
	}
}

289 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

290 
	$isuµî
(
_c
)

292  (
	`__i°y≥
(
_c
, 
_CTYPE_U
));

293 
	}
}

296 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

297 
	$isxdigô
(
_c
)

299  (
	`__is˘y≥
(
_c
, 
_CTYPE_X
));

300 
	}
}

302 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

303 
	$tﬂscii
(
_c
)

305  (
_c
 & 0x7F);

306 
	}
}

308 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

309 
	$tﬁowî
(
_c
)

311  (
	`__tﬁowî
(
_c
));

312 
	}
}

314 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

315 
	$touµî
(
_c
)

317  (
	`__touµî
(
_c
));

318 
	}
}

320 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

321 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

322 
	$digôtoöt
(
_c
)

324  (
	`__maskru√
(
_c
, 0x0F));

325 
	}
}

327 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

328 
	$ishexnumbî
(
_c
)

330  (
	`__i°y≥
(
_c
, 
_CTYPE_X
));

331 
	}
}

333 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

334 
	$isideogøm
(
_c
)

336  (
	`__i°y≥
(
_c
, 
_CTYPE_I
));

337 
	}
}

339 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

340 
	$i¢umbî
(
_c
)

342  (
	`__i°y≥
(
_c
, 
_CTYPE_D
));

343 
	}
}

345 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

346 
	$i•h⁄ogøm
(
_c
)

348  (
	`__i°y≥
(
_c
, 
_CTYPE_Q
));

349 
	}
}

351 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

352 
	$i§u√
(
_c
)

354  (
	`__i°y≥
(
_c
, 0xFFFFFFF0L));

355 
	}
}

357 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

358 
	$is•ecül
(
_c
)

360  (
	`__i°y≥
(
_c
, 
_CTYPE_T
));

361 
	}
}

367 
__BEGIN_DECLS


368 
iß um
();

369 
ißÕha
();

370 
isbœnk
();

371 
is˙ål
();

372 
isdigô
();

373 
isgøph
();

374 
i¶owî
();

375 
i•röt
();

376 
i•un˘
();

377 
is•a˚
();

378 
isuµî
();

379 
isxdigô
();

380 
tﬁowî
();

381 
touµî
();

382 
ißscii
();

383 
tﬂscii
();

385 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

386 
_tﬁowî
();

387 
_touµî
();

388 
digôtoöt
();

389 
ishexnumbî
();

390 
isideogøm
();

391 
i¢umbî
();

392 
i•h⁄ogøm
();

393 
i§u√
();

394 
is•ecül
();

396 
	g__END_DECLS


400 #ifde‡
_USE_EXTENDED_LOCALES_


401 
	~<xloˇÀ/_˘y≥.h
>

	@/usr/include/errno.h

23 
	~<sys/î∫o.h
>

	@/usr/include/fcntl.h

23 
	~<sys/f˙é.h
>

	@/usr/include/math.h

22 #i‚de‡
__MATH_H__


23 
	#__MATH_H__


	)

25 #i‡(
deföed
(
__µc__
Ë|| deföed(
__µc64__
))

26 
	~"¨chôe˘uª/µc/m©h.h
"

27 #ñi‡(
deföed
 (
__i386__
Ë|| deföed–
__x86_64__
 ))

28 
	~"¨chôe˘uª/i386/m©h.h
"

29 #ñi‡
deföed
(
__¨m__
)

30 
	~"¨chôe˘uª/¨m/m©h.h
"

32 #îr‹ 
Unknown
 
¨chôe˘uª


	@/usr/include/netdb.h

82 #i‚de‡
_NETDB_H_


83 
	#_NETDB_H_


	)

85 
	~<_ty≥s.h
>

86 
	~<°döt.h
>

87 
	~<√töë/ö.h
>

89 #i‚def 
_SIZE_T


90 
	#_SIZE_T


	)

91 
__d¨wö_size_t
 
	tsize_t
;

94 #i‚de‡
_SOCKLEN_T


95 
	#_SOCKLEN_T


	)

96 
__d¨wö_sockÀn_t
 
	tsockÀn_t
;

99 #i‚de‡
_PATH_HEQUIV


100 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

102 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

103 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

104 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

105 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

107 
h_î∫o
;

109 #i‚de‡
IPPORT_RESERVED


110 
	#IPPORT_RESERVED
 
__DARWIN_IPPORT_RESERVED


	)

118 
	sho°ít
 {

119 *
	mh_«me
;

120 **
	mh_Æü£s
;

121 
	mh_addπy≥
;

122 
	mh_Àngth
;

123 **
	mh_addr_li°
;

124 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

125 
	#h_addr
 
h_addr_li°
[0]

	)

133 
	s√ã¡
 {

134 *
	mn_«me
;

135 **
	mn_Æü£s
;

136 
	mn_addπy≥
;

137 
uöt32_t
 
	mn_√t
;

140 
	s£rvít
 {

141 *
	ms_«me
;

142 **
	ms_Æü£s
;

143 
	ms_p‹t
;

144 *
	ms_¥Ÿo
;

147 
	s¥Ÿ€¡
 {

148 *
	mp_«me
;

149 **
	mp_Æü£s
;

150 
	mp_¥Ÿo
;

153 
	saddröfo
 {

154 
	mai_Êags
;

155 
	mai_Ámûy
;

156 
	mai_sockty≥
;

157 
	mai_¥Ÿocﬁ
;

158 
sockÀn_t
 
	mai_addæí
;

159 *
	mai_ˇn⁄«me
;

160 
sockaddr
 *
	mai_addr
;

161 
addröfo
 *
	mai_√xt
;

164 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

165 
	sΩ˚¡
 {

166 *
	mr_«me
;

167 **
	mr_Æü£s
;

168 
	mr_numbî
;

176 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

177 
	#NETDB_INTERNAL
 -1

	)

178 
	#NETDB_SUCCESS
 0

	)

180 
	#HOST_NOT_FOUND
 1

	)

181 
	#TRY_AGAIN
 2

	)

182 
	#NO_RECOVERY
 3

	)

183 
	#NO_DATA
 4

	)

184 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

185 
	#NO_ADDRESS
 
NO_DATA


	)

190 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

191 
	#EAI_ADDRFAMILY
 1

	)

193 
	#EAI_AGAIN
 2

	)

194 
	#EAI_BADFLAGS
 3

	)

195 
	#EAI_FAIL
 4

	)

196 
	#EAI_FAMILY
 5

	)

197 
	#EAI_MEMORY
 6

	)

198 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

199 
	#EAI_NODATA
 7

	)

201 
	#EAI_NONAME
 8

	)

202 
	#EAI_SERVICE
 9

	)

203 
	#EAI_SOCKTYPE
 10

	)

204 
	#EAI_SYSTEM
 11

	)

205 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

206 
	#EAI_BADHINTS
 12

	)

207 
	#EAI_PROTOCOL
 13

	)

209 
	#EAI_OVERFLOW
 14

	)

210 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

211 
	#EAI_MAX
 15

	)

217 
	#AI_PASSIVE
 0x00000001

	)

218 
	#AI_CANONNAME
 0x00000002

	)

219 
	#AI_NUMERICHOST
 0x00000004

	)

220 
	#AI_NUMERICSERV
 0x00001000

	)

222 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

223 
	#AI_MASK
 \

224 (
AI_PASSIVE
 | 
AI_CANONNAME
 | 
AI_NUMERICHOST
 | 
AI_NUMERICSERV
 | \

225 
AI_ADDRCONFIG
)

	)

228 
	#AI_ALL
 0x00000100

	)

229 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

230 
	#AI_V4MAPPED_CFG
 0x00000200

	)

232 
	#AI_ADDRCONFIG
 0x00000400

	)

233 
	#AI_V4MAPPED
 0x00000800

	)

235 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

236 
	#AI_DEFAULT
 (
AI_V4MAPPED_CFG
 | 
AI_ADDRCONFIG
)

	)

242 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

243 
	#NI_MAXHOST
 1025

	)

244 
	#NI_MAXSERV
 32

	)

249 
	#NI_NOFQDN
 0x00000001

	)

250 
	#NI_NUMERICHOST
 0x00000002

	)

251 
	#NI_NAMEREQD
 0x00000004

	)

252 
	#NI_NUMERICSERV
 0x00000008

	)

253 
	#NI_DGRAM
 0x00000010

	)

254 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

255 
	#NI_WITHSCOPEID
 0x00000020

	)

260 
	#SCOPE_DELIMITER
 '%'

	)

263 
__BEGIN_DECLS


265 
ídho°ít
();

266 
íd√ã¡
();

267 
íd¥Ÿ€¡
();

268 
íd£rvít
();

270 
‰ìaddröfo
(
addröfo
 *);

271 c⁄° *
gai_°ªº‹
();

272 
gëaddröfo
(c⁄° * 
__ª°ri˘
, const * __restrict,

273 c⁄° 
addröfo
 * 
__ª°ri˘
,

274 
addröfo
 ** 
__ª°ri˘
);

275 
ho°ít
 *
gëho°byaddr
(c⁄° *, 
sockÀn_t
, );

276 
ho°ít
 *
gëho°by«me
(const *);

277 
ho°ít
 *
gëho°ít
();

278 
gë«meöfo
(c⁄° 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
,

279 * 
__ª°ri˘
, 
sockÀn_t
, * __restrict,

280 
sockÀn_t
, );

281 
√ã¡
 *
gë√tbyaddr
(
uöt32_t
, );

282 
√ã¡
 *
gë√tby«me
(const *);

283 
√ã¡
 *
gë√ã¡
();

284 
¥Ÿ€¡
 *
gë¥Ÿoby«me
(const *);

285 
¥Ÿ€¡
 *
gë¥Ÿobynumbî
();

286 
¥Ÿ€¡
 *
gë¥Ÿ€¡
();

287 
£rvít
 *
gë£rvby«me
(const *, const *);

288 
£rvít
 *
gë£rvbyp‹t
(, const *);

289 
£rvít
 *
gë£rvít
();

290 
£tho°ít
();

292 
£äëít
();

293 
£çrŸ€¡
();

294 
£t£rvít
();

296 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

297 
‰ìho°ít
(
ho°ít
 *);

298 
ho°ít
 *
gëho°by«me2
(const *, );

299 
ho°ít
 *
gëùnodebyaddr
(c⁄° *, 
size_t
, , *);

300 
ho°ít
 *
gëùnodeby«me
(const *, , , *);

301 
Ω˚¡
 *
gëΩcby«me
(c⁄° *
«me
);

302 #ifde‡
__LP64__


303 
Ω˚¡
 *
gëΩcbynumbî
(
numbî
);

305 
Ω˚¡
 *
gëΩcbynumbî
(
numbî
);

307 
Ω˚¡
 *
gëΩ˚¡
();

308 
£åp˚¡
(
°ay›í
);

309 
ídΩ˚¡
();

310 
hîr‹
(const *);

311 c⁄° *
h°ªº‹
();

312 
ö√tgr
(const *, const *, const *, const *);

313 
gë√tgª¡
(**, **, **);

314 
íd√tgª¡
();

315 
£äëgª¡
(const *);

318 
	g__END_DECLS


	@/usr/include/netinet/in.h

64 #i‚de‡
_NETINET_IN_H_


65 
	#_NETINET_IN_H_


	)

66 
	~<sys/≠∂ópi›ts.h
>

67 
	~<sys/_ty≥s.h
>

68 
	~<°döt.h
>

70 #i‚de‡
_IN_ADDR_T


71 
	#_IN_ADDR_T


	)

72 
__uöt32_t
 
	tö_addr_t
;

75 #i‚de‡
_IN_PORT_T


76 
	#_IN_PORT_T


	)

77 
__uöt16_t
 
	tö_p‹t_t
;

85 
	~<sys/sockë.h
>

90 
	~<machöe/ídün.h
>

91 
	~<sys/_ídün.h
>

101 
	#IPPROTO_IP
 0

	)

102 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

103 
	#IPPROTO_HOPOPTS
 0

	)

105 
	#IPPROTO_ICMP
 1

	)

106 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

107 
	#IPPROTO_IGMP
 2

	)

108 
	#IPPROTO_GGP
 3

	)

109 
	#IPPROTO_IPV4
 4

	)

110 
	#IPPROTO_IPIP
 
IPPROTO_IPV4


	)

112 
	#IPPROTO_TCP
 6

	)

113 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

114 
	#IPPROTO_ST
 7

	)

115 
	#IPPROTO_EGP
 8

	)

116 
	#IPPROTO_PIGP
 9

	)

117 
	#IPPROTO_RCCMON
 10

	)

118 
	#IPPROTO_NVPII
 11

	)

119 
	#IPPROTO_PUP
 12

	)

120 
	#IPPROTO_ARGUS
 13

	)

121 
	#IPPROTO_EMCON
 14

	)

122 
	#IPPROTO_XNET
 15

	)

123 
	#IPPROTO_CHAOS
 16

	)

125 
	#IPPROTO_UDP
 17

	)

126 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

127 
	#IPPROTO_MUX
 18

	)

128 
	#IPPROTO_MEAS
 19

	)

129 
	#IPPROTO_HMP
 20

	)

130 
	#IPPROTO_PRM
 21

	)

131 
	#IPPROTO_IDP
 22

	)

132 
	#IPPROTO_TRUNK1
 23

	)

133 
	#IPPROTO_TRUNK2
 24

	)

134 
	#IPPROTO_LEAF1
 25

	)

135 
	#IPPROTO_LEAF2
 26

	)

136 
	#IPPROTO_RDP
 27

	)

137 
	#IPPROTO_IRTP
 28

	)

138 
	#IPPROTO_TP
 29

	)

139 
	#IPPROTO_BLT
 30

	)

140 
	#IPPROTO_NSP
 31

	)

141 
	#IPPROTO_INP
 32

	)

142 
	#IPPROTO_SEP
 33

	)

143 
	#IPPROTO_3PC
 34

	)

144 
	#IPPROTO_IDPR
 35

	)

145 
	#IPPROTO_XTP
 36

	)

146 
	#IPPROTO_DDP
 37

	)

147 
	#IPPROTO_CMTP
 38

	)

148 
	#IPPROTO_TPXX
 39

	)

149 
	#IPPROTO_IL
 40

	)

151 
	#IPPROTO_IPV6
 41

	)

152 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

153 
	#IPPROTO_SDRP
 42

	)

154 
	#IPPROTO_ROUTING
 43

	)

155 
	#IPPROTO_FRAGMENT
 44

	)

156 
	#IPPROTO_IDRP
 45

	)

157 
	#IPPROTO_RSVP
 46

	)

158 
	#IPPROTO_GRE
 47

	)

159 
	#IPPROTO_MHRP
 48

	)

160 
	#IPPROTO_BHA
 49

	)

161 
	#IPPROTO_ESP
 50

	)

162 
	#IPPROTO_AH
 51

	)

163 
	#IPPROTO_INLSP
 52

	)

164 
	#IPPROTO_SWIPE
 53

	)

165 
	#IPPROTO_NHRP
 54

	)

167 
	#IPPROTO_ICMPV6
 58

	)

168 
	#IPPROTO_NONE
 59

	)

169 
	#IPPROTO_DSTOPTS
 60

	)

170 
	#IPPROTO_AHIP
 61

	)

171 
	#IPPROTO_CFTP
 62

	)

172 
	#IPPROTO_HELLO
 63

	)

173 
	#IPPROTO_SATEXPAK
 64

	)

174 
	#IPPROTO_KRYPTOLAN
 65

	)

175 
	#IPPROTO_RVD
 66

	)

176 
	#IPPROTO_IPPC
 67

	)

177 
	#IPPROTO_ADFS
 68

	)

178 
	#IPPROTO_SATMON
 69

	)

179 
	#IPPROTO_VISA
 70

	)

180 
	#IPPROTO_IPCV
 71

	)

181 
	#IPPROTO_CPNX
 72

	)

182 
	#IPPROTO_CPHB
 73

	)

183 
	#IPPROTO_WSN
 74

	)

184 
	#IPPROTO_PVP
 75

	)

185 
	#IPPROTO_BRSATMON
 76

	)

186 
	#IPPROTO_ND
 77

	)

187 
	#IPPROTO_WBMON
 78

	)

188 
	#IPPROTO_WBEXPAK
 79

	)

189 
	#IPPROTO_EON
 80

	)

190 
	#IPPROTO_VMTP
 81

	)

191 
	#IPPROTO_SVMTP
 82

	)

192 
	#IPPROTO_VINES
 83

	)

193 
	#IPPROTO_TTP
 84

	)

194 
	#IPPROTO_IGP
 85

	)

195 
	#IPPROTO_DGP
 86

	)

196 
	#IPPROTO_TCF
 87

	)

197 
	#IPPROTO_IGRP
 88

	)

198 
	#IPPROTO_OSPFIGP
 89

	)

199 
	#IPPROTO_SRPC
 90

	)

200 
	#IPPROTO_LARP
 91

	)

201 
	#IPPROTO_MTP
 92

	)

202 
	#IPPROTO_AX25
 93

	)

203 
	#IPPROTO_IPEIP
 94

	)

204 
	#IPPROTO_MICP
 95

	)

205 
	#IPPROTO_SCCSP
 96

	)

206 
	#IPPROTO_ETHERIP
 97

	)

207 
	#IPPROTO_ENCAP
 98

	)

208 
	#IPPROTO_APES
 99

	)

209 
	#IPPROTO_GMTP
 100

	)

210 
	#IPPROTO_IPCOMP
 108

	)

212 
	#IPPROTO_PIM
 103

	)

213 
	#IPPROTO_PGM
 113

	)

216 
	#IPPROTO_DIVERT
 254

	)

218 
	#IPPROTO_RAW
 255

	)

220 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

221 
	#IPPROTO_MAX
 256

	)

224 
	#IPPROTO_DONE
 257

	)

272 
	#__DARWIN_IPPORT_RESERVED
 1024

	)

274 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

281 #i‚de‡
IPPORT_RESERVED


282 
	#IPPORT_RESERVED
 
__DARWIN_IPPORT_RESERVED


	)

284 
	#IPPORT_USERRESERVED
 5000

	)

289 
	#IPPORT_HIFIRSTAUTO
 49152

	)

290 
	#IPPORT_HILASTAUTO
 65535

	)

298 
	#IPPORT_RESERVEDSTART
 600

	)

304 
	sö_addr
 {

305 
ö_addr_t
 
	ms_addr
;

313 
	#INADDR_ANY
 (
u_öt32_t
)0x00000000

	)

314 
	#INADDR_BROADCAST
 (
u_öt32_t
)0xfffffff‡

	)

316 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

317 
	#IN_CLASSA
(
i
Ë(((
u_öt32_t
)(iË& 0x80000000Ë=0)

	)

318 
	#IN_CLASSA_NET
 0xff000000

	)

319 
	#IN_CLASSA_NSHIFT
 24

	)

320 
	#IN_CLASSA_HOST
 0x00ffffff

	)

321 
	#IN_CLASSA_MAX
 128

	)

323 
	#IN_CLASSB
(
i
Ë(((
u_öt32_t
)(iË& 0xc0000000Ë=0x80000000)

	)

324 
	#IN_CLASSB_NET
 0xffff0000

	)

325 
	#IN_CLASSB_NSHIFT
 16

	)

326 
	#IN_CLASSB_HOST
 0x0000ffff

	)

327 
	#IN_CLASSB_MAX
 65536

	)

329 
	#IN_CLASSC
(
i
Ë(((
u_öt32_t
)(iË& 0xe0000000Ë=0xc0000000)

	)

330 
	#IN_CLASSC_NET
 0xffffff00

	)

331 
	#IN_CLASSC_NSHIFT
 8

	)

332 
	#IN_CLASSC_HOST
 0x000000ff

	)

334 
	#IN_CLASSD
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xe0000000)

	)

335 
	#IN_CLASSD_NET
 0xf0000000

	)

336 
	#IN_CLASSD_NSHIFT
 28

	)

337 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

338 
	#IN_MULTICAST
(
i
Ë
	`IN_CLASSD
(i)

	)

340 
	#IN_EXPERIMENTAL
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

341 
	#IN_BADCLASS
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

343 
	#INADDR_LOOPBACK
 (
u_öt32_t
)0x7f000001

	)

344 
	#INADDR_NONE
 0xfffffff‡

	)

346 
	#INADDR_UNSPEC_GROUP
 (
u_öt32_t
)0xe0000000

	)

347 
	#INADDR_ALLHOSTS_GROUP
 (
u_öt32_t
)0xe0000001

	)

348 
	#INADDR_ALLRTRS_GROUP
 (
u_öt32_t
)0xe0000002

	)

349 
	#INADDR_MAX_LOCAL_GROUP
 (
u_öt32_t
)0xe00000f‡

	)

351 #ifde‡
__APPLE__


352 
	#IN_LINKLOCALNETNUM
 (
u_öt32_t
)0xA9FE0000

	)

353 
	#IN_LINKLOCAL
(
i
Ë(((
u_öt32_t
)(iË& 
IN_CLASSB_NET
Ë=
IN_LINKLOCALNETNUM
)

	)

356 
	#IN_LOOPBACKNET
 127

	)

362 
	ssockaddr_ö
 {

363 
__uöt8_t
 
	msö_Àn
;

364 
ß_Ámûy_t
 
	msö_Ámûy
;

365 
ö_p‹t_t
 
	msö_p‹t
;

366 
ö_addr
 
	msö_addr
;

367 
	msö_zîo
[8];

370 
	#INET_ADDRSTRLEN
 16

	)

372 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

380 
	sù_›ts
 {

381 
ö_addr
 
	mù_d°
;

382 
	mù_›ts
[40];

389 
	#IP_OPTIONS
 1

	)

390 
	#IP_HDRINCL
 2

	)

391 
	#IP_TOS
 3

	)

392 
	#IP_TTL
 4

	)

393 
	#IP_RECVOPTS
 5

	)

394 
	#IP_RECVRETOPTS
 6

	)

395 
	#IP_RECVDSTADDR
 7

	)

396 
	#IP_RETOPTS
 8

	)

397 
	#IP_MULTICAST_IF
 9

	)

398 
	#IP_MULTICAST_TTL
 10

	)

399 
	#IP_MULTICAST_LOOP
 11

	)

400 
	#IP_ADD_MEMBERSHIP
 12

	)

401 
	#IP_DROP_MEMBERSHIP
 13

	)

402 
	#IP_MULTICAST_VIF
 14

	)

403 
	#IP_RSVP_ON
 15

	)

404 
	#IP_RSVP_OFF
 16

	)

405 
	#IP_RSVP_VIF_ON
 17

	)

406 
	#IP_RSVP_VIF_OFF
 18

	)

407 
	#IP_PORTRANGE
 19

	)

408 
	#IP_RECVIF
 20

	)

410 
	#IP_IPSEC_POLICY
 21

	)

411 
	#IP_FAITH
 22

	)

412 #ifde‡
__APPLE__


413 
	#IP_STRIPHDR
 23

	)

415 
	#IP_RECVTTL
 24

	)

416 
	#IP_BOUND_IF
 25

	)

419 
	#IP_FW_ADD
 40

	)

420 
	#IP_FW_DEL
 41

	)

421 
	#IP_FW_FLUSH
 42

	)

422 
	#IP_FW_ZERO
 43

	)

423 
	#IP_FW_GET
 44

	)

424 
	#IP_FW_RESETLOG
 45

	)

427 
	#IP_OLD_FW_ADD
 50

	)

428 
	#IP_OLD_FW_DEL
 51

	)

429 
	#IP_OLD_FW_FLUSH
 52

	)

430 
	#IP_OLD_FW_ZERO
 53

	)

431 
	#IP_OLD_FW_GET
 54

	)

432 
	#IP_NAT__XXX
 55

	)

433 
	#IP_OLD_FW_RESETLOG
 56

	)

435 
	#IP_DUMMYNET_CONFIGURE
 60

	)

436 
	#IP_DUMMYNET_DEL
 61

	)

437 
	#IP_DUMMYNET_FLUSH
 62

	)

438 
	#IP_DUMMYNET_GET
 64

	)

440 
	#IP_TRAFFIC_MGT_BACKGROUND
 65

	)

444 #ifde‡
__APPLE_API_UNSTABLE


445 
	#TRAFFIC_MGT_SO_BACKGROUND
 0x0001

	)

446 
	#TRAFFIC_MGT_SO_BG_SUPPRESSED
 0x0002

	)

452 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

453 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

454 
	#IP_MAX_MEMBERSHIPS
 20

	)

459 
	sù_mªq
 {

460 
ö_addr
 
	mimr_mu…üddr
;

461 
ö_addr
 
	mimr_öãrÁ˚
;

468 
	#IP_PORTRANGE_DEFAULT
 0

	)

469 
	#IP_PORTRANGE_HIGH
 1

	)

470 
	#IP_PORTRANGE_LOW
 2

	)

479 
	#IPPROTO_MAXID
 (
IPPROTO_AH
 + 1Ë

	)

485 
	#IPCTL_FORWARDING
 1

	)

486 
	#IPCTL_SENDREDIRECTS
 2

	)

487 
	#IPCTL_DEFTTL
 3

	)

488 #ifde‡
nŸyë


489 
	#IPCTL_DEFMTU
 4

	)

491 
	#IPCTL_RTEXPIRE
 5

	)

492 
	#IPCTL_RTMINEXPIRE
 6

	)

493 
	#IPCTL_RTMAXCACHE
 7

	)

494 
	#IPCTL_SOURCEROUTE
 8

	)

495 
	#IPCTL_DIRECTEDBROADCAST
 9

	)

496 
	#IPCTL_INTRQMAXLEN
 10

	)

497 
	#IPCTL_INTRQDROPS
 11

	)

498 
	#IPCTL_STATS
 12

	)

499 
	#IPCTL_ACCEPTSOURCEROUTE
 13

	)

500 
	#IPCTL_FASTFORWARDING
 14

	)

501 
	#IPCTL_KEEPFAITH
 15

	)

502 
	#IPCTL_GIF_TTL
 16

	)

503 
	#IPCTL_MAXID
 17

	)

510 
	#__KAME_NETINET_IN_H_INCLUDED_


	)

511 
	~<√töë6/ö6.h
>

512 #unde‡
__KAME_NETINET_IN_H_INCLUDED_


515 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

516 
__BEGIN_DECLS


517 
bödªsvp‹t
(, 
sockaddr_ö
 *);

518 
	gsockaddr
;

519 
bödªsvp‹t_ß
(, 
sockaddr
 *);

520 
	g__END_DECLS


	@/usr/include/netinet/tcp.h

64 #i‚de‡
_NETINET_TCP_H_


65 
	#_NETINET_TCP_H_


	)

66 
	~<sys/≠∂ópi›ts.h
>

67 
	~<sys/_ty≥s.h
>

68 
	~<machöe/ídün.h
>

70 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

71 
__uöt32_t
 
	tt˝_£q
;

72 
__uöt32_t
 
	tt˝_cc
;

74 
	#t˝6_£q
 
t˝_£q


	)

75 
	#t˝6hdr
 
t˝hdr


	)

81 
	st˝hdr
 {

82 
	mth_•‹t
;

83 
	mth_dp‹t
;

84 
t˝_£q
 
	mth_£q
;

85 
t˝_£q
 
	mth_ack
;

86 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_LITTLE_ENDIAN


87 
	mth_x2
:4,

88 
	mth_off
:4;

90 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_BIG_ENDIAN


91 
	mth_off
:4,

92 
	mth_x2
:4;

94 
	mth_Êags
;

95 
	#TH_FIN
 0x01

	)

96 
	#TH_SYN
 0x02

	)

97 
	#TH_RST
 0x04

	)

98 
	#TH_PUSH
 0x08

	)

99 
	#TH_ACK
 0x10

	)

100 
	#TH_URG
 0x20

	)

101 
	#TH_ECE
 0x40

	)

102 
	#TH_CWR
 0x80

	)

103 
	#TH_FLAGS
 (
TH_FIN
|
TH_SYN
|
TH_RST
|
TH_ACK
|
TH_URG
|
TH_ECE
|
TH_CWR
)

	)

105 
	mth_wö
;

106 
	mth_sum
;

107 
	mth_uΩ
;

110 
	#TCPOPT_EOL
 0

	)

111 
	#TCPOPT_NOP
 1

	)

112 
	#TCPOPT_MAXSEG
 2

	)

113 
	#TCPOLEN_MAXSEG
 4

	)

114 
	#TCPOPT_WINDOW
 3

	)

115 
	#TCPOLEN_WINDOW
 3

	)

116 
	#TCPOPT_SACK_PERMITTED
 4

	)

117 
	#TCPOLEN_SACK_PERMITTED
 2

	)

118 
	#TCPOPT_SACK
 5

	)

119 
	#TCPOLEN_SACK
 8

	)

120 
	#TCPOPT_TIMESTAMP
 8

	)

121 
	#TCPOLEN_TIMESTAMP
 10

	)

122 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

123 
	#TCPOPT_TSTAMP_HDR
 \

124 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

126 
	#MAX_TCPOPTLEN
 40

	)

128 
	#TCPOPT_CC
 11

	)

129 
	#TCPOPT_CCNEW
 12

	)

130 
	#TCPOPT_CCECHO
 13

	)

131 
	#TCPOLEN_CC
 6

	)

132 
	#TCPOLEN_CC_APPA
 (
TCPOLEN_CC
+2)

	)

133 
	#TCPOPT_CC_HDR
(
cc›t
) \

134 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|(
cc›t
)<<8|
TCPOLEN_CC
)

	)

135 
	#TCPOPT_SIGNATURE
 19

	)

136 
	#TCPOLEN_SIGNATURE
 18

	)

139 
	#TCPOPT_SACK_PERMIT_HDR
 \

140 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_SACK_PERMITTED
<<8|
TCPOLEN_SACK_PERMITTED
)

	)

141 
	#TCPOPT_SACK_HDR
 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_SACK
<<8)

	)

143 
	#MAX_SACK_BLKS
 6

	)

144 
	#TCP_MAX_SACK
 3

	)

153 
	#TCP_MSS
 512

	)

164 
	#TCP_MINMSS
 216

	)

173 
	#TCP_MINMSSOVERLOAD
 1000

	)

181 
	#TCP6_MSS
 1024

	)

183 
	#TCP_MAXWIN
 65535

	)

184 
	#TTCP_CLIENT_SND_WND
 4096

	)

186 
	#TCP_MAX_WINSHIFT
 14

	)

188 
	#TCP_MAXBURST
 4

	)

190 
	#TCP_MAXHLEN
 (0xf<<2Ë

	)

191 
	#TCP_MAXOLEN
 (
TCP_MAXHLEN
 - (
t˝hdr
))

	)

198 
	#TCP_NODELAY
 0x01

	)

199 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

200 
	#TCP_MAXSEG
 0x02

	)

201 
	#TCP_NOPUSH
 0x04

	)

202 
	#TCP_NOOPT
 0x08

	)

203 
	#TCP_KEEPALIVE
 0x10

	)

204 
	#TCP_CONNECTIONTIMEOUT
 0x20

	)

	@/usr/include/signal.h

58 #i‚de‡
_USER_SIGNAL_H


59 
	#_USER_SIGNAL_H


	)

61 
	~<sys/cdefs.h
>

62 
	~<_ty≥s.h
>

63 
	~<sys/sig«l.h
>

65 #i‚de‡
_PTHREAD_T


66 
__d¨wö_±hªad_t
 
	t±hªad_t
;

67 
	#_PTHREAD_T


	)

70 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

71 
__c⁄°
 *__c⁄° 
sys_sig«me
[
NSIG
];

72 
__c⁄°
 *__c⁄° 
sys_sigli°
[
NSIG
];

75 
__BEGIN_DECLS


76 
øi£
();

77 
	g__END_DECLS


79 #i‚def 
_ANSI_SOURCE


80 
__BEGIN_DECLS


81 (*
bsd_sig«l
(, (*)()))();

82 
	$kûl
(
pid_t
, Ë
	`__DARWIN_ALIAS
(
kûl
);

83 
	$kûÕg
(
pid_t
, Ë
	`__DARWIN_ALIAS
(
kûÕg
);

84 
	`±hªad_kûl
(
±hªad_t
, );

85 
	$±hªad_sigmask
(, c⁄° 
sig£t_t
 *, sig£t_à*Ë
	`__DARWIN_ALIAS
(
±hªad_sigmask
);

86 
	`siga˘i⁄
(, c⁄° 
siga˘i⁄
 * 
__ª°ri˘
,

87 
siga˘i⁄
 * 
__ª°ri˘
);

88 
	`sigadd£t
(
sig£t_t
 *, );

89 
	$sigÆt°ack
(c⁄° 
°ack_t
 * 
__ª°ri˘
, sèck_à* __ª°ri˘Ë
	`__DARWIN_ALIAS
(
sigÆt°ack
);

90 
	`sigdñ£t
(
sig£t_t
 *, );

91 
	`sigem±y£t
(
sig£t_t
 *);

92 
	`sigfûl£t
(
sig£t_t
 *);

93 
	`sighﬁd
();

94 
	`sigign‹e
();

95 
	`sigöãºu±
(, );

96 
	`sigismembî
(c⁄° 
sig£t_t
 *, );

97 
	$sig∑u£
(Ë
	`__DARWIN_ALIAS_C
(
sig∑u£
);

98 
	`sig≥ndög
(
sig£t_t
 *);

99 
	`sig¥ocmask
(, c⁄° 
sig£t_t
 * 
__ª°ri˘
, sigset_t * __restrict);

100 
	`sigªl£
();

101 (*
	`sig£t
(, (*)()))();

102 
	$sigsu•íd
(c⁄° 
sig£t_t
 *Ë
	`__DARWIN_ALIAS_C
(
sigsu•íd
);

103 
	$sigwaô
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, * __ª°ri˘Ë
	`__DARWIN_ALIAS_C
(
sigwaô
);

104 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

105 
	`psig«l
(, const *);

106 
	`sigblock
();

107 
	`sig£tmask
();

108 
	`sigvec
(, 
sigvec
 *, sigvec *);

110 
__END_DECLS


113 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

115 
__ölöe
 

116 
	$__sigbôs
(
__signo
)

118  
__signo
 > 
__DARWIN_NSIG
 ? 0 : (1 << (__signo - 1));

119 
	}
}

121 
	#__sigbôs
(
signo
Ë(1 << ((signoË- 1))

	)

124 
	#sigadd£t
(
£t
, 
signo
Ë(*(£tË|
	`__sigbôs
(signo), 0)

	)

125 
	#sigdñ£t
(
£t
, 
signo
Ë(*(£tË&~
	`__sigbôs
(signo), 0)

	)

126 
	#sigismembî
(
£t
, 
signo
Ë((*(£tË& 
	`__sigbôs
(signo)Ë!0)

	)

127 
	#sigem±y£t
(
£t
Ë(*(£tË0, 0)

	)

128 
	#sigfûl£t
(
£t
Ë(*(£tË~(
sig£t_t
)0, 0)

	)

	@/usr/include/stdarg.h

3 #i‡
deföed
(
__GNUC__
)

4 #ö˛ude_√xà<
°d¨g
.
h
>

5 #ñi‡
deföed
(
__MWERKS__
)

6 
	~"mw_°d¨g.h
"

	@/usr/include/stdio.h

61 #i‚def 
_STDIO_H_


62 
	#_STDIO_H_


	)

64 
	~<_ty≥s.h
>

66 #i‚de‡
_VA_LIST


67 
	#_VA_LIST


	)

70 
__d¨wö_va_li°
 
	tva_li°
;

73 #i‚def 
_OFF_T


74 
	#_OFF_T


	)

75 
__d¨wö_off_t
 
	toff_t
;

78 #i‚def 
_SIZE_T


79 
	#_SIZE_T


	)

80 
__d¨wö_size_t
 
	tsize_t
;

83 #i‚de‡
NULL


84 
	#NULL
 
__DARWIN_NULL


	)

87 
__d¨wö_off_t
 
	tÂos_t
;

89 
	#_FSTDIO


	)

98 
	s__sbuf
 {

99 *
	m_ba£
;

100 
	m_size
;

104 
	g__sFILEX
;

132 
	s__sFILE
 {

133 *
	m_p
;

134 
	m_r
;

135 
	m_w
;

136 
	m_Êags
;

137 
	m_fûe
;

138 
__sbuf
 
	m_bf
;

139 
	m_lbfsize
;

142 *
	m_cookõ
;

143 (*
	m_˛o£
)(*);

144 (*
	m_ªad
) (*, *, );

145 
Âos_t
 (*
_£ek
Ë(*, 
	mÂos_t
, );

146 (*
	m_wrôe
)(*, const *, );

149 
__sbuf
 
	m_ub
;

150 
__sFILEX
 *
	m_exåa
;

151 
	m_ur
;

154 
	m_ubuf
[3];

155 
	m_nbuf
[1];

158 
__sbuf
 
	m_lb
;

161 
	m_blksize
;

162 
Âos_t
 
	m_off£t
;

163 } 
	tFILE
;

165 
	g__BEGIN_DECLS


166 #i‡
__DARWIN_UNIX03


167 
FILE
 *
__°döp
;

168 
FILE
 *
__°douç
;

169 
FILE
 *
__°dîΩ
;

171 
FILE
 
__sF
[];

173 
	g__END_DECLS


175 
	#__SLBF
 0x0001

	)

176 
	#__SNBF
 0x0002

	)

177 
	#__SRD
 0x0004

	)

178 
	#__SWR
 0x0008

	)

180 
	#__SRW
 0x0010

	)

181 
	#__SEOF
 0x0020

	)

182 
	#__SERR
 0x0040

	)

183 
	#__SMBF
 0x0080

	)

184 
	#__SAPP
 0x0100

	)

185 
	#__SSTR
 0x0200

	)

186 
	#__SOPT
 0x0400

	)

187 
	#__SNPT
 0x0800

	)

188 
	#__SOFF
 0x1000

	)

189 
	#__SMOD
 0x2000

	)

190 
	#__SALC
 0x4000

	)

191 
	#__SIGN
 0x8000

	)

202 
	#_IOFBF
 0

	)

203 
	#_IOLBF
 1

	)

204 
	#_IONBF
 2

	)

206 
	#BUFSIZ
 1024

	)

207 
	#EOF
 (-1)

	)

215 
	#FOPEN_MAX
 20

	)

216 
	#FILENAME_MAX
 1024

	)

219 #i‚de‡
_ANSI_SOURCE


220 
	#P_tmpdú
 "/v¨/tmp/"

	)

222 
	#L_tm≤am
 1024

	)

223 
	#TMP_MAX
 308915776

	)

225 #i‚de‡
SEEK_SET


226 
	#SEEK_SET
 0

	)

228 #i‚de‡
SEEK_CUR


229 
	#SEEK_CUR
 1

	)

231 #i‚de‡
SEEK_END


232 
	#SEEK_END
 2

	)

235 #i‡
__DARWIN_UNIX03


236 
	#°dö
 
__°döp


	)

237 
	#°dout
 
__°douç


	)

238 
	#°dîr
 
__°dîΩ


	)

240 
	#°dö
 (&
__sF
[0])

	)

241 
	#°dout
 (&
__sF
[1])

	)

242 
	#°dîr
 (&
__sF
[2])

	)

248 
__BEGIN_DECLS


249 
˛óªº
(
FILE
 *);

250 
f˛o£
(
FILE
 *);

251 
„of
(
FILE
 *);

252 
„º‹
(
FILE
 *);

253 
fÊush
(
FILE
 *);

254 
fgëc
(
FILE
 *);

255 
fgëpos
(
FILE
 * 
__ª°ri˘
, 
Âos_t
 *);

256 *
fgës
(* 
__ª°ri˘
, , 
FILE
 *);

257 #i‡
deföed
(
__DARWIN_10_6_AND_LATER
Ë&& (deföed(
_DARWIN_UNLIMITED_STREAMS
Ë|| deföed(
_DARWIN_C_SOURCE
))

258 
FILE
 *
	$f›í
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘Ë
	`__DARWIN_EXTSN
(
f›í
);

260 
FILE
 *
	$f›í
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘Ë
	`__DARWIN_10_6_AND_LATER_ALIAS
(
	`__DARWIN_ALIAS
(
f›í
));

262 
	$Ârötf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, ...Ë
	`__DARWIN_LDBL_COMPAT
(
Ârötf
);

263 
	`Âutc
(, 
FILE
 *);

264 
	$Âuts
(c⁄° * 
__ª°ri˘
, 
FILE
 * __ª°ri˘Ë
	`__DARWIN_ALIAS
(
Âuts
);

265 
size_t
 
	`‰ód
(* 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

266 
FILE
 *
	$‰e›í
(c⁄° * 
__ª°ri˘
, const * __restrict,

267 
FILE
 * 
__ª°ri˘
Ë
	`__DARWIN_ALIAS
(
‰e›í
);

268 
	$fsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, ...Ë
	`__DARWIN_LDBL_COMPAT
(
fsˇnf
);

269 
	`f£ek
(
FILE
 *, , );

270 
	`f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

271 
	`·ñl
(
FILE
 *);

272 
size_t
 
	$fwrôe
(c⁄° * 
__ª°ri˘
, 
size_t
, size_t, 
FILE
 * __ª°ri˘Ë
	`__DARWIN_ALIAS
(
fwrôe
);

273 
	`gëc
(
FILE
 *);

274 
	`gëch¨
();

275 *
	`gës
(*);

276 #i‡!
	`deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

277 
__c⁄°
 
sys_√º
;

278 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

280 
	`≥º‹
(const *);

281 
	$¥ötf
(c⁄° * 
__ª°ri˘
, ...Ë
	`__DARWIN_LDBL_COMPAT
(
¥ötf
);

282 
	`putc
(, 
FILE
 *);

283 
	`putch¨
();

284 
	`puts
(const *);

285 
	`ªmove
(const *);

286 
	`ª«me
 (const *, const *);

287 
	`ªwöd
(
FILE
 *);

288 
	$sˇnf
(c⁄° * 
__ª°ri˘
, ...Ë
	`__DARWIN_LDBL_COMPAT
(
sˇnf
);

289 
	`£tbuf
(
FILE
 * 
__ª°ri˘
, * __restrict);

290 
	`£tvbuf
(
FILE
 * 
__ª°ri˘
, * __ª°ri˘, , 
size_t
);

291 
	$•rötf
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, ...Ë
	`__DARWIN_LDBL_COMPAT
(
•rötf
);

292 
	$ssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, ...Ë
	`__DARWIN_LDBL_COMPAT
(
ssˇnf
);

293 
FILE
 *
	`tmpfûe
();

294 *
	`tm≤am
(*);

295 
	`ungëc
(, 
FILE
 *);

296 
	$vÂrötf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
Ë
	`__DARWIN_LDBL_COMPAT
(
vÂrötf
);

297 
	$v¥ötf
(c⁄° * 
__ª°ri˘
, 
va_li°
Ë
	`__DARWIN_LDBL_COMPAT
(
v¥ötf
);

298 
	$v•rötf
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
Ë
	`__DARWIN_LDBL_COMPAT
(
v•rötf
);

299 #i‡!
	`deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

300 
	$a•rötf
(**, c⁄° *, ...Ë
	`__DARWIN_LDBL_COMPAT
(
a•rötf
);

301 
	$va•rötf
(**, c⁄° *, 
va_li°
Ë
	`__DARWIN_LDBL_COMPAT
(
va•rötf
);

303 
__END_DECLS


308 #i‚de‡
_ANSI_SOURCE


309 
	#L_˘îmid
 1024

	)

311 
__BEGIN_DECLS


312 *
	`˘îmid
(*);

313 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

314 *
	`˘îmid_r
(*);

316 #i‡
	`deföed
(
__DARWIN_10_6_AND_LATER
Ë&& (deföed(
_DARWIN_UNLIMITED_STREAMS
Ë|| deföed(
_DARWIN_C_SOURCE
))

317 
FILE
 *
	$fd›í
(, c⁄° *Ë
	`__DARWIN_EXTSN
(
fd›í
);

319 
FILE
 *
	$fd›í
(, c⁄° *Ë
	`__DARWIN_10_6_AND_LATER_ALIAS
(
	`__DARWIN_ALIAS
(
fd›í
));

321 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

322 *
	`fgë 
(
FILE
 *, 
size_t
 *);

324 
	`fûío
(
FILE
 *);

325 
	`Êockfûe
(
FILE
 *);

326 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

327 
__c⁄°
 

328 *
	`fmtcheck
(const *, const *);

329 
	`Âurge
(
FILE
 *);

331 
	`f£eko
(
FILE
 *, 
off_t
, );

332 
off_t
 
	`·ñlo
(
FILE
 *);

333 
	`·rylockfûe
(
FILE
 *);

334 
	`fu∆ockfûe
(
FILE
 *);

335 
	`gëc_u∆ocked
(
FILE
 *);

336 
	`gëch¨_u∆ocked
();

337 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

338 
	`gëw
(
FILE
 *);

340 
	`p˛o£
(
FILE
 *);

341 #i‡
	`deföed
(
__DARWIN_10_6_AND_LATER
Ë&& (deföed(
_DARWIN_UNLIMITED_STREAMS
Ë|| deföed(
_DARWIN_C_SOURCE
))

342 
FILE
 *
	$p›í
(c⁄° *, c⁄° *Ë
	`__DARWIN_EXTSN
(
p›í
);

344 
FILE
 *
	$p›í
(c⁄° *, c⁄° *Ë
	`__DARWIN_10_6_AND_LATER_ALIAS
(
	`__DARWIN_ALIAS
(
p›í
));

346 
	`putc_u∆ocked
(, 
FILE
 *);

347 
	`putch¨_u∆ocked
();

348 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

349 
	`putw
(, 
FILE
 *);

350 
	`£tbuf„r
(
FILE
 *, *, );

351 
	`£éöebuf
(
FILE
 *);

353 
	$¢¥ötf
(* 
__ª°ri˘
, 
size_t
, c⁄° * __ª°ri˘, ...Ë
	`__DARWIN_LDBL_COMPAT
(
¢¥ötf
);

354 *
	$ãm≤am
(c⁄° *, c⁄° *Ë
	`__DARWIN_ALIAS
(
ãm≤am
);

355 
	$vfsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
Ë
	`__DARWIN_LDBL_COMPAT
(
vfsˇnf
);

356 
	$vsˇnf
(c⁄° * 
__ª°ri˘
, 
va_li°
Ë
	`__DARWIN_LDBL_COMPAT
(
vsˇnf
);

357 
	$v¢¥ötf
(* 
__ª°ri˘
, 
size_t
, c⁄° * __ª°ri˘, 
va_li°
Ë
	`__DARWIN_LDBL_COMPAT
(
v¢¥ötf
);

358 
	$vssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
Ë
	`__DARWIN_LDBL_COMPAT
(
vssˇnf
);

359 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

360 
FILE
 *
	`z›í
(const *, const *, );

362 
__END_DECLS


367 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

368 
__BEGIN_DECLS


369 
FILE
 *
	`fun›í
(const *,

372 
	$Âos_t
 (*)(*, 
Âos_t
, ),

374 
__END_DECLS


375 
	#‰›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, fn, 0, 0, 0)

	)

376 
	#fw›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, 0, fn, 0, 0)

	)

383 
__BEGIN_DECLS


384 
	`__§gë
(
FILE
 *);

385 
	$__svfsˇnf
(
FILE
 *, c⁄° *, 
va_li°
Ë
	`__DARWIN_LDBL_COMPAT
(
__svfsˇnf
);

386 
	`__swbuf
(, 
FILE
 *);

387 
__END_DECLS


393 
	#__sgëc
(
p
Ë(--’)->
_r
 < 0 ? 
	`__§gë
’Ë: ()(*’)->
_p
++))

	)

394 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__STDC__
)

395 
__ölöe
 
	$__•utc
(
_c
, 
FILE
 *
_p
) {

396 i‡(--
_p
->
_w
 >0 || (_p->_w >_p->
_lbfsize
 && ()
_c
 != '\n'))

397  (*
_p
->_p++ = 
_c
);

399  (
	`__swbuf
(
_c
, 
_p
));

400 
	}
}

405 
	#__•utc
(
c
, 
p
) \

406 (--(
p
)->
_w
 < 0 ? \

407 (
p
)->
_w
 >’)->
_lbfsize
 ? \

408 (*(
p
)->
_p
 = (
c
)), *(p)->_p != '\n' ? \

409 ()*(
p
)->
_p
++ : \

410 
	`__swbuf
('\n', 
p
) : \

411 
	`__swbuf
(()(
c
), 
p
) : \

412 (*(
p
)->
_p
 = (
c
), ()*’)->_p++))

	)

415 
	#__s„of
(
p
Ë((’)->
_Êags
 & 
__SEOF
Ë!0)

	)

416 
	#__s„º‹
(
p
Ë((’)->
_Êags
 & 
__SERR
Ë!0)

	)

417 
	#__s˛óªº
(
p
Ë(()(’)->
_Êags
 &~(
__SERR
|
__SEOF
)))

	)

418 
	#__sfûío
(
p
Ë(’)->
_fûe
)

	)

420 #i‚de‡
_ANSI_SOURCE


421 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

422 
	#„of_u∆ocked
(
p
Ë
	`__s„of
’)

	)

423 
	#„º‹_u∆ocked
(
p
Ë
	`__s„º‹
’)

	)

424 
	#˛óªº_u∆ocked
(
p
Ë
	`__s˛óªº
’)

	)

425 
	#fûío_u∆ocked
(
p
Ë
	`__sfûío
’)

	)

428 #i‚de‡
löt


429 
	#gëc_u∆ocked
(
Â
Ë
	`__sgëc
(Â)

	)

430 
	#putc_u∆ocked
(
x
, 
Â
Ë
	`__•utc
(x, fp)

	)

433 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

434 
	#putch¨_u∆ocked
(
x
Ë
	`putc_u∆ocked
(x, 
°dout
)

	)

437 #ifde‡
_USE_EXTENDED_LOCALES_


438 
	~<xloˇÀ/_°dio.h
>

441 #i‡
deföed
 (
__GNUC__
Ë&& 
_FORTIFY_SOURCE
 > 0 && !deföed (
__˝lu•lus
)

443 
	~<£cuª/_°dio.h
>

	@/usr/include/stdlib.h

58 #i‚de‡
_STDLIB_H_


59 
	#_STDLIB_H_


	)

61 
	~<Avaûabûôy.h
>

63 
	~<_ty≥s.h
>

64 #i‡!
deföed
(
_ANSI_SOURCE
)

65 
	~<sys/waô.h
>

66 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

67 
	~<Æloˇ.h
>

71 #i‚def 
_SIZE_T


72 
	#_SIZE_T


	)

75 
__d¨wö_size_t
 
	tsize_t
;

78 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

79 #i‚de‡
_CT_RUNE_T


80 
	#_CT_RUNE_T


	)

81 
__d¨wö_˘_ru√_t
 
	t˘_ru√_t
;

84 #i‚de‡
_RUNE_T


85 
	#_RUNE_T


	)

86 
__d¨wö_ru√_t
 
	tru√_t
;

90 #i‚def 
__˝lu•lus


91 #i‚def 
_WCHAR_T


92 
	#_WCHAR_T


	)

93 
__d¨wö_wch¨_t
 
	twch¨_t
;

98 
	mquŸ
;

99 
	mªm
;

100 } 
	tdiv_t
;

103 
	mquŸ
;

104 
	mªm
;

105 } 
	tldiv_t
;

107 #i‡!
__DARWIN_NO_LONG_LONG


109 
	mquŸ
;

110 
	mªm
;

111 } 
	tŒdiv_t
;

114 #i‚de‡
NULL


115 
	#NULL
 
__DARWIN_NULL


	)

118 
	#EXIT_FAILURE
 1

	)

119 
	#EXIT_SUCCESS
 0

	)

121 
	#RAND_MAX
 0x7fffffff

	)

123 #ifde‡
_USE_EXTENDED_LOCALES_


124 
	~<_xloˇÀ.h
>

127 #i‚de‡
MB_CUR_MAX


128 #ifde‡
_USE_EXTENDED_LOCALES_


129 
	#MB_CUR_MAX
 (
	`___mb_cur_max
())

	)

130 #i‚de‡
MB_CUR_MAX_L


131 
	#MB_CUR_MAX_L
(
x
Ë(
	`___mb_cur_max_l
(x))

	)

134 
__mb_cur_max
;

135 
	#MB_CUR_MAX
 
__mb_cur_max


	)

139 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)) \

140 && 
deföed
(
_USE_EXTENDED_LOCALES_
Ë&& !
	$deföed
(
MB_CUR_MAX_L
)

141 
	#MB_CUR_MAX_L
(
x
Ë(
	`___mb_cur_max_l
(x))

	)

144 
__BEGIN_DECLS


145 
	$ab‹t
(Ë
__dód2
;

146 
	$abs
(Ë
__puª2
;

147 
	`©exô
((*)());

148 
	`©of
(const *);

149 
	`©oi
(const *);

150 
	`©ﬁ
(const *);

151 #i‡!
__DARWIN_NO_LONG_LONG


153 
	`©ﬁl
(const *);

155 *
	`b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

156 
size_t
, (*)(const *, const *));

157 *
	`ˇŒoc
(
size_t
, size_t);

158 
div_t
 
	$div
(, Ë
__puª2
;

159 
	$exô
(Ë
__dód2
;

160 
	`‰ì
(*);

161 *
	`gëív
(const *);

162 
	$œbs
(Ë
__puª2
;

163 
ldiv_t
 
	$ldiv
(, Ë
__puª2
;

164 #i‡!
__DARWIN_NO_LONG_LONG


166 
	`Œabs
();

167 
Œdiv_t
 
	`Œdiv
(, );

169 *
	`mÆloc
(
size_t
);

170 
	`mbÀn
(c⁄° *, 
size_t
);

171 
size_t
 
	`mb°owcs
(
wch¨_t
 * 
__ª°ri˘
 , const * __restrict, size_t);

172 
	`mbtowc
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

173 
	`posix_memÆign
(**, 
size_t
, size_t);

174 
	`qs‹t
(*, 
size_t
, size_t,

176 
	`ønd
();

177 *
	`ªÆloc
(*, 
size_t
);

178 
	`§™d
();

179 
	$°πod
(c⁄° *, **Ë
	`__DARWIN_ALIAS
(
°πod
);

180 
	$°πof
(c⁄° *, **Ë
	`__DARWIN_ALIAS
(
°πof
);

181 
	`°πﬁ
(const *, **, );

183 
	$°πﬁd
(c⁄° *, **Ë
	`__DARWIN_LDBL_COMPAT
(
°πﬁd
);

184 #i‡!
__DARWIN_NO_LONG_LONG


186 
	`°πﬁl
(const *, **, );

189 
	`°πoul
(const *, **, );

190 #i‡!
__DARWIN_NO_LONG_LONG


192 
	`°πouŒ
(const *, **, );

194 
	$sy°em
(c⁄° *Ë
	`__DARWIN_ALIAS_C
(
sy°em
);

195 
size_t
 
	`wc°ombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t);

196 
	`w˘omb
(*, 
wch¨_t
);

198 #i‚de‡
_ANSI_SOURCE


199 
	$_Exô
(Ë
__dód2
;

200 
	`a64l
(const *);

201 
	`dønd48
();

202 *
	`ecvt
(, , *
__ª°ri˘
, *__restrict);

203 
	`î™d48
([3]);

204 *
	`fcvt
(, , *
__ª°ri˘
, *__restrict);

205 *
	`gcvt
(, , *);

206 
	`gësub›t
(**, * const *, **);

207 
	`gø¡±
();

208 #i‡
__DARWIN_UNIX03


209 *
	`öô°©e
(, *, 
size_t
);

211 *
	`öô°©e
(, *, );

213 
	`jønd48
([3]);

214 *
	`l64a
();

215 
	`lc⁄g48
([7]);

216 
	`Ã™d48
();

217 *
	`mkãmp
(*);

218 
	`mk°emp
(*);

219 
	`mønd48
();

220 
	`ƒ™d48
([3]);

221 
	`posix_›í±
();

222 *
	`±¢ame
();

223 
	$puãnv
(*Ë
	`__DARWIN_ALIAS
(
puãnv
);

224 
	`øndom
();

225 
	`ønd_r
(*);

226 #i‡(
__DARWIN_UNIX03
 && !
	`deföed
(
_POSIX_C_SOURCE
)Ë|| deföed(
_DARWIN_C_SOURCE
Ë|| deföed(
_DARWIN_BETTER_REALPATH
)

227 *
	$ªÆ∑th
(c⁄° * 
__ª°ri˘
, * __ª°ri˘Ë
	`__DARWIN_EXTSN
(
ªÆ∑th
);

229 *
	$ªÆ∑th
(c⁄° * 
__ª°ri˘
, * __ª°ri˘Ë
	`__DARWIN_ALIAS
(
ªÆ∑th
);

232 *
	`£ed48
([3]);

233 
	$£ãnv
(c⁄° *, c⁄° *, Ë
	`__DARWIN_ALIAS
(
£ãnv
);

234 #i‡
__DARWIN_UNIX03


235 
	$£tkey
(c⁄° *Ë
	`__DARWIN_ALIAS
(
£tkey
);

237 
	`£tkey
(const *);

239 *
	`£t°©e
(const *);

240 
	`§™d48
();

241 #i‡
__DARWIN_UNIX03


242 
	`§™dom
();

244 
	`§™dom
();

246 
	`u∆ock±
();

247 #i‡
__DARWIN_UNIX03


248 
	$un£ãnv
(c⁄° *Ë
	`__DARWIN_ALIAS
(
un£ãnv
);

250 
	`un£ãnv
(const *);

254 #i‡!
	`deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

255 
	~<machöe/ty≥s.h
>

257 #i‚de‡
_DEV_T


258 
__d¨wö_dev_t
 
	tdev_t
;

259 
	#_DEV_T


	)

262 #i‚def 
_MODE_T


263 
__d¨wö_mode_t
 
	tmode_t
;

264 
	#_MODE_T


	)

267 
u_öt32_t


268 
	`¨c4øndom
();

269 
	`¨c4øndom_addøndom
(*
d©
, 
d©Àn
);

270 
	`¨c4øndom_°ú
();

271 #ifde‡
__BLOCKS__


272 
	`©exô_b
((^)());

273 *
	`b£¨ch_b
(c⁄° *, c⁄° *, 
size_t
,

274 
size_t
, (^)(const *, const *));

278 *
	`cgëˇp
(*, const *, );

279 
	`cgë˛o£
();

280 
	`cgëít
(**, **, const *);

281 
	`cgëfú°
(**, **);

282 
	`cgëm©ch
(const *, const *);

283 
	`cgë√xt
(**, **);

284 
	`cgënum
(*, const *, *);

285 
	`cgë£t
(const *);

286 
	`cgë°r
(*, const *, **);

287 
	`cgëu°r
(*, const *, **);

289 
	$d´m⁄
(, Ë
	$__DARWIN_1050
(
d´m⁄
Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_0
,
__MAC_10_5
,
__IPHONE_2_0
,__IPHONE_2_0);

290 *
	`dev«me
(
dev_t
, 
mode_t
);

291 *
	`dev«me_r
(
dev_t
, 
mode_t
, *
buf
, 
Àn
);

292 *
	`gëbsize
(*, *);

293 
	`gëlﬂdavg
([], );

295 *
	`gë¥og«me
();

297 
	`hóps‹t
(*, 
size_t
, size_t,

299 #ifde‡
__BLOCKS__


300 
	`hóps‹t_b
(*, 
size_t
, size_t,

303 
	`mîges‹t
(*, 
size_t
, size_t,

305 #ifde‡
__BLOCKS__


306 
	`mîges‹t_b
(*, 
size_t
, size_t,

309 
	`ps‹t
(*, 
size_t
, size_t,

311 #ifde‡
__BLOCKS__


312 
	`ps‹t_b
(*, 
size_t
, size_t,

315 
	`ps‹t_r
(*, 
size_t
, size_t, *,

317 #ifde‡
__BLOCKS__


318 
	`qs‹t_b
(*, 
size_t
, size_t,

321 
	`qs‹t_r
(*, 
size_t
, size_t, *,

323 
	`ødixs‹t
(const **, , const *,

325 
	`£çrog«me
(const *);

326 
	`§adixs‹t
(const **, , const *,

328 
	`§™ddev
();

329 
	`§™domdev
();

330 *
	`ªÆlocf
(*, 
size_t
);

331 #i‡!
__DARWIN_NO_LONG_LONG


333 
	`°πoq
(const *, **, );

335 
	`°πouq
(const *, **, );

337 *
sub›èrg
;

338 *
	`vÆloc
(
size_t
);

342 #i‡!
	`deföed
(
__˝lu•lus
Ë&& deföed(
__WCHAR_MAX__
) && __WCHAR_MAX__ <= 0xffffU

343 #¥agm®
GCC
 
pois⁄
 
mb°owcs
 
mbtowc
 
wc°ombs
 
w˘omb


345 
__END_DECLS


347 #ifde‡
_USE_EXTENDED_LOCALES_


348 
	~<xloˇÀ/_°dlib.h
>

	@/usr/include/string.h

58 #i‚de‡
_STRING_H_


59 
	#_STRING_H_


	)

60 
	~<_ty≥s.h
>

62 #i‚def 
_SIZE_T


63 
	#_SIZE_T


	)

64 
__d¨wö_size_t
 
	tsize_t
;

67 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

68 #i‚de‡
_SSIZE_T


69 
	#_SSIZE_T


	)

70 
__d¨wö_ssize_t
 
	tssize_t
;

74 #i‚de‡
NULL


75 
	#NULL
 
__DARWIN_NULL


	)

78 
	~<sys/cdefs.h
>

80 
__BEGIN_DECLS


81 *
memchr
(c⁄° *, , 
size_t
);

82 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

83 *
mem˝y
(*, c⁄° *, 
size_t
);

84 *
memmove
(*, c⁄° *, 
size_t
);

85 *
mem£t
(*, , 
size_t
);

86 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

87 *
°p˝y
(*, const *);

88 *
°rˇ£°r
(const *, const *);

90 *
°rˇt
(*, const *);

91 *
°rchr
(const *, );

92 
°rcmp
(const *, const *);

93 
°rcﬁl
(const *, const *);

94 *
°r˝y
(*, const *);

95 
size_t
 
°rc•n
(const *, const *);

96 *
	$°ªº‹
(Ë
	`__DARWIN_ALIAS
(
°ªº‹
);

97 
	`°ªº‹_r
(, *, 
size_t
);

98 
size_t
 
	`°æí
(const *);

99 *
	`°∫ˇt
(*, c⁄° *, 
size_t
);

100 
	`°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

101 *
	`°∫˝y
(*, c⁄° *, 
size_t
);

102 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

103 *
	`°∫°r
(c⁄° *, c⁄° *, 
size_t
);

105 *
	`°Ωbrk
(const *, const *);

106 *
	`°ºchr
(const *, );

107 
size_t
 
	`°r•n
(const *, const *);

108 *
	`°r°r
(const *, const *);

109 *
	`°πok
(*, const *);

110 
size_t
 
	`°rx‰m
(*, const *, size_t);

113 #i‚de‡
_ANSI_SOURCE


114 *
	`memc˝y
(*, c⁄° *, , 
size_t
);

115 *
	`°πok_r
(*, const *, **);

116 *
	`°rdup
(const *);

117 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

118 
	`bcmp
(c⁄° *, c⁄° *, 
size_t
);

119 
	`bc›y
(c⁄° *, *, 
size_t
);

120 
	`bzîo
(*, 
size_t
);

121 
	`ffs
();

122 
	`ff¶
();

123 
	`Ês
();

124 
	`Ê¶
();

125 *
	`ödex
(const *, );

126 
	`mem£t_∑âîn4
(*, c⁄° *, 
size_t
);

127 
	`mem£t_∑âîn8
(*, c⁄° *, 
size_t
);

128 
	`mem£t_∑âîn16
(*, c⁄° *, 
size_t
);

129 *
	`rödex
(const *, );

130 
	`°rˇ£cmp
(const *, const *);

131 
size_t
 
	`°æˇt
(*, const *, size_t);

132 
size_t
 
	`°æ˝y
(*, const *, size_t);

133 
	`°rmode
(, *);

134 
	`°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

135 *
	`°r£p
(**, const *);

136 *
	`°rsig«l
(
sig
);

137 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

140 
__END_DECLS


142 #ifde‡
_USE_EXTENDED_LOCALES_


143 
	~<xloˇÀ/_°rög.h
>

146 #i‡
	`deföed
 (
__GNUC__
Ë&& 
_FORTIFY_SOURCE
 > 0 && !deföed (
__˝lu•lus
)

148 
	~<£cuª/_°rög.h
>

	@/usr/include/strings.h

58 
	~<sys/cdefs.h
>

60 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)Ë|| deföed(
_DARWIN_C_SOURCE
)

62 
	~<°rög.h
>

66 
	~<_ty≥s.h
>

68 #i‚def 
_SIZE_T


69 
	#_SIZE_T


	)

70 
__d¨wö_size_t
 
	tsize_t
;

73 
__BEGIN_DECLS


74 
bcmp
(c⁄° *, c⁄° *, 
size_t
);

75 
bc›y
(c⁄° *, *, 
size_t
);

76 
bzîo
(*, 
size_t
);

77 
ffs
();

78 *
ödex
(const *, );

79 *
rödex
(const *, );

80 
°rˇ£cmp
(const *, const *);

81 
°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

82 
	g__END_DECLS


	@/usr/include/sys/socket.h

72 #i‚de‡
_SYS_SOCKET_H_


73 
	#_SYS_SOCKET_H_


	)

75 
	~<sys/ty≥s.h
>

76 
	~<sys/cdefs.h
>

77 
	~<machöe/_∑øm.h
>

86 #i‚de‡
_GID_T


87 
__d¨wö_gid_t
 
	tgid_t
;

88 
	#_GID_T


	)

91 #i‚de‡
_OFF_T


92 
__d¨wö_off_t
 
	toff_t
;

93 
	#_OFF_T


	)

96 #i‚de‡
_PID_T


97 
__d¨wö_pid_t
 
	tpid_t
;

98 
	#_PID_T


	)

101 #i‚de‡
_SA_FAMILY_T


102 
	#_SA_FAMILY_T


	)

103 
__uöt8_t
 
	tß_Ámûy_t
;

106 #i‚de‡
_SOCKLEN_T


107 
	#_SOCKLEN_T


	)

108 
__d¨wö_sockÀn_t
 
	tsockÀn_t
;

112 #i‚de‡
_SIZE_T


113 
	#_SIZE_T


	)

114 
__d¨wö_size_t
 
	tsize_t
;

118 #i‚def 
_SSIZE_T


119 
	#_SSIZE_T


	)

120 
__d¨wö_ssize_t
 
	tssize_t
;

126 #i‚de‡
_STRUCT_IOVEC


127 
	#_STRUCT_IOVEC


	)

128 
	siovec
 {

129 * 
	miov_ba£
;

130 
size_t
 
	miov_Àn
;

137 
	#SOCK_STREAM
 1

	)

138 
	#SOCK_DGRAM
 2

	)

139 
	#SOCK_RAW
 3

	)

140 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

141 
	#SOCK_RDM
 4

	)

143 
	#SOCK_SEQPACKET
 5

	)

148 
	#SO_DEBUG
 0x0001

	)

149 
	#SO_ACCEPTCONN
 0x0002

	)

150 
	#SO_REUSEADDR
 0x0004

	)

151 
	#SO_KEEPALIVE
 0x0008

	)

152 
	#SO_DONTROUTE
 0x0010

	)

153 
	#SO_BROADCAST
 0x0020

	)

154 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

155 
	#SO_USELOOPBACK
 0x0040

	)

156 
	#SO_LINGER
 0x0080

	)

158 
	#SO_LINGER
 0x1080

	)

160 
	#SO_OOBINLINE
 0x0100

	)

161 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

162 
	#SO_REUSEPORT
 0x0200

	)

163 
	#SO_TIMESTAMP
 0x0400

	)

164 #i‚de‡
__APPLE__


165 
	#SO_ACCEPTFILTER
 0x1000

	)

167 
	#SO_DONTTRUNC
 0x2000

	)

169 
	#SO_WANTMORE
 0x4000

	)

170 
	#SO_WANTOOBFLAG
 0x8000

	)

177 
	#SO_SNDBUF
 0x1001

	)

178 
	#SO_RCVBUF
 0x1002

	)

179 
	#SO_SNDLOWAT
 0x1003

	)

180 
	#SO_RCVLOWAT
 0x1004

	)

181 
	#SO_SNDTIMEO
 0x1005

	)

182 
	#SO_RCVTIMEO
 0x1006

	)

183 
	#SO_ERROR
 0x1007

	)

184 
	#SO_TYPE
 0x1008

	)

185 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

187 #ifde‡
__APPLE__


188 
	#SO_NREAD
 0x1020

	)

189 
	#SO_NKE
 0x1021

	)

190 
	#SO_NOSIGPIPE
 0x1022

	)

191 
	#SO_NOADDRERR
 0x1023

	)

192 
	#SO_NWRITE
 0x1024

	)

193 
	#SO_REUSESHAREUID
 0x1025

	)

194 #ifde‡
__APPLE_API_PRIVATE


195 
	#SO_NOTIFYCONFLICT
 0x1026

	)

196 
	#SO_UPCALLCLOSEWAIT
 0x1027

	)

198 
	#SO_LINGER_SEC
 0x1080

	)

199 
	#SO_RESTRICTIONS
 0x1081

	)

200 
	#SO_RESTRICT_DENYIN
 0x00000001

	)

201 
	#SO_RESTRICT_DENYOUT
 0x00000002

	)

202 
	#SO_RESTRICT_DENYSET
 0x80000000

	)

203 
	#SO_RANDOMPORT
 0x1082

	)

204 
	#SO_NP_EXTENSIONS
 0x1083

	)

206 
	#SO_LABEL
 0x1010

	)

207 
	#SO_PEERLABEL
 0x1011

	)

213 
	slögî
 {

214 
	ml_⁄off
;

215 
	ml_lögî
;

218 #i‚de‡
__APPLE__


219 
	sac˚±_fûãr_¨g
 {

220 
	maf_«me
[16];

221 
	maf_¨g
[256-16];

225 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

226 #ifde‡
__APPLE__


231 
	sso_≈_exãnsi⁄s
 {

232 
u_öt32_t
 
	m≈x_Êags
;

233 
u_öt32_t
 
	m≈x_mask
;

236 
	#SONPX_SETOPTSHUT
 0x000000001

	)

246 
	#SOL_SOCKET
 0xfff‡

	)

252 
	#AF_UNSPEC
 0

	)

253 
	#AF_UNIX
 1

	)

254 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

255 
	#AF_LOCAL
 
AF_UNIX


	)

257 
	#AF_INET
 2

	)

258 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

259 
	#AF_IMPLINK
 3

	)

260 
	#AF_PUP
 4

	)

261 
	#AF_CHAOS
 5

	)

262 
	#AF_NS
 6

	)

263 
	#AF_ISO
 7

	)

264 
	#AF_OSI
 
AF_ISO


	)

265 
	#AF_ECMA
 8

	)

266 
	#AF_DATAKIT
 9

	)

267 
	#AF_CCITT
 10

	)

268 
	#AF_SNA
 11

	)

269 
	#AF_DEC√t
 12

	)

270 
	#AF_DLI
 13

	)

271 
	#AF_LAT
 14

	)

272 
	#AF_HYLINK
 15

	)

273 
	#AF_APPLETALK
 16

	)

274 
	#AF_ROUTE
 17

	)

275 
	#AF_LINK
 18

	)

276 
	#p£udo_AF_XTP
 19

	)

277 
	#AF_COIP
 20

	)

278 
	#AF_CNT
 21

	)

279 
	#p£udo_AF_RTIP
 22

	)

280 
	#AF_IPX
 23

	)

281 
	#AF_SIP
 24

	)

282 
	#p£udo_AF_PIP
 25

	)

283 #ifde‡
__APPLE__


285 
	#AF_NDRV
 27

	)

287 
	#AF_ISDN
 28

	)

288 
	#AF_E164
 
AF_ISDN


	)

289 
	#p£udo_AF_KEY
 29

	)

291 
	#AF_INET6
 30

	)

292 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

293 
	#AF_NATM
 31

	)

294 #ifde‡
__APPLE__


295 
	#AF_SYSTEM
 32

	)

296 
	#AF_NETBIOS
 33

	)

297 
	#AF_PPP
 34

	)

299 
	#AF_ATM
 30

	)

301 
	#p£udo_AF_HDRCMPLT
 35

	)

304 
	#AF_RESERVED_36
 36

	)

306 #i‚de‡
__APPLE__


307 
	#AF_NETGRAPH
 32

	)

309 
	#AF_IEEE80211
 37

	)

310 
	#AF_MAX
 38

	)

316 
	ssockaddr
 {

317 
__uöt8_t
 
	mß_Àn
;

318 
ß_Ámûy_t
 
	mß_Ámûy
;

319 
	mß_d©a
[14];

322 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

323 
	#SOCK_MAXADDRLEN
 255

	)

329 
	ssock¥Ÿo
 {

330 
__uöt16_t
 
	m•_Ámûy
;

331 
__uöt16_t
 
	m•_¥Ÿocﬁ
;

338 
	#_SS_MAXSIZE
 128

	)

339 
	#_SS_ALIGNSIZE
 ((
__öt64_t
))

	)

340 
	#_SS_PAD1SIZE
 \

341 (
_SS_ALIGNSIZE
 - (
__uöt8_t
Ë- (
ß_Ámûy_t
))

	)

342 
	#_SS_PAD2SIZE
 \

343 (
_SS_MAXSIZE
 - (
__uöt8_t
Ë- (
ß_Ámûy_t
) - \

344 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

349 
	ssockaddr_°‹age
 {

350 
__uöt8_t
 
	mss_Àn
;

351 
ß_Ámûy_t
 
	mss_Ámûy
;

352 
	m__ss_∑d1
[
_SS_PAD1SIZE
];

353 
__öt64_t
 
	m__ss_Æign
;

354 
	m__ss_∑d2
[
_SS_PAD2SIZE
];

360 
	#PF_UNSPEC
 
AF_UNSPEC


	)

361 
	#PF_LOCAL
 
AF_LOCAL


	)

362 
	#PF_UNIX
 
PF_LOCAL


	)

363 
	#PF_INET
 
AF_INET


	)

364 
	#PF_IMPLINK
 
AF_IMPLINK


	)

365 
	#PF_PUP
 
AF_PUP


	)

366 
	#PF_CHAOS
 
AF_CHAOS


	)

367 
	#PF_NS
 
AF_NS


	)

368 
	#PF_ISO
 
AF_ISO


	)

369 
	#PF_OSI
 
AF_ISO


	)

370 
	#PF_ECMA
 
AF_ECMA


	)

371 
	#PF_DATAKIT
 
AF_DATAKIT


	)

372 
	#PF_CCITT
 
AF_CCITT


	)

373 
	#PF_SNA
 
AF_SNA


	)

374 
	#PF_DEC√t
 
AF_DEC√t


	)

375 
	#PF_DLI
 
AF_DLI


	)

376 
	#PF_LAT
 
AF_LAT


	)

377 
	#PF_HYLINK
 
AF_HYLINK


	)

378 
	#PF_APPLETALK
 
AF_APPLETALK


	)

379 
	#PF_ROUTE
 
AF_ROUTE


	)

380 
	#PF_LINK
 
AF_LINK


	)

381 
	#PF_XTP
 
p£udo_AF_XTP


	)

382 
	#PF_COIP
 
AF_COIP


	)

383 
	#PF_CNT
 
AF_CNT


	)

384 
	#PF_SIP
 
AF_SIP


	)

385 
	#PF_IPX
 
AF_IPX


	)

386 
	#PF_RTIP
 
p£udo_AF_RTIP


	)

387 
	#PF_PIP
 
p£udo_AF_PIP


	)

388 #ifde‡
__APPLE__


389 
	#PF_NDRV
 
AF_NDRV


	)

391 
	#PF_ISDN
 
AF_ISDN


	)

392 
	#PF_KEY
 
p£udo_AF_KEY


	)

393 
	#PF_INET6
 
AF_INET6


	)

394 
	#PF_NATM
 
AF_NATM


	)

395 #ifde‡
__APPLE__


396 
	#PF_SYSTEM
 
AF_SYSTEM


	)

397 
	#PF_NETBIOS
 
AF_NETBIOS


	)

398 
	#PF_PPP
 
AF_PPP


	)

399 
	#PF_RESERVED_36
 
AF_RESERVED_36


	)

402 
	#PF_ATM
 
AF_ATM


	)

403 
	#PF_NETGRAPH
 
AF_NETGRAPH


	)

406 
	#PF_MAX
 
AF_MAX


	)

411 
	#PF_VLAN
 ((
uöt32_t
)0x766c616eË

	)

412 
	#PF_BOND
 ((
uöt32_t
)0x626f6e64Ë

	)

422 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

423 
	#NET_MAXID
 
AF_MAX


	)

427 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

436 
	#NET_RT_DUMP
 1

	)

437 
	#NET_RT_FLAGS
 2

	)

438 
	#NET_RT_IFLIST
 3

	)

439 
	#NET_RT_STAT
 4

	)

440 
	#NET_RT_TRASH
 5

	)

441 
	#NET_RT_IFLIST2
 6

	)

442 
	#NET_RT_DUMP2
 7

	)

443 
	#NET_RT_MAXID
 8

	)

450 
	#SOMAXCONN
 128

	)

456 
	smsghdr
 {

457 *
	mmsg_«me
;

458 
sockÀn_t
 
	mmsg_«mñí
;

459 
iovec
 *
	mmsg_iov
;

460 
	mmsg_iovÀn
;

461 *
	mmsg_c⁄åﬁ
;

462 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

463 
	mmsg_Êags
;

467 
	#MSG_OOB
 0x1

	)

468 
	#MSG_PEEK
 0x2

	)

469 
	#MSG_DONTROUTE
 0x4

	)

470 
	#MSG_EOR
 0x8

	)

471 
	#MSG_TRUNC
 0x10

	)

472 
	#MSG_CTRUNC
 0x20

	)

473 
	#MSG_WAITALL
 0x40

	)

474 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

475 
	#MSG_DONTWAIT
 0x80

	)

476 
	#MSG_EOF
 0x100

	)

477 #ifde‡
__APPLE__


478 
	#MSG_WAITSTREAM
 0x200

	)

479 
	#MSG_FLUSH
 0x400

	)

480 
	#MSG_HOLD
 0x800

	)

481 
	#MSG_SEND
 0x1000

	)

482 
	#MSG_HAVEMORE
 0x2000

	)

483 
	#MSG_RCVMORE
 0x4000

	)

485 
	#MSG_NEEDSA
 0x10000

	)

494 
	scmsghdr
 {

495 
sockÀn_t
 
	mcmsg_Àn
;

496 
	mcmsg_Àvñ
;

497 
	mcmsg_ty≥
;

501 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

502 #i‚de‡
__APPLE__


508 
	#CMGROUP_MAX
 16

	)

517 
	scmsg¸ed
 {

518 
pid_t
 
	mcm¸ed_pid
;

519 
uid_t
 
	mcm¸ed_uid
;

520 
uid_t
 
	mcm¸ed_euid
;

521 
gid_t
 
	mcm¸ed_gid
;

522 
	mcm¸ed_ngroups
;

523 
gid_t
 
	mcm¸ed_groups
[
CMGROUP_MAX
];

529 
	#CMSG_DATA
(
cmsg
) ((*)(cmsg) + \

530 
	`__DARWIN_ALIGN32
((
cmsghdr
)))

	)

536 
	#CMSG_FIRSTHDR
(
mhdr
) \

537 ((
mhdr
)->
msg_c⁄åﬁÀn
 >(
cmsghdr
) ? \

538 (
cmsghdr
 *)(
mhdr
)->
msg_c⁄åﬁ
 : \

539 (
cmsghdr
 *)0L)

	)

546 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
) \

547 ((*)(
cmsg
Ë=(*)0L ? 
	`CMSG_FIRSTHDR
(
mhdr
) : \

548 ((((*)(
cmsg
) + \

549 
	`__DARWIN_ALIGN32
((
__uöt32_t
)(
cmsg
)->
cmsg_Àn
) + \

550 
	`__DARWIN_ALIGN32
((
cmsghdr
))) > \

551 ((*)(
mhdr
)->
msg_c⁄åﬁ
 + \

552 (
mhdr
)->
msg_c⁄åﬁÀn
)) ? \

553 (
cmsghdr
 *)0L : \

554 (
cmsghdr
 *)((*)(
cmsg
) + \

555 
	`__DARWIN_ALIGN32
((
__uöt32_t
)(
cmsg
)->
cmsg_Àn
))))

	)

557 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

559 
	#CMSG_SPACE
(
l
Ë(
	`__DARWIN_ALIGN32
((
cmsghdr
)Ë+ __DARWIN_ALIGN32÷))

	)

560 
	#CMSG_LEN
(
l
Ë(
	`__DARWIN_ALIGN32
((
cmsghdr
)Ë+ (l))

	)

565 
	#SCM_RIGHTS
 0x01

	)

566 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

567 
	#SCM_TIMESTAMP
 0x02

	)

568 
	#SCM_CREDS
 0x03

	)

575 
	#SHUT_RD
 0

	)

576 
	#SHUT_WR
 1

	)

577 
	#SHUT_RDWR
 2

	)

579 #i‡!
deföed
(
_POSIX_C_SOURCE
)

583 
	ssf_hdå
 {

584 
iovec
 *
	mhódîs
;

585 
	mhdr_˙t
;

586 
iovec
 *
	måaûîs
;

587 
	mål_˙t
;

593 
__BEGIN_DECLS


594 
	$ac˚±
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict)

595 
	`__DARWIN_ALIAS_C
(
ac˚±
);

596 
	$böd
(, c⁄° 
sockaddr
 *, 
sockÀn_t
Ë
	`__DARWIN_ALIAS
(
böd
);

597 
	$c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
Ë
	`__DARWIN_ALIAS_C
–
c⁄√˘
);

598 
	$gë≥î«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict)

599 
	`__DARWIN_ALIAS
(
gë≥î«me
);

600 
	$gësock«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict)

601 
	`__DARWIN_ALIAS
(
gësock«me
);

602 
	`gësock›t
(, , , * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

603 
	$li°í
(, Ë
	`__DARWIN_ALIAS
(
li°í
);

604 
ssize_t
 
	$ªcv
(, *, 
size_t
, Ë
	`__DARWIN_ALIAS_C
(
ªcv
);

605 
ssize_t
 
	$ªcv‰om
(, *, 
size_t
, , 
sockaddr
 * 
__ª°ri˘
,

606 
sockÀn_t
 * 
__ª°ri˘
Ë
	`__DARWIN_ALIAS_C
(
ªcv‰om
);

607 
ssize_t
 
	$ªcvmsg
(, 
msghdr
 *, Ë
	`__DARWIN_ALIAS_C
(
ªcvmsg
);

608 
ssize_t
 
	$£nd
(, c⁄° *, 
size_t
, Ë
	`__DARWIN_ALIAS_C
(
£nd
);

609 
ssize_t
 
	$£ndmsg
(, c⁄° 
msghdr
 *, Ë
	`__DARWIN_ALIAS_C
(
£ndmsg
);

610 
ssize_t
 
	$£ndto
(, c⁄° *, 
size_t
,

611 , c⁄° 
sockaddr
 *, 
sockÀn_t
Ë
	`__DARWIN_ALIAS_C
(
£ndto
);

612 
	`£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

613 
	`shutdown
(, );

614 
	`sock©m¨k
();

615 
	`sockë
(, , );

616 
	$sockë∑ú
(, , , *Ë
	`__DARWIN_ALIAS
(
sockë∑ú
);

618 #i‡!
	`deföed
(
_POSIX_C_SOURCE
)

619 
	`£ndfûe
(, , 
off_t
, off_à*, 
sf_hdå
 *, );

622 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

623 
	`pf˘löput
(, 
sockaddr
 *);

625 
__END_DECLS


	@/usr/include/sys/stat.h

70 #i‚de‡
_SYS_STAT_H_


71 
	#_SYS_STAT_H_


	)

73 
	~<sys/_ty≥s.h
>

74 
	~<sys/cdefs.h
>

75 
	~<Avaûabûôy.h
>

78 
	#__√ed_°ru˘_time•ec


	)

79 
	~<sys/_°ru˘s.h
>

86 #i‚de‡
_BLKCNT_T


87 
__d¨wö_blk˙t_t
 
	tblk˙t_t
;

88 
	#_BLKCNT_T


	)

91 #i‚de‡
_BLKSIZE_T


92 
__d¨wö_blksize_t
 
	tblksize_t
;

93 
	#_BLKSIZE_T


	)

96 #i‚de‡
_DEV_T


97 
__d¨wö_dev_t
 
	tdev_t
;

98 
	#_DEV_T


	)

101 #i‚def 
_INO_T


102 
__d¨wö_öo_t
 
	töo_t
;

103 
	#_INO_T


	)

106 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

107 #i‚def 
_INO64_T


108 
__d¨wö_öo64_t
 
	töo64_t
;

109 
	#_INO64_T


	)

113 #i‚def 
_MODE_T


114 
__d¨wö_mode_t
 
	tmode_t
;

115 
	#_MODE_T


	)

118 #i‚de‡
_NLINK_T


119 
__uöt16_t
 
	t∆ök_t
;

120 
	#_NLINK_T


	)

123 #i‚de‡
_UID_T


124 
__d¨wö_uid_t
 
	tuid_t
;

125 
	#_UID_T


	)

128 #i‚de‡
_GID_T


129 
__d¨wö_gid_t
 
	tgid_t
;

130 
	#_GID_T


	)

133 #i‚de‡
_OFF_T


134 
__d¨wö_off_t
 
	toff_t
;

135 
	#_OFF_T


	)

138 #i‚def 
_TIME_T


139 
	#_TIME_T


	)

140 
__d¨wö_time_t
 
	ttime_t
;

144 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

153 
	so°©
 {

154 
__uöt16_t
 
	m°_dev
;

155 
öo_t
 
	m°_öo
;

156 
mode_t
 
	m°_mode
;

157 
∆ök_t
 
	m°_∆ök
;

158 
__uöt16_t
 
	m°_uid
;

159 
__uöt16_t
 
	m°_gid
;

160 
__uöt16_t
 
	m°_rdev
;

161 
__öt32_t
 
	m°_size
;

162 
time•ec
 
	m°_©ime•ec
;

163 
time•ec
 
	m°_mtime•ec
;

164 
time•ec
 
	m°_˘ime•ec
;

165 
__öt32_t
 
	m°_blksize
;

166 
__öt32_t
 
	m°_blocks
;

167 
__uöt32_t
 
	m°_Êags
;

168 
__uöt32_t
 
	m°_gí
;

171 
	#__DARWIN_STRUCT_STAT64_TIMES
 \

172 
time•ec
 
°_©ime•ec
; \

173 
time•ec
 
°_mtime•ec
; \

174 
time•ec
 
°_˘ime•ec
; \

175 
time•ec
 
°_búthtime•ec
;

	)

179 
	#__DARWIN_STRUCT_STAT64_TIMES
 \

180 
time_t
 
°_©ime
; \

181 
°_©imí£c
; \

182 
time_t
 
°_mtime
; \

183 
°_mtimí£c
; \

184 
time_t
 
°_˘ime
; \

185 
°_˘imí£c
; \

186 
time_t
 
°_búthtime
; \

187 
°_búthtimí£c
;

	)

201 
	#__DARWIN_STRUCT_STAT64
 { \

202 
dev_t
 
°_dev
; \

203 
mode_t
 
°_mode
; \

204 
∆ök_t
 
°_∆ök
; \

205 
__d¨wö_öo64_t
 
°_öo
; \

206 
uid_t
 
°_uid
; \

207 
gid_t
 
°_gid
; \

208 
dev_t
 
°_rdev
; \

209 
__DARWIN_STRUCT_STAT64_TIMES
 \

210 
off_t
 
°_size
; \

211 
blk˙t_t
 
°_blocks
; \

212 
blksize_t
 
°_blksize
; \

213 
__uöt32_t
 
°_Êags
; \

214 
__uöt32_t
 
°_gí
; \

215 
__öt32_t
 
°_l•¨e
; \

216 
__öt64_t
 
°_q•¨e
[2]; \

217 }

	)

223 #i‡
__DARWIN_64_BIT_INO_T


225 
°©
 
	g__DARWIN_STRUCT_STAT64
;

229 
	s°©
 {

230 
dev_t
 
	m°_dev
;

231 
öo_t
 
	m°_öo
;

232 
mode_t
 
	m°_mode
;

233 
∆ök_t
 
	m°_∆ök
;

234 
uid_t
 
	m°_uid
;

235 
gid_t
 
	m°_gid
;

236 
dev_t
 
	m°_rdev
;

237 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

238 
time•ec
 
	m°_©ime•ec
;

239 
time•ec
 
	m°_mtime•ec
;

240 
time•ec
 
	m°_˘ime•ec
;

242 
time_t
 
	m°_©ime
;

243 
	m°_©imí£c
;

244 
time_t
 
	m°_mtime
;

245 
	m°_mtimí£c
;

246 
time_t
 
	m°_˘ime
;

247 
	m°_˘imí£c
;

249 
off_t
 
	m°_size
;

250 
blk˙t_t
 
	m°_blocks
;

251 
blksize_t
 
	m°_blksize
;

252 
__uöt32_t
 
	m°_Êags
;

253 
__uöt32_t
 
	m°_gí
;

254 
__öt32_t
 
	m°_l•¨e
;

255 
__öt64_t
 
	m°_q•¨e
[2];

260 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

262 #i‡!
__DARWIN_ONLY_64_BIT_INO_T


264 
°©64
 
	g__DARWIN_STRUCT_STAT64
;

273 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

274 
	#°_©ime
 
°_©ime•ec
.
tv_£c


	)

275 
	#°_mtime
 
°_mtime•ec
.
tv_£c


	)

276 
	#°_˘ime
 
°_˘ime•ec
.
tv_£c


	)

277 
	#°_búthtime
 
°_búthtime•ec
.
tv_£c


	)

284 #i‚de‡
S_IFMT


286 
	#S_IFMT
 0170000

	)

287 
	#S_IFIFO
 0010000

	)

288 
	#S_IFCHR
 0020000

	)

289 
	#S_IFDIR
 0040000

	)

290 
	#S_IFBLK
 0060000

	)

291 
	#S_IFREG
 0100000

	)

292 
	#S_IFLNK
 0120000

	)

293 
	#S_IFSOCK
 0140000

	)

294 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

295 
	#S_IFWHT
 0160000

	)

300 
	#S_IRWXU
 0000700

	)

301 
	#S_IRUSR
 0000400

	)

302 
	#S_IWUSR
 0000200

	)

303 
	#S_IXUSR
 0000100

	)

305 
	#S_IRWXG
 0000070

	)

306 
	#S_IRGRP
 0000040

	)

307 
	#S_IWGRP
 0000020

	)

308 
	#S_IXGRP
 0000010

	)

310 
	#S_IRWXO
 0000007

	)

311 
	#S_IROTH
 0000004

	)

312 
	#S_IWOTH
 0000002

	)

313 
	#S_IXOTH
 0000001

	)

315 
	#S_ISUID
 0004000

	)

316 
	#S_ISGID
 0002000

	)

317 
	#S_ISVTX
 0001000

	)

319 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

320 
	#S_ISTXT
 
S_ISVTX


	)

321 
	#S_IREAD
 
S_IRUSR


	)

322 
	#S_IWRITE
 
S_IWUSR


	)

323 
	#S_IEXEC
 
S_IXUSR


	)

333 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
Ë

	)

334 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
Ë

	)

335 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
Ë

	)

336 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
Ë

	)

337 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
Ë

	)

338 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
Ë

	)

339 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
Ë

	)

340 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

341 
	#S_ISWHT
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFWHT
Ë

	)

359 
	#S_TYPEISMQ
(
buf
Ë(0Ë

	)

360 
	#S_TYPEISSEM
(
buf
Ë(0Ë

	)

361 
	#S_TYPEISSHM
(
buf
Ë(0Ë

	)

377 
	#S_TYPEISTMO
(
buf
Ë(0Ë

	)

380 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

381 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

383 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISTXT
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

385 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

387 
	#S_BLKSIZE
 512

	)

394 
	#UF_SETTABLE
 0x0000fff‡

	)

395 
	#UF_NODUMP
 0x00000001

	)

396 
	#UF_IMMUTABLE
 0x00000002

	)

397 
	#UF_APPEND
 0x00000004

	)

398 
	#UF_OPAQUE
 0x00000008

	)

404 
	#UF_COMPRESSED
 0x00000020

	)

406 
	#UF_HIDDEN
 0x00008000

	)

411 
	#SF_SETTABLE
 0xffff0000

	)

412 
	#SF_ARCHIVED
 0x00010000

	)

413 
	#SF_IMMUTABLE
 0x00020000

	)

414 
	#SF_APPEND
 0x00040000

	)

427 
__BEGIN_DECLS


429 
	$chmod
(c⁄° *, 
mode_t
Ë
	`__DARWIN_ALIAS
(
chmod
);

430 
	$fchmod
(, 
mode_t
Ë
	`__DARWIN_ALIAS
(
fchmod
);

431 
	$f°©
(, 
°©
 *Ë
	`__DARWIN_INODE64
(
f°©
);

432 
	$l°©
(c⁄° *, 
°©
 *Ë
	`__DARWIN_INODE64
(
l°©
);

433 
	`mkdú
(c⁄° *, 
mode_t
);

434 
	`mkfifo
(c⁄° *, 
mode_t
);

435 
	$°©
(c⁄° *, 
°©
 *Ë
	`__DARWIN_INODE64
(stat);

436 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

437 
mode_t
 
	`umask
(mode_t);

439 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

440 #i‚de‡
_FILESEC_T


441 
_fûe£c
;

442 
_fûe£c
 *
	tfûe£c_t
;

443 
	#_FILESEC_T


	)

445 
	`chÊags
(c⁄° *, 
__uöt32_t
);

446 
	`chmodx_≈
(c⁄° *, 
fûe£c_t
);

447 
	`fchÊags
(, 
__uöt32_t
);

448 
	`fchmodx_≈
(, 
fûe£c_t
);

449 
	$f°©x_≈
(, 
°©
 *, 
fûe£c_t
Ë
	`__DARWIN_INODE64
(
f°©x_≈
);

450 
	`lchÊags
(c⁄° *, 
__uöt32_t
);

451 
	`lchmod
(c⁄° *, 
mode_t
);

452 
	$l°©x_≈
(c⁄° *, 
°©
 *, 
fûe£c_t
Ë
	`__DARWIN_INODE64
(
l°©x_≈
);

453 
	`mkdúx_≈
(c⁄° *, 
fûe£c_t
);

454 
	`mkfifox_≈
(c⁄° *, 
fûe£c_t
);

455 
	$°©x_≈
(c⁄° *, 
°©
 *, 
fûe£c_t
Ë
	`__DARWIN_INODE64
(
°©x_≈
);

456 
	`umaskx_≈
(
fûe£c_t
);

458 #i‡!
__DARWIN_ONLY_64_BIT_INO_T


460 
	$f°©x64_≈
(, 
°©64
 *, 
fûe£c_t
Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

461 
	$l°©x64_≈
(c⁄° *, 
°©64
 *, 
fûe£c_t
Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

462 
	$°©x64_≈
(c⁄° *, 
°©64
 *, 
fûe£c_t
Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

463 
	$f°©64
(, 
°©64
 *Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

464 
	$l°©64
(c⁄° *, 
°©64
 *Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

465 
	$°©64
(c⁄° *, 
°©64
 *Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

469 
__END_DECLS


	@/usr/include/sys/time.h

64 #i‚de‡
_SYS_TIME_H_


65 
	#_SYS_TIME_H_


	)

67 
	~<sys/cdefs.h
>

68 
	~<sys/_ty≥s.h
>

74 
	#__√ed_fd_£t


	)

75 
	#__√ed_°ru˘_time•ec


	)

76 
	#__√ed_°ru˘_timevÆ


	)

77 
	~<sys/_°ru˘s.h
>

79 #i‚def 
_TIME_T


80 
	#_TIME_T


	)

81 
__d¨wö_time_t
 
	ttime_t
;

84 #i‚de‡
_SUSECONDS_T


85 
	#_SUSECONDS_T


	)

86 
__d¨wö_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

93 
	sôimîvÆ
 {

94 
timevÆ
 
	mô_öãrvÆ
;

95 
timevÆ
 
	mô_vÆue
;

102 
	#ITIMER_REAL
 0

	)

103 
	#ITIMER_VIRTUAL
 1

	)

104 
	#ITIMER_PROF
 2

	)

112 #i‚def 
FD_SETSIZE


113 
	#FD_SETSIZE
 
__DARWIN_FD_SETSIZE


	)

115 #i‚de‡
FD_SET


116 
	#FD_SET
(
n
, 
p
Ë
	`__DARWIN_FD_SET
“,Ö)

	)

118 #i‚def 
FD_CLR


119 
	#FD_CLR
(
n
,
p
Ë
	`__DARWIN_FD_CLR
“,Ö)

	)

121 #i‚de‡
FD_ISSET


122 
	#FD_ISSET
(
n
, 
p
Ë
	`__DARWIN_FD_ISSET
“,Ö)

	)

124 #i‚de‡
FD_ZERO


125 
	#FD_ZERO
(
p
Ë
	`__DARWIN_FD_ZERO
’)

	)

128 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

130 #i‚de‡
FD_COPY


131 
	#FD_COPY
(
f
, 
t
Ë
	`__DARWIN_FD_COPY
(f,Å)

	)

134 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

135 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

136 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

137 }

	)

138 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

139 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

140 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

141 }

	)

143 
	stimez⁄e
 {

144 
	mtz_möuãswe°
;

145 
	mtz_d°time
;

147 
	#DST_NONE
 0

	)

148 
	#DST_USA
 1

	)

149 
	#DST_AUST
 2

	)

150 
	#DST_WET
 3

	)

151 
	#DST_MET
 4

	)

152 
	#DST_EET
 5

	)

153 
	#DST_CAN
 6

	)

156 
	#timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

157 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

158 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

159 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

160 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

161 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

162 
	#timîadd
(
tvp
, 
uvp
, 
vvp
) \

164 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

165 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

166 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

167 (
vvp
)->
tv_£c
++; \

168 (
vvp
)->
tv_u£c
 -= 1000000; \

170 } 0)

	)

171 
	#timîsub
(
tvp
, 
uvp
, 
vvp
) \

173 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

174 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

175 i‡((
vvp
)->
tv_u£c
 < 0) { \

176 (
vvp
)->
tv_£c
--; \

177 (
vvp
)->
tv_u£c
 += 1000000; \

179 } 0)

	)

181 
	#timevÆcmp
(
l
, 
r
, 
cmp
Ë
	`timîcmp
÷,Ñ, cmpË

	)

186 
	s˛ocköfo
 {

187 
	mhz
;

188 
	mtick
;

189 
	mtickadj
;

190 
	m°©hz
;

191 
	m¥ofhz
;

196 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

197 
	~<time.h
>

200 
	g__BEGIN_DECLS


202 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

203 
adjtime
(c⁄° 
timevÆ
 *, timeval *);

204 
futimes
(, c⁄° 
timevÆ
 *);

205 
lutimes
(c⁄° *, c⁄° 
timevÆ
 *);

206 
£âimeofday
(c⁄° 
timevÆ
 *, c⁄° 
timez⁄e
 *);

209 
gëôimî
(, 
ôimîvÆ
 *);

210 
gëtimeofday
(
timevÆ
 * 
__ª°ri˘
, * __restrict);

212 
	~<sys/_£À˘.h
>

214 
£tôimî
(, c⁄° 
ôimîvÆ
 * 
__ª°ri˘
,

215 
ôimîvÆ
 * 
__ª°ri˘
);

216 
utimes
(c⁄° *, c⁄° 
timevÆ
 *);

218 
	g__END_DECLS


	@/usr/include/sys/types.h

69 #i‚de‡
_SYS_TYPES_H_


70 
	#_SYS_TYPES_H_


	)

72 
	~<sys/≠∂ópi›ts.h
>

74 #i‚de‡
__ASSEMBLER__


75 
	~<sys/cdefs.h
>

78 
	~<machöe/ty≥s.h
>

79 
	~<sys/_ty≥s.h
>

81 
	~<machöe/ídün.h
>

83 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

84 
	tu_ch¨
;

85 
	tu_sh‹t
;

86 
	tu_öt
;

87 #i‚de‡
_U_LONG


88 
	tu_l⁄g
;

89 
	#_U_LONG


	)

91 
	tush‹t
;

92 
	tuöt
;

95 
u_öt64_t
 
	tu_quad_t
;

96 
öt64_t
 
	tquad_t
;

97 
quad_t
 * 
	tqaddr_t
;

99 * 
	tˇddr_t
;

100 
öt32_t
 
	tdaddr_t
;

102 #i‚de‡
_DEV_T


103 
__d¨wö_dev_t
 
	tdev_t
;

104 
	#_DEV_T


	)

107 
u_öt32_t
 
	tfix±_t
;

109 #i‚de‡
_BLKCNT_T


110 
__d¨wö_blk˙t_t
 
	tblk˙t_t
;

111 
	#_BLKCNT_T


	)

114 #i‚de‡
_BLKSIZE_T


115 
__d¨wö_blksize_t
 
	tblksize_t
;

116 
	#_BLKSIZE_T


	)

119 #i‚de‡
_GID_T


120 
__d¨wö_gid_t
 
	tgid_t
;

121 
	#_GID_T


	)

124 #i‚de‡
_IN_ADDR_T


125 
	#_IN_ADDR_T


	)

126 
__uöt32_t
 
	tö_addr_t
;

129 #i‚de‡
_IN_PORT_T


130 
	#_IN_PORT_T


	)

131 
__uöt16_t
 
	tö_p‹t_t
;

134 #i‚def 
_INO_T


135 
__d¨wö_öo_t
 
	töo_t
;

136 
	#_INO_T


	)

139 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

140 #i‚def 
_INO64_T


141 
__d¨wö_öo64_t
 
	töo64_t
;

142 
	#_INO64_T


	)

146 #i‚de‡
_KEY_T


147 
	#_KEY_T


	)

148 
__öt32_t
 
	tkey_t
;

151 #i‚def 
_MODE_T


152 
__d¨wö_mode_t
 
	tmode_t
;

153 
	#_MODE_T


	)

156 #i‚de‡
_NLINK_T


157 
__uöt16_t
 
	t∆ök_t
;

158 
	#_NLINK_T


	)

161 #i‚de‡
_ID_T


162 
	#_ID_T


	)

163 
__d¨wö_id_t
 
	tid_t
;

166 #i‚de‡
_PID_T


167 
__d¨wö_pid_t
 
	tpid_t
;

168 
	#_PID_T


	)

171 #i‚de‡
_OFF_T


172 
__d¨wö_off_t
 
	toff_t
;

173 
	#_OFF_T


	)

176 
öt32_t
 
	t£gsz_t
;

177 
öt32_t
 
	tswblk_t
;

179 #i‚de‡
_UID_T


180 
__d¨wö_uid_t
 
	tuid_t
;

181 
	#_UID_T


	)

184 #i‚de‡
_ID_T


185 
__d¨wö_id_t
 
	tid_t
;

186 
	#_ID_T


	)

189 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

191 #i‡
deföed
(
__˝lu•lus
)

197 
ölöe
 
__öt32_t
 
	$maj‹
(
__uöt32_t
 
_x
)

199  (
__öt32_t
)(((
__uöt32_t
)
_x
 >> 24) & 0xff);

200 
	}
}

202 
ölöe
 
__öt32_t
 
	$mö‹
(
__uöt32_t
 
_x
)

204  (
__öt32_t
)((
_x
) & 0xffffff);

205 
	}
}

207 
ölöe
 
dev_t
 
	$makedev
(
__uöt32_t
 
_maj‹
, __uöt32_à
_mö‹
)

209  (
dev_t
)(((
_maj‹
Ë<< 24Ë| (
_mö‹
));

210 
	}
}

214 
	#maj‹
(
x
Ë((
öt32_t
)(((
u_öt32_t
)(xË>> 24Ë& 0xff))

	)

215 
	#mö‹
(
x
Ë((
öt32_t
)((xË& 0xffffff))

	)

216 
	#makedev
(
x
,
y
Ë((
dev_t
)(((xË<< 24Ë| (y)))

	)

221 #i‚def 
_CLOCK_T


222 
	#_CLOCK_T


	)

223 
__d¨wö_˛ock_t
 
	t˛ock_t
;

226 #i‚de‡
_SIZE_T


227 
	#_SIZE_T


	)

230 
__d¨wö_size_t
 
	tsize_t
;

233 #i‚def 
_SSIZE_T


234 
	#_SSIZE_T


	)

235 
__d¨wö_ssize_t
 
	tssize_t
;

238 #i‚def 
_TIME_T


239 
	#_TIME_T


	)

240 
__d¨wö_time_t
 
	ttime_t
;

243 #i‚de‡
_USECONDS_T


244 
	#_USECONDS_T


	)

245 
__d¨wö_u£c⁄ds_t
 
	tu£c⁄ds_t
;

248 #i‚de‡
_SUSECONDS_T


249 
	#_SUSECONDS_T


	)

250 
__d¨wö_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

253 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

259 
	#__√ed_fd_£t


	)

260 
	~<sys/_°ru˘s.h
>

262 
	#NBBY
 
__DARWIN_NBBY


	)

263 
	#NFDBITS
 
__DARWIN_NFDBITS


	)

264 
	#howm™y
(
x
, 
y
Ë
	`__DARWIN_howm™y
(x, yË

	)

265 
__öt32_t
 
	tfd_mask
;

273 #i‚def 
FD_SETSIZE


274 
	#FD_SETSIZE
 
__DARWIN_FD_SETSIZE


	)

276 #i‚de‡
FD_SET


277 
	#FD_SET
(
n
, 
p
Ë
	`__DARWIN_FD_SET
“,Ö)

	)

279 #i‚de‡
FD_CLR


280 
	#FD_CLR
(
n
, 
p
Ë
	`__DARWIN_FD_CLR
“,Ö)

	)

282 #i‚de‡
FD_ISSET


283 
	#FD_ISSET
(
n
, 
p
Ë
	`__DARWIN_FD_ISSET
“,Ö)

	)

285 #i‚de‡
FD_ZERO


286 
	#FD_ZERO
(
p
Ë
	`__DARWIN_FD_ZERO
’)

	)

288 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

289 #i‚de‡
FD_COPY


290 
	#FD_COPY
(
f
, 
t
Ë
	`__DARWIN_FD_COPY
(f,Å)

	)

295 #i‡
deföed
(
__STDC__
Ë&& deföed(
KERNEL
)

301 
	g¥oc
;

302 
	gpgΩ
;

303 
	gu¸ed
;

304 
	grußge
;

305 
	gfûe
;

306 
	gbuf
;

307 
	gây
;

308 
	guio
;

314 #i‚de‡
__POSIX_LIB__


316 #i‚de‡
_PTHREAD_ATTR_T


317 
	#_PTHREAD_ATTR_T


	)

318 
__d¨wö_±hªad_©å_t
 
	t±hªad_©å_t
;

320 #i‚de‡
_PTHREAD_COND_T


321 
	#_PTHREAD_COND_T


	)

322 
__d¨wö_±hªad_c⁄d_t
 
	t±hªad_c⁄d_t
;

324 #i‚de‡
_PTHREAD_CONDATTR_T


325 
	#_PTHREAD_CONDATTR_T


	)

326 
__d¨wö_±hªad_c⁄d©å_t
 
	t±hªad_c⁄d©å_t
;

328 #i‚de‡
_PTHREAD_MUTEX_T


329 
	#_PTHREAD_MUTEX_T


	)

330 
__d¨wö_±hªad_muãx_t
 
	t±hªad_muãx_t
;

332 #i‚de‡
_PTHREAD_MUTEXATTR_T


333 
	#_PTHREAD_MUTEXATTR_T


	)

334 
__d¨wö_±hªad_muãx©å_t
 
	t±hªad_muãx©å_t
;

336 #i‚de‡
_PTHREAD_ONCE_T


337 
	#_PTHREAD_ONCE_T


	)

338 
__d¨wö_±hªad_⁄˚_t
 
	t±hªad_⁄˚_t
;

340 #i‚de‡
_PTHREAD_RWLOCK_T


341 
	#_PTHREAD_RWLOCK_T


	)

342 
__d¨wö_±hªad_rwlock_t
 
	t±hªad_rwlock_t
;

344 #i‚de‡
_PTHREAD_RWLOCKATTR_T


345 
	#_PTHREAD_RWLOCKATTR_T


	)

346 
__d¨wö_±hªad_rwlock©å_t
 
	t±hªad_rwlock©å_t
;

348 #i‚de‡
_PTHREAD_T


349 
	#_PTHREAD_T


	)

350 
__d¨wö_±hªad_t
 
	t±hªad_t
;

355 #i‚de‡
_PTHREAD_KEY_T


356 
	#_PTHREAD_KEY_T


	)

357 
__d¨wö_±hªad_key_t
 
	t±hªad_key_t
;

361 #i‚de‡
_FSBLKCNT_T


362 
	#_FSBLKCNT_T


	)

363 
__d¨wö_fsblk˙t_t
 
	tfsblk˙t_t
;

366 #i‚de‡
_FSFILCNT_T


367 
	#_FSFILCNT_T


	)

368 
__d¨wö_fsfû˙t_t
 
	tfsfû˙t_t
;

	@/usr/include/sys/wait.h

64 #i‚de‡
_SYS_WAIT_H_


65 
	#_SYS_WAIT_H_


	)

67 
	~<sys/cdefs.h
>

68 
	~<sys/_ty≥s.h
>

80 
	mP_ALL
,

81 
	mP_PID
,

82 
	mP_PGID


83 } 
	tidty≥_t
;

89 #i‚de‡
_PID_T


90 
__d¨wö_pid_t
 
	tpid_t
;

91 
	#_PID_T


	)

94 #i‚de‡
_ID_T


95 
__d¨wö_id_t
 
	tid_t
;

96 
	#_ID_T


	)

116 
	~<sys/sig«l.h
>

117 
	~<sys/ªsour˚.h
>

128 
	#WNOHANG
 0x00000001

	)

129 
	#WUNTRACED
 0x00000002

	)

135 #i‡
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_DARWIN_C_SOURCE
)

136 
	#_W_INT
(
i
Ë(i)

	)

138 
	#_W_INT
(
w
Ë(*(*)&(w)Ë

	)

139 
	#WCOREFLAG
 0200

	)

143 
	#_WSTATUS
(
x
Ë(
	`_W_INT
(xË& 0177)

	)

144 
	#_WSTOPPED
 0177

	)

150 #i‡
__DARWIN_UNIX03


151 
	#WEXITSTATUS
(
x
Ë((
	`_W_INT
(xË>> 8Ë& 0x000000ff)

	)

153 
	#WEXITSTATUS
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

156 
	#WSTOPSIG
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

157 
	#WIFCONTINUED
(
x
Ë(
	`_WSTATUS
(xË=
_WSTOPPED
 && 
	`WSTOPSIG
(xË=0x13)

	)

158 
	#WIFSTOPPED
(
x
Ë(
	`_WSTATUS
(xË=
_WSTOPPED
 && 
	`WSTOPSIG
(xË!0x13)

	)

159 
	#WIFEXITED
(
x
Ë(
	`_WSTATUS
(xË=0)

	)

160 
	#WIFSIGNALED
(
x
Ë(
	`_WSTATUS
(xË!
_WSTOPPED
 && _WSTATUS(xË!0)

	)

161 
	#WTERMSIG
(
x
Ë(
	`_WSTATUS
(x))

	)

162 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

163 
	#WCOREDUMP
(
x
Ë(
	`_W_INT
(xË& 
WCOREFLAG
)

	)

165 
	#W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

166 
	#W_STOPCODE
(
sig
Ë((sigË<< 8 | 
_WSTOPPED
)

	)

175 
	#WEXITED
 0x00000004

	)

176 #i‡
__DARWIN_UNIX03


178 
	#WSTOPPED
 0x00000008

	)

180 
	#WCONTINUED
 0x00000010

	)

181 
	#WNOWAIT
 0x00000020

	)

184 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

190 
	#WAIT_ANY
 (-1Ë

	)

191 
	#WAIT_MYPGRP
 0

	)

193 
	~<machöe/ídün.h
>

201 
	uwaô
 {

202 
	mw_°©us
;

207 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_LITTLE_ENDIAN


208 
	mw_Tîmsig
:7,

209 
	mw_C‹edump
:1,

210 
	mw_Rëcode
:8,

211 
	mw_FûÀr
:16;

213 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_BIG_ENDIAN


214 
	mw_FûÀr
:16,

215 
	mw_Rëcode
:8,

216 
	mw_C‹edump
:1,

217 
	mw_Tîmsig
:7;

219 } 
	mw_T
;

226 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_LITTLE_ENDIAN


227 
	mw_St›vÆ
:8,

228 
	mw_St›sig
:8,

229 
	mw_FûÀr
:16;

231 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_BIG_ENDIAN


232 
	mw_FûÀr
:16,

233 
	mw_St›sig
:8,

234 
	mw_St›vÆ
:8;

236 } 
	mw_S
;

238 
	#w_ãrmsig
 
w_T
.
w_Tîmsig


	)

239 
	#w_c‹edump
 
w_T
.
w_C‹edump


	)

240 
	#w_ªtcode
 
w_T
.
w_Rëcode


	)

241 
	#w_°›vÆ
 
w_S
.
w_St›vÆ


	)

242 
	#w_°›sig
 
w_S
.
w_St›sig


	)

246 #i‡!(
__DARWIN_UNIX03
 - 0)

251 
	#WSTOPPED
 
_WSTOPPED


	)

254 
__BEGIN_DECLS


255 
pid_t
 
	$waô
(*Ë
	`__DARWIN_ALIAS_C
(
waô
);

256 
pid_t
 
	$waôpid
(
pid_t
, *, Ë
	`__DARWIN_ALIAS_C
(
waôpid
);

257 #i‚de‡
_ANSI_SOURCE


258 
	$waôid
(
idty≥_t
, 
id_t
, 
sigöfo_t
 *, Ë
	`__DARWIN_ALIAS_C
(
waôid
);

260 #i‡ (!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

261 
pid_t
 
	`waô3
(*, , 
rußge
 *);

262 
pid_t
 
	`waô4
’id_t, *, , 
rußge
 *);

264 
__END_DECLS


	@/usr/include/termios.h

23 #i‚de‡
__TERMIOS_H__


24 
	#__TERMIOS_H__


	)

26 
	~<sys/cdefs.h
>

27 
	~<sys/ãrmios.h
>

28 
	~<_ty≥s.h
>

30 #i‚de‡
_PID_T


31 
__d¨wö_pid_t
 
	tpid_t
;

32 
	#_PID_T


	)

35 
__BEGIN_DECLS


36 
pid_t
 
tcgësid
();

37 
	g__END_DECLS


	@/usr/include/unistd.h

68 #i‚de‡
_UNISTD_H_


69 
	#_UNISTD_H_


	)

71 
	~<_ty≥s.h
>

72 
	~<sys/uni°d.h
>

74 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

75 #i‚de‡
_DEV_T


76 
	#_DEV_T


	)

77 
__d¨wö_dev_t
 
	tdev_t
;

81 #i‚de‡
_GID_T


82 
	#_GID_T


	)

83 
__d¨wö_gid_t
 
	tgid_t
;

86 #i‚de‡
_INTPTR_T


87 
	#_INTPTR_T


	)

88 
__d¨wö_öçå_t
 
	töçå_t
;

91 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

92 #i‚de‡
_MODE_T


93 
	#_MODE_T


	)

94 
__d¨wö_mode_t
 
	tmode_t
;

98 #i‚de‡
_OFF_T


99 
	#_OFF_T


	)

100 
__d¨wö_off_t
 
	toff_t
;

103 #i‚de‡
_PID_T


104 
	#_PID_T


	)

105 
__d¨wö_pid_t
 
	tpid_t
;

108 #i‚de‡
_SIZE_T


109 
	#_SIZE_T


	)

112 
__d¨wö_size_t
 
	tsize_t
;

115 #i‚def 
_SSIZE_T


116 
	#_SSIZE_T


	)

117 
__d¨wö_ssize_t
 
	tssize_t
;

120 #i‚de‡
_UID_T


121 
	#_UID_T


	)

122 
__d¨wö_uid_t
 
	tuid_t
;

125 #i‚de‡
_USECONDS_T


126 
	#_USECONDS_T


	)

127 
__d¨wö_u£c⁄ds_t
 
	tu£c⁄ds_t
;

130 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

131 #i‚de‡
_UUID_T


132 
	#_UUID_T


	)

133 
__d¨wö_uuid_t
 
	tuuid_t
;

137 
	#STDIN_FILENO
 0

	)

138 
	#STDOUT_FILENO
 1

	)

139 
	#STDERR_FILENO
 2

	)

141 #i‚de‡
NULL


142 
	#NULL
 
__DARWIN_NULL


	)

147 
	#_XOPEN_VERSION
 600

	)

148 
	#_XOPEN_XCU_VERSION
 4

	)

152 
	#_POSIX_ADVISORY_INFO
 (-1Ë

	)

153 
	#_POSIX_ASYNCHRONOUS_IO
 (-1Ë

	)

154 
	#_POSIX_BARRIERS
 (-1Ë

	)

155 
	#_POSIX_CHOWN_RESTRICTED
 200112L

	)

156 
	#_POSIX_CLOCK_SELECTION
 (-1Ë

	)

157 
	#_POSIX_CPUTIME
 (-1Ë

	)

158 
	#_POSIX_FSYNC
 200112L

	)

159 
	#_POSIX_IPV6
 200112L

	)

160 
	#_POSIX_JOB_CONTROL
 200112L

	)

161 
	#_POSIX_MAPPED_FILES
 200112L

	)

162 
	#_POSIX_MEMLOCK
 (-1Ë

	)

163 
	#_POSIX_MEMLOCK_RANGE
 (-1Ë

	)

164 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

165 
	#_POSIX_MESSAGE_PASSING
 (-1Ë

	)

166 
	#_POSIX_MONOTONIC_CLOCK
 (-1Ë

	)

167 
	#_POSIX_NO_TRUNC
 200112L

	)

168 
	#_POSIX_PRIORITIZED_IO
 (-1Ë

	)

169 
	#_POSIX_PRIORITY_SCHEDULING
 (-1Ë

	)

170 
	#_POSIX_RAW_SOCKETS
 (-1Ë

	)

171 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

172 
	#_POSIX_REALTIME_SIGNALS
 (-1Ë

	)

173 
	#_POSIX_REGEXP
 200112L

	)

174 
	#_POSIX_SAVED_IDS
 200112L

	)

175 
	#_POSIX_SEMAPHORES
 (-1Ë

	)

176 
	#_POSIX_SHARED_MEMORY_OBJECTS
 (-1Ë

	)

177 
	#_POSIX_SHELL
 200112L

	)

178 
	#_POSIX_SPAWN
 (-1Ë

	)

179 
	#_POSIX_SPIN_LOCKS
 (-1Ë

	)

180 
	#_POSIX_SPORADIC_SERVER
 (-1Ë

	)

181 
	#_POSIX_SYNCHRONIZED_IO
 (-1Ë

	)

182 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

183 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

184 
	#_POSIX_THREAD_CPUTIME
 (-1Ë

	)

185 
	#_POSIX_THREAD_PRIO_INHERIT
 (-1Ë

	)

186 
	#_POSIX_THREAD_PRIO_PROTECT
 (-1Ë

	)

187 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 (-1Ë

	)

188 
	#_POSIX_THREAD_PROCESS_SHARED
 200112L

	)

189 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

190 
	#_POSIX_THREAD_SPORADIC_SERVER
 (-1Ë

	)

191 
	#_POSIX_THREADS
 200112L

	)

192 
	#_POSIX_TIMEOUTS
 (-1Ë

	)

193 
	#_POSIX_TIMERS
 (-1Ë

	)

194 
	#_POSIX_TRACE
 (-1Ë

	)

195 
	#_POSIX_TRACE_EVENT_FILTER
 (-1Ë

	)

196 
	#_POSIX_TRACE_INHERIT
 (-1Ë

	)

197 
	#_POSIX_TRACE_LOG
 (-1Ë

	)

198 
	#_POSIX_TYPED_MEMORY_OBJECTS
 (-1Ë

	)

199 #i‚de‡
_POSIX_VDISABLE


200 
	#_POSIX_VDISABLE
 0xf‡

	)

203 
	#_POSIX2_C_BIND
 200112L

	)

204 
	#_POSIX2_C_DEV
 200112L

	)

205 
	#_POSIX2_CHAR_TERM
 200112L

	)

206 
	#_POSIX2_FORT_DEV
 (-1Ë

	)

207 
	#_POSIX2_FORT_RUN
 200112L

	)

208 
	#_POSIX2_LOCALEDEF
 200112L

	)

209 
	#_POSIX2_PBS
 (-1)

	)

210 
	#_POSIX2_PBS_ACCOUNTING
 (-1)

	)

211 
	#_POSIX2_PBS_CHECKPOINT
 (-1)

	)

212 
	#_POSIX2_PBS_LOCATE
 (-1)

	)

213 
	#_POSIX2_PBS_MESSAGE
 (-1)

	)

214 
	#_POSIX2_PBS_TRACK
 (-1)

	)

215 
	#_POSIX2_SW_DEV
 200112L

	)

216 
	#_POSIX2_UPE
 200112L

	)

218 
	#_V6_ILP32_OFF32
 (-1)

	)

219 
	#_V6_ILP32_OFFBIG
 (1)

	)

220 
	#_V6_LP64_OFF64
 (-1)

	)

221 
	#_V6_LPBIG_OFFBIG
 (-1)

	)

223 
	#_XBS5_ILP32_OFF32
 
_V6_ILP32_OFF32


	)

224 
	#_XBS5_ILP32_OFFBIG
 
_V6_ILP32_OFFBIG


	)

225 
	#_XBS5_LP64_OFF64
 
_V6_LP64_OFF64


	)

226 
	#_XBS5_LPBIG_OFFBIG
 
_V6_LPBIG_OFFBIG


	)

228 
	#_XOPEN_CRYPT
 (1)

	)

229 
	#_XOPEN_ENH_I18N
 (1Ë

	)

230 
	#_XOPEN_LEGACY
 (-1Ë

	)

231 
	#_XOPEN_REALTIME
 (-1Ë

	)

232 
	#_XOPEN_REALTIME_THREADS
 (-1Ë

	)

233 
	#_XOPEN_SHM
 (1)

	)

234 
	#_XOPEN_STREAMS
 (-1)

	)

235 
	#_XOPEN_UNIX
 (1)

	)

238 
	#F_ULOCK
 0

	)

239 
	#F_LOCK
 1

	)

240 
	#F_TLOCK
 2

	)

241 
	#F_TEST
 3

	)

244 
	#_SC_ARG_MAX
 1

	)

245 
	#_SC_CHILD_MAX
 2

	)

246 
	#_SC_CLK_TCK
 3

	)

247 
	#_SC_NGROUPS_MAX
 4

	)

248 
	#_SC_OPEN_MAX
 5

	)

249 
	#_SC_JOB_CONTROL
 6

	)

250 
	#_SC_SAVED_IDS
 7

	)

251 
	#_SC_VERSION
 8

	)

252 
	#_SC_BC_BASE_MAX
 9

	)

253 
	#_SC_BC_DIM_MAX
 10

	)

254 
	#_SC_BC_SCALE_MAX
 11

	)

255 
	#_SC_BC_STRING_MAX
 12

	)

256 
	#_SC_COLL_WEIGHTS_MAX
 13

	)

257 
	#_SC_EXPR_NEST_MAX
 14

	)

258 
	#_SC_LINE_MAX
 15

	)

259 
	#_SC_RE_DUP_MAX
 16

	)

260 
	#_SC_2_VERSION
 17

	)

261 
	#_SC_2_C_BIND
 18

	)

262 
	#_SC_2_C_DEV
 19

	)

263 
	#_SC_2_CHAR_TERM
 20

	)

264 
	#_SC_2_FORT_DEV
 21

	)

265 
	#_SC_2_FORT_RUN
 22

	)

266 
	#_SC_2_LOCALEDEF
 23

	)

267 
	#_SC_2_SW_DEV
 24

	)

268 
	#_SC_2_UPE
 25

	)

269 
	#_SC_STREAM_MAX
 26

	)

270 
	#_SC_TZNAME_MAX
 27

	)

271 
	#_SC_ASYNCHRONOUS_IO
 28

	)

272 
	#_SC_PAGESIZE
 29

	)

273 
	#_SC_MEMLOCK
 30

	)

274 
	#_SC_MEMLOCK_RANGE
 31

	)

275 
	#_SC_MEMORY_PROTECTION
 32

	)

276 
	#_SC_MESSAGE_PASSING
 33

	)

277 
	#_SC_PRIORITIZED_IO
 34

	)

278 
	#_SC_PRIORITY_SCHEDULING
 35

	)

279 
	#_SC_REALTIME_SIGNALS
 36

	)

280 
	#_SC_SEMAPHORES
 37

	)

281 
	#_SC_FSYNC
 38

	)

282 
	#_SC_SHARED_MEMORY_OBJECTS
 39

	)

283 
	#_SC_SYNCHRONIZED_IO
 40

	)

284 
	#_SC_TIMERS
 41

	)

285 
	#_SC_AIO_LISTIO_MAX
 42

	)

286 
	#_SC_AIO_MAX
 43

	)

287 
	#_SC_AIO_PRIO_DELTA_MAX
 44

	)

288 
	#_SC_DELAYTIMER_MAX
 45

	)

289 
	#_SC_MQ_OPEN_MAX
 46

	)

290 
	#_SC_MAPPED_FILES
 47

	)

291 
	#_SC_RTSIG_MAX
 48

	)

292 
	#_SC_SEM_NSEMS_MAX
 49

	)

293 
	#_SC_SEM_VALUE_MAX
 50

	)

294 
	#_SC_SIGQUEUE_MAX
 51

	)

295 
	#_SC_TIMER_MAX
 52

	)

296 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

297 
	#_SC_NPROCESSORS_CONF
 57

	)

298 
	#_SC_NPROCESSORS_ONLN
 58

	)

300 
	#_SC_2_PBS
 59

	)

301 
	#_SC_2_PBS_ACCOUNTING
 60

	)

302 
	#_SC_2_PBS_CHECKPOINT
 61

	)

303 
	#_SC_2_PBS_LOCATE
 62

	)

304 
	#_SC_2_PBS_MESSAGE
 63

	)

305 
	#_SC_2_PBS_TRACK
 64

	)

306 
	#_SC_ADVISORY_INFO
 65

	)

307 
	#_SC_BARRIERS
 66

	)

308 
	#_SC_CLOCK_SELECTION
 67

	)

309 
	#_SC_CPUTIME
 68

	)

310 
	#_SC_FILE_LOCKING
 69

	)

311 
	#_SC_GETGR_R_SIZE_MAX
 70

	)

312 
	#_SC_GETPW_R_SIZE_MAX
 71

	)

313 
	#_SC_HOST_NAME_MAX
 72

	)

314 
	#_SC_LOGIN_NAME_MAX
 73

	)

315 
	#_SC_MONOTONIC_CLOCK
 74

	)

316 
	#_SC_MQ_PRIO_MAX
 75

	)

317 
	#_SC_READER_WRITER_LOCKS
 76

	)

318 
	#_SC_REGEXP
 77

	)

319 
	#_SC_SHELL
 78

	)

320 
	#_SC_SPAWN
 79

	)

321 
	#_SC_SPIN_LOCKS
 80

	)

322 
	#_SC_SPORADIC_SERVER
 81

	)

323 
	#_SC_THREAD_ATTR_STACKADDR
 82

	)

324 
	#_SC_THREAD_ATTR_STACKSIZE
 83

	)

325 
	#_SC_THREAD_CPUTIME
 84

	)

326 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 85

	)

327 
	#_SC_THREAD_KEYS_MAX
 86

	)

328 
	#_SC_THREAD_PRIO_INHERIT
 87

	)

329 
	#_SC_THREAD_PRIO_PROTECT
 88

	)

330 
	#_SC_THREAD_PRIORITY_SCHEDULING
 89

	)

331 
	#_SC_THREAD_PROCESS_SHARED
 90

	)

332 
	#_SC_THREAD_SAFE_FUNCTIONS
 91

	)

333 
	#_SC_THREAD_SPORADIC_SERVER
 92

	)

334 
	#_SC_THREAD_STACK_MIN
 93

	)

335 
	#_SC_THREAD_THREADS_MAX
 94

	)

336 
	#_SC_TIMEOUTS
 95

	)

337 
	#_SC_THREADS
 96

	)

338 
	#_SC_TRACE
 97

	)

339 
	#_SC_TRACE_EVENT_FILTER
 98

	)

340 
	#_SC_TRACE_INHERIT
 99

	)

341 
	#_SC_TRACE_LOG
 100

	)

342 
	#_SC_TTY_NAME_MAX
 101

	)

343 
	#_SC_TYPED_MEMORY_OBJECTS
 102

	)

344 
	#_SC_V6_ILP32_OFF32
 103

	)

345 
	#_SC_V6_ILP32_OFFBIG
 104

	)

346 
	#_SC_V6_LP64_OFF64
 105

	)

347 
	#_SC_V6_LPBIG_OFFBIG
 106

	)

348 
	#_SC_IPV6
 118

	)

349 
	#_SC_RAW_SOCKETS
 119

	)

350 
	#_SC_SYMLOOP_MAX
 120

	)

351 
	#_SC_ATEXIT_MAX
 107

	)

352 
	#_SC_IOV_MAX
 56

	)

353 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

354 
	#_SC_XOPEN_CRYPT
 108

	)

355 
	#_SC_XOPEN_ENH_I18N
 109

	)

356 
	#_SC_XOPEN_LEGACY
 110

	)

357 
	#_SC_XOPEN_REALTIME
 111

	)

358 
	#_SC_XOPEN_REALTIME_THREADS
 112

	)

359 
	#_SC_XOPEN_SHM
 113

	)

360 
	#_SC_XOPEN_STREAMS
 114

	)

361 
	#_SC_XOPEN_UNIX
 115

	)

362 
	#_SC_XOPEN_VERSION
 116

	)

363 
	#_SC_XOPEN_XCU_VERSION
 121

	)

364 
	#_SC_XBS5_ILP32_OFF32
 122

	)

365 
	#_SC_XBS5_ILP32_OFFBIG
 123

	)

366 
	#_SC_XBS5_LP64_OFF64
 124

	)

367 
	#_SC_XBS5_LPBIG_OFFBIG
 125

	)

368 
	#_SC_SS_REPL_MAX
 126

	)

369 
	#_SC_TRACE_EVENT_NAME_MAX
 127

	)

370 
	#_SC_TRACE_NAME_MAX
 128

	)

371 
	#_SC_TRACE_SYS_MAX
 129

	)

372 
	#_SC_TRACE_USER_EVENT_MAX
 130

	)

373 
	#_SC_PASS_MAX
 131

	)

375 #i‚de‡
_CS_PATH


376 
	#_CS_PATH
 1

	)

378 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 2

	)

379 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 3

	)

380 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 4

	)

381 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 5

	)

382 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 6

	)

383 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 7

	)

384 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 8

	)

385 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 9

	)

386 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 10

	)

387 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 11

	)

388 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 12

	)

389 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 13

	)

390 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 14

	)

393 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 20

	)

394 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 21

	)

395 
	#_CS_XBS5_ILP32_OFF32_LIBS
 22

	)

396 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 23

	)

397 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 24

	)

398 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 25

	)

399 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 26

	)

400 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 27

	)

401 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 28

	)

402 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 29

	)

403 
	#_CS_XBS5_LP64_OFF64_LIBS
 30

	)

404 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 31

	)

405 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 32

	)

406 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 33

	)

407 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 34

	)

408 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 35

	)

410 
	#_CS_DARWIN_USER_DIR
 65536

	)

411 
	#_CS_DARWIN_USER_TEMP_DIR
 65537

	)

412 
	#_CS_DARWIN_USER_CACHE_DIR
 65538

	)

414 
__BEGIN_DECLS


416 
	$_exô
(Ë
__dód2
;

417 
	`ac˚ss
(const *, );

419 
	`Æ¨m
();

420 
	`chdú
(const *);

421 
	`chown
(c⁄° *, 
uid_t
, 
gid_t
);

422 
	$˛o£
(Ë
	`__DARWIN_ALIAS_C
(
˛o£
);

423 
size_t
 
	$c⁄f°r
(, *, 
size_t
Ë
	`__DARWIN_ALIAS
(
c⁄f°r
);

424 *
	`¸y±
(const *, const *);

425 *
	`˘îmid
(*);

426 
	`dup
();

427 
	`dup2
(, );

428 #i‡
__DARWIN_UNIX03


429 
	$í¸y±
(*, Ë
	`__DARWIN_ALIAS
(
í¸y±
);

431 
	`í¸y±
(*, );

433 
	`exe˛
(const *, const *, ...);

434 
	`exe˛e
(const *, const *, ...);

435 
	`exe˛p
(const *, const *, ...);

436 
	`execv
(const *, * const *);

437 
	`execve
(const *, * const *, * const *);

438 
	`execvp
(const *, * const *);

439 
	`fchown
(, 
uid_t
, 
gid_t
);

440 
	`fchdú
();

441 
pid_t
 
	`f‹k
();

442 
	`Â©hc⁄f
(, );

443 
	$fsync
(Ë
	`__DARWIN_ALIAS_C
(
fsync
);

444 
	`·runˇã
(, 
off_t
);

445 *
	`gëcwd
(*, 
size_t
);

446 
gid_t
 
	`gëegid
();

447 
uid_t
 
	`gëeuid
();

448 
gid_t
 
	`gëgid
();

449 #i‡
	`deföed
(
_DARWIN_UNLIMITED_GETGROUPS
Ë|| deföed(
_DARWIN_C_SOURCE
)

450 
	$gëgroups
(, 
gid_t
 []Ë
	`__DARWIN_EXTSN
(
gëgroups
);

452 
	`gëgroups
(, 
gid_t
 []);

454 
	`gëho°id
();

455 
	`gëho°«me
(*, 
size_t
);

456 *
	`gëlogö
();

457 
	`gëlogö_r
(*, 
size_t
);

458 
	$gë›t
(, * c⁄° [], c⁄° *Ë
	`__DARWIN_ALIAS
(
gë›t
);

459 
pid_t
 
	`gëpgid
(pid_t);

460 
pid_t
 
	`gëpgΩ
();

461 
pid_t
 
	`gëpid
();

462 
pid_t
 
	`gëµid
();

463 
pid_t
 
	`gësid
(pid_t);

464 
uid_t
 
	`gëuid
();

465 *
	`gëwd
(*);

466 
	`ißây
();

467 
	$lchown
(c⁄° *, 
uid_t
, 
gid_t
Ë
	`__DARWIN_ALIAS
(
lchown
);

468 
	`lök
(const *, const *);

469 
	$lockf
(, , 
off_t
Ë
	`__DARWIN_ALIAS_C
(
lockf
);

470 
off_t
 
	`l£ek
(, off_t, );

471 
	$ni˚
(Ë
	`__DARWIN_ALIAS
(
ni˚
);

472 
	`∑thc⁄f
(const *, );

473 
	$∑u£
(Ë
	`__DARWIN_ALIAS_C
(
∑u£
);

474 
	`pùe
([2]);

475 
ssize_t
 
	$¥ód
(, *, 
size_t
, 
off_t
Ë
	`__DARWIN_ALIAS_C
(
¥ód
);

476 
ssize_t
 
	$pwrôe
(, c⁄° *, 
size_t
, 
off_t
Ë
	`__DARWIN_ALIAS_C
(
pwrôe
);

477 
ssize_t
 
	$ªad
(, *, 
size_t
Ë
	`__DARWIN_ALIAS_C
(
ªad
);

478 
ssize_t
 
	`ªadlök
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

479 
	`rmdú
(const *);

480 
	`£ãgid
(
gid_t
);

481 
	`£ãuid
(
uid_t
);

482 
	`£tgid
(
gid_t
);

483 
	`£çgid
(
pid_t
,Öid_t);

484 #i‡
__DARWIN_UNIX03


485 
pid_t
 
	$£çgΩ
(Ë
	`__DARWIN_ALIAS
(
£çgΩ
);

487 
	`£çgΩ
(
pid_t
 
pid
,Öid_à
pgΩ
);

489 
	$£åegid
(
gid_t
, gid_tË
	`__DARWIN_ALIAS
(
£åegid
);

490 
	$£åeuid
(
uid_t
, uid_tË
	`__DARWIN_ALIAS
(
£åeuid
);

491 
pid_t
 
	`£tsid
();

492 
	`£tuid
(
uid_t
);

494 
	$¶ìp
(Ë
	`__DARWIN_ALIAS_C
(
¶ìp
);

495 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

496 
	`symlök
(const *, const *);

497 
	`sync
();

498 
	`sysc⁄f
();

499 
pid_t
 
	`tcgëpgΩ
();

500 
	`tc£çgΩ
(, 
pid_t
);

501 
	`åunˇã
(c⁄° *, 
off_t
);

502 *
	`ây«me
();

503 #i‡
__DARWIN_UNIX03


504 
	$ây«me_r
(, *, 
size_t
Ë
	`__DARWIN_ALIAS
(
ây«me_r
);

506 *
	`ây«me_r
(, *, 
size_t
);

508 
u£c⁄ds_t


509 
	`uÆ¨m
(
u£c⁄ds_t
, useconds_t);

510 
	`u∆ök
(const *);

511 
	$u¶ìp
(
u£c⁄ds_t
Ë
	`__DARWIN_ALIAS_C
(
u¶ìp
);

512 
pid_t
 
	`vf‹k
();

513 
ssize_t
 
	$wrôe
(, c⁄° *, 
size_t
Ë
	`__DARWIN_ALIAS_C
(
wrôe
);

515 *
›èrg
;

516 
›töd
, 
›ãº
, 
›t›t
;

518 #if !
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

519 
	~<sys/£À˘.h
>

521 
	$_Exô
(Ë
__dód2
;

522 
	`ac˚ssx_≈
(c⁄° 
ac˚ssx_des¸ùt‹
 *, 
size_t
, *, 
uid_t
);

523 
	`ac˘
(const *);

524 
	`add_¥ofû
(*, 
size_t
, , );

525 *
	`brk
(const *);

526 
	`chroŸ
(const *);

527 
	`ídu£rshñl
();

528 
	`execvP
(const *, const *, * const *);

529 *
	`fÊag°o°r
();

530 
	`gëdèbÀsize
();

531 
	`gëdomaö«me
(*, );

532 
	`gëgrou∂i°
(const *, , *, *);

533 
	`gëho°uuid
(
uuid_t
, c⁄° 
time•ec
 *);

534 
mode_t
 
	`gëmode
(const *, mode_t);

535 
	$gë∑gesize
(Ë
__puª2
;

536 *
	`gë∑ss
(const *);

537 
	`gë≥îeid
(, 
uid_t
 *, 
gid_t
 *);

538 
	`gëpgid
(
pid_t
 
_pid
);

539 
	`gësgroups_≈
(*, 
uuid_t
);

540 
	`gësid
(
pid_t
 
_pid
);

541 *
	`gëu£rshñl
();

542 
	`gëwgroups_≈
(*, 
uuid_t
);

543 
	`öôgroups
(const *, );

544 
	`úu£rok
(, , const *, const *);

545 
	`úu£rok_ß
(const *, , , const *, const *);

546 
	`is£tugid
();

547 *
	`mkdãmp
(*);

548 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

549 
	`mk°emp
(*);

550 
	`mk°emps
(*, );

551 *
	`mkãmp
(*);

552 
	`nfssvc
(, *);

553 
	`¥ofû
(*, 
size_t
, , );

554 
	`±hªad_£tugid_≈
(
uid_t
, 
gid_t
);

555 
	`±hªad_gëugid_≈
–
uid_t
 *, 
gid_t
 *);

556 
	`rcmd
(**, , const *, const *, const *, *);

557 
	`rcmd_af
(**, , const *, const *, const *, *,

559 
	`ªboŸ
();

560 
	`ªvoke
(const *);

561 
	`ºesvp‹t
(*);

562 
	`ºesvp‹t_af
(*, );

563 
	`ru£rok
(const *, , const *, const *);

564 *
	`sbrk
();

565 
	`£tdomaö«me
(const *, );

566 
	`£tgroups
(, c⁄° 
gid_t
 *);

567 
	`£tho°id
();

568 
	`£tho°«me
(const *, );

569 #i‡
__DARWIN_UNIX03


570 
	$£tkey
(c⁄° *Ë
	`__DARWIN_ALIAS
(
£tkey
);

572 
	`£tkey
(const *);

574 
	`£éogö
(const *);

575 *
	$£tmode
(c⁄° *Ë
	`__DARWIN_ALIAS
(
£tmode
);

576 
	`£ågid
(
gid_t
);

577 
	`£åuid
(
uid_t
);

578 
	`£tsgroups_≈
(, c⁄° 
uuid_t
);

579 
	`£tu£rshñl
();

580 
	`£twgroups_≈
(, c⁄° 
uuid_t
);

581 
	`°πofÊags
(**, *, *);

582 
	`sw≠⁄
(const *);

583 
	`sysˇŒ
(, ...);

584 
	`ây¶Ÿ
();

585 
	`undñëe
(const *);

586 
	`unwhôeout
(const *);

587 *
	`vÆloc
(
size_t
);

589 *
sub›èrg
;

590 
	`gësub›t
(**, * const *, **);

593 #ifde‡
__LP64__


594 
	`fgë©åli°
(,*,*,
size_t
,);

595 
	`f£èâæi°
(,*,*,
size_t
,);

596 
	$gë©åli°
(c⁄° *,*,*,
size_t
,Ë
	`__DARWIN_ALIAS
(
gë©åli°
);

597 
	$£èâæi°
(c⁄° *,*,*,
size_t
,Ë
	`__DARWIN_ALIAS
(
£èâæi°
);

598 
	`exch™ged©a
(const *,const *,);

599 
	`gëdúíåõßâr
(,*,*,
size_t
,*,*,*,);

602 
	`fgë©åli°
(,*,*,
size_t
,);

603 
	`f£èâæi°
(,*,*,
size_t
,);

604 
	$gë©åli°
(c⁄° *,*,*,
size_t
,Ë
	`__DARWIN_ALIAS
(
gë©åli°
);

605 
	$£èâæi°
(c⁄° *,*,*,
size_t
,Ë
	`__DARWIN_ALIAS
(
£èâæi°
);

606 
	`exch™ged©a
(const *,const *,);

607 
	`gëdúíåõßâr
(,*,*,
size_t
,*,*,*,);

611 
fs£¨chblock
;

612 
£¨ch°©e
;

614 
	`£¨chfs
(c⁄° *, 
fs£¨chblock
 *, *, , , 
£¨ch°©e
 *);

615 
	`fs˘l
(const *,,*,);

616 
	`ffs˘l
(,,*,);

618 
›åe£t
;

621 
__END_DECLS


	@/usr/include/Availability.h

24 #i‚de‡
__AVAILABILITY__


25 
	#__AVAILABILITY__


	)

111 
	#__MAC_10_0
 1000

	)

112 
	#__MAC_10_1
 1010

	)

113 
	#__MAC_10_2
 1020

	)

114 
	#__MAC_10_3
 1030

	)

115 
	#__MAC_10_4
 1040

	)

116 
	#__MAC_10_5
 1050

	)

117 
	#__MAC_10_6
 1060

	)

118 
	#__MAC_NA
 9999

	)

120 
	#__IPHONE_2_0
 20000

	)

121 
	#__IPHONE_2_1
 20100

	)

122 
	#__IPHONE_2_2
 20200

	)

123 
	#__IPHONE_3_0
 30000

	)

124 
	#__IPHONE_NA
 99999

	)

126 
	~<AvaûabûôyI¡î«l.h
>

129 #ifde‡
__IPHONE_OS_VERSION_MIN_REQUIRED


130 
	#__OSX_AVAILABLE_STARTING
(
_mac
, 
_ùh⁄e
Ë
__AVAILABILITY_INTERNAL
##
	)
_iphone

131 
	#__OSX_AVAILABLE_BUT_DEPRECATED
(
_macI¡ro
, 
_macDï
, 
_ùh⁄eI¡ro
, 
_ùh⁄eDï
) \

132 
__AVAILABILITY_INTERNAL
##
_ùh⁄eI¡ro
##
_DEP
##
_ùh⁄eDï


	)

134 #ñi‡
deföed
(
__MAC_OS_X_VERSION_MIN_REQUIRED
)

135 
	#__OSX_AVAILABLE_STARTING
(
_mac
, 
_ùh⁄e
Ë
__AVAILABILITY_INTERNAL
##
	)
_mac

136 
	#__OSX_AVAILABLE_BUT_DEPRECATED
(
_macI¡ro
, 
_macDï
, 
_ùh⁄eI¡ro
, 
_ùh⁄eDï
) \

137 
__AVAILABILITY_INTERNAL
##
_macI¡ro
##
_DEP
##
_macDï


	)

140 
	#__OSX_AVAILABLE_STARTING
(
_mac
, 
_ùh⁄e
)

	)

141 
	#__OSX_AVAILABLE_BUT_DEPRECATED
(
_macI¡ro
, 
_macDï
, 
_ùh⁄eI¡ro
, 
_ùh⁄eDï
)

	)

	@/usr/include/_types.h

24 #i‚de‡
__TYPES_H_


25 
	#__TYPES_H_


	)

27 
	~<sys/_ty≥s.h
>

29 #i‡
__GNUC__
 > 2 || __GNUC__ =2 && 
__GNUC_MINOR__
 >= 7

30 
	#__°rfm⁄like
(
fmèrg
, 
fú°v¨¨g
) \

31 
	`__©åibuã__
((
	`__f‹m©__
 (
__°rfm⁄__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

32 
	#__°r·imñike
(
fmèrg
) \

33 
	`__©åibuã__
((
	`__f‹m©__
 (
__°r·ime__
, 
fmèrg
, 0)))

	)

35 
	#__°rfm⁄like
(
fmèrg
, 
fú°v¨¨g
)

	)

36 
	#__°r·imñike
(
fmèrg
)

	)

39 
	t__d¨wö_∆_ôem
;

40 
	t__d¨wö_w˘øns_t
;

41 #ifde‡
__LP64__


42 
__uöt32_t
 
	t__d¨wö_w˘y≥_t
;

44 
	t__d¨wö_w˘y≥_t
;

47 #ifde‡
__WCHAR_MAX__


48 
	#__DARWIN_WCHAR_MAX
 
__WCHAR_MAX__


	)

50 
	#__DARWIN_WCHAR_MAX
 0x7fffffff

	)

53 #i‡
__DARWIN_WCHAR_MAX
 > 0xffffU

54 
	#__DARWIN_WCHAR_MIN
 (-0x7ffffff‡- 1)

	)

56 
	#__DARWIN_WCHAR_MIN
 0

	)

58 
	#__DARWIN_WEOF
 ((
__d¨wö_wöt_t
)-1)

	)

60 #i‚de‡
_FORTIFY_SOURCE


61 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1050)

62 
	#_FORTIFY_SOURCE
 0

	)

64 
	#_FORTIFY_SOURCE
 2

	)

	@/usr/include/_xlocale.h

24 #i‚de‡
__XLOCALE_H_


25 
	#__XLOCALE_H_


	)

27 
	~<sys/cdefs.h
>

29 
__BEGIN_DECLS


30 
___mb_cur_max
();

31 
___mb_cur_max_l
(
loˇÀ_t
);

32 
	g__END_DECLS


	@/usr/include/alloca.h

24 #i‚de‡
_ALLOCA_H_


25 
	#_ALLOCA_H_


	)

27 
	~<sys/cdefs.h
>

28 
	~<_ty≥s.h
>

30 #i‚def 
_SIZE_T


31 
	#_SIZE_T


	)

32 
__d¨wö_size_t
 
	tsize_t
;

35 
__BEGIN_DECLS


36 *
Æloˇ
(
size_t
);

37 
	g__END_DECLS


39 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 3

41 #unde‡
Æloˇ


42 #unde‡
__Æloˇ


43 
	#Æloˇ
(
size
Ë
	`__Æloˇ
(size)

	)

44 
	#__Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
(size)

	)

	@/usr/include/architecture/i386/math.h

30 #i‚de‡
__MATH__


31 
	#__MATH__


	)

33 
	~"sys/cdefs.h
"

35 #ifde‡
__˝lu•lus


48 #i‡
__FLT_EVAL_METHOD__
 == 0

49 
	tÊﬂt_t
;

50 
	tdoubÀ_t
;

51 #ñi‡
__FLT_EVAL_METHOD__
 == 1

52 
	tÊﬂt_t
;

53 
	tdoubÀ_t
;

54 #ñi‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ == -1

55 
	tÊﬂt_t
;

56 
	tdoubÀ_t
;

62 #i‡
deföed
(
__GNUC__
)

63 
	#HUGE_VAL
 
	`__buûtö_huge_vÆ
()

	)

64 
	#HUGE_VALF
 
	`__buûtö_huge_vÆf
()

	)

65 
	#HUGE_VALL
 
	`__buûtö_huge_vÆl
()

	)

66 
	#NAN
 
	`__buûtö_«nf
("0x7fc00000"Ë

	)

67 
	#__MATH_H_ALWAYS_INLINE__
 
	`__©åibuã__
 ((
Æways_ölöe
))

	)

69 
	#HUGE_VAL
 1e500

	)

70 
	#HUGE_VALF
 1e50f

	)

71 
	#HUGE_VALL
 1e5000L

	)

72 
	#NAN
 
	`__«n
–)

	)

73 
	#__MATH_H_ALWAYS_INLINE__


	)

76 
	#INFINITY
 
HUGE_VALF


	)

83 
	#FP_NAN
 1

	)

84 
	#FP_INFINITE
 2

	)

85 
	#FP_ZERO
 3

	)

86 
	#FP_NORMAL
 4

	)

87 
	#FP_SUBNORMAL
 5

	)

88 
	#FP_SUPERNORMAL
 6

	)

95 #unde‡
FP_FAST_FMA


96 #unde‡
FP_FAST_FMAF


97 #unde‡
FP_FAST_FMAL


100 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

101 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

104 
	#MATH_ERRNO
 1

	)

105 
	#MATH_ERREXCEPT
 2

	)

107 
	#m©h_îrh™dlög
 (
	`__m©h_îrh™dlög
())

	)

108 
__m©h_îrh™dlög
 ( );

123 
	#Â˛assify
(
x
) \

124 – (
x
Ë=(Ë? 
	`__Â˛assifyf
(()(x)) \

125 :  (
x
Ë=(Ë? 
	`__Â˛assifyd
(()(x)) \

126 : 
	`__Â˛assify
 (()(
x
)))

	)

128 
__Â˛assifyf
();

129 
__Â˛assifyd
();

130 
__Â˛assify
 ();

132 #i‡
deföed
–
__GNUC__
 ) && 0 =
__FINITE_MATH_ONLY__


138 
	#i¢‹mÆ
(
x
) \

139 – (
x
Ë=(Ë? 
	`__ölöe_i¢‹mÆf
(()(x)) \

140 :  (
x
Ë=(Ë? 
	`__ölöe_i¢‹mÆd
(()(x)) \

141 : 
	`__ölöe_i¢‹mÆ
 (()(
x
)))

	)

143 
	#isföôe
(
x
) \

144 – (
x
Ë=(Ë? 
	`__ölöe_isföôef
(()(x)) \

145 :  (
x
Ë=(Ë? 
	`__ölöe_isföôed
(()(x)) \

146 : 
	`__ölöe_isföôe
 (()(
x
)))

	)

148 
	#isöf
(
x
) \

149 – (
x
Ë=(Ë? 
	`__ölöe_isöff
(()(x)) \

150 :  (
x
Ë=(Ë? 
	`__ölöe_isöfd
(()(x)) \

151 : 
	`__ölöe_isöf
 (()(
x
)))

	)

153 
	#i¢™
(
x
) \

154 – (
x
Ë=(Ë? 
	`__ölöe_i¢™f
(()(x)) \

155 :  (
x
Ë=(Ë? 
	`__ölöe_i¢™d
(()(x)) \

156 : 
	`__ölöe_i¢™
 (()(
x
)))

	)

158 
	#signbô
(
x
) \

159 – (
x
Ë=(Ë? 
	`__ölöe_signbôf
(()(x)) \

160 :  (
x
Ë=(Ë? 
	`__ölöe_signbôd
(()(x)) \

161 : 
	`__ölöe_signbô
(()(
x
)))

	)

163 
__ölöe__
 
__ölöe_isföôef
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

164 
__ölöe__
 
__ölöe_isföôed
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

165 
__ölöe__
 
__ölöe_isföôe
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

166 
__ölöe__
 
__ölöe_isöff
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

167 
__ölöe__
 
__ölöe_isöfd
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

168 
__ölöe__
 
__ölöe_isöf
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

169 
__ölöe__
 
__ölöe_i¢™f
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

170 
__ölöe__
 
__ölöe_i¢™d
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

171 
__ölöe__
 
__ölöe_i¢™
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

172 
__ölöe__
 
__ölöe_i¢‹mÆf
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

173 
__ölöe__
 
__ölöe_i¢‹mÆd
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

174 
__ölöe__
 
__ölöe_i¢‹mÆ
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

175 
__ölöe__
 
__ölöe_signbôf
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

176 
__ölöe__
 
__ölöe_signbôd
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

177 
__ölöe__
 
__ölöe_signbô
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

179 
__ölöe__
 
__ölöe_isöff
–
__x
 ) {  
__buûtö_Ábsf
(__xË=
__buûtö_öff
(); }

180 
__ölöe__
 
__ölöe_isöfd
–
__x
 ) {  
__buûtö_Ábs
(__xË=
__buûtö_öf
(); }

181 
__ölöe__
 
__ölöe_isöf
–
__x
 ) {  
__buûtö_Áb¶
(__xË=
__buûtö_öÊ
(); }

182 
__ölöe__
 
__ölöe_isföôef
–
__x
 ) {  
	g__x
 =__x && 
__buûtö_Ábsf
(__xË!
__buûtö_öff
(); }

183 
__ölöe__
 
__ölöe_isföôed
–
__x
 ) {  
	g__x
 =__x && 
__buûtö_Ábs
(__xË!
__buûtö_öf
(); }

184 
__ölöe__
 
__ölöe_isföôe
–
__x
 ) {  
	g__x
 =__x && 
__buûtö_Áb¶
(__xË!
__buûtö_öÊ
(); }

185 
__ölöe__
 
__ölöe_i¢™f
–
__x
 ) {  
	g__x
 != __x; }

186 
__ölöe__
 
__ölöe_i¢™d
–
__x
 ) {  
	g__x
 != __x; }

187 
__ölöe__
 
__ölöe_i¢™
–
__x
 ) {  
	g__x
 != __x; }

188 
__ölöe__
 
__ölöe_signbôf
–
__x
 ) { uni⁄{ 
	g__f
; 
	g__u
; }__u; __u.__f = __x;  ()(__u.__u >> 31); }

189 
__ölöe__
 
__ölöe_signbôd
–
__x
 ) { uni⁄{ 
	g__f
; 
	g__u
[2]; }__u; __u.__f = __x;  ()(__u.__u[1] >> 31); }

190 
__ölöe__
 
__ölöe_signbô
–
__x
 ){ uni⁄{ 
	g__ld
; såu˘{ 
	g__m
[2]; 
	g__£xp
; }
	g__p
; }
	g__u
; __u.__ld = __x;  () ((() __u.__p.__sexp) >> 15); }

191 
__ölöe__
 
__ölöe_i¢‹mÆf
–
__x
 ) { 
	gÁbsf
 = 
__buûtö_Ábsf
(__x); if–
	g__x
 !__x )  0;  fabs‡< 
__buûtö_öff
(Ë&& fabs‡>
__FLT_MIN__
; }

192 
__ölöe__
 
__ölöe_i¢‹mÆd
–
__x
 ) { 
	gÁbsf
 = 
__buûtö_Ábs
(__x); if–
	g__x
 !__x )  0;  fabs‡< 
__buûtö_öf
(Ë&& fabs‡>
__DBL_MIN__
; }

193 
__ölöe__
 
__ölöe_i¢‹mÆ
–
__x
 ) { 
	gÁbsf
 = 
__buûtö_Áb¶
(__x); if–
	g__x
 !__x )  0;  fabs‡< 
__buûtö_öÊ
(Ë&& fabs‡>
__LDBL_MIN__
; }

197 
	#i¢‹mÆ
(
x
) \

198 – (
x
Ë=(Ë? 
	`__i¢‹mÆf
(()(x)) \

199 :  (
x
Ë=(Ë? 
	`__i¢‹mÆd
(()(x)) \

200 : 
	`__i¢‹mÆ
 (()(
x
)))

	)

202 
	#isföôe
(
x
) \

203 – (
x
Ë=(Ë? 
	`__isföôef
(()(x)) \

204 :  (
x
Ë=(Ë? 
	`__isföôed
(()(x)) \

205 : 
	`__isföôe
 (()(
x
)))

	)

207 
	#isöf
(
x
) \

208 – (
x
Ë=(Ë? 
	`__isöff
(()(x)) \

209 :  (
x
Ë=(Ë? 
	`__isöfd
(()(x)) \

210 : 
	`__isöf
 (()(
x
)))

	)

212 
	#i¢™
(
x
) \

213 – (
x
Ë=(Ë? 
	`__i¢™f
(()(x)) \

214 :  (
x
Ë=(Ë? 
	`__i¢™d
(()(x)) \

215 : 
	`__i¢™
 (()(
x
)))

	)

217 
	#signbô
(
x
) \

218 – (
x
Ë=(Ë? 
	`__signbôf
(()(x)) \

219 :  (
x
Ë=(Ë? 
	`__signbôd
(()(x)) \

220 : 
	`__signbôl
(()(
x
)))

	)

223 
__i¢‹mÆf
 ();

224 
__i¢‹mÆd
 ();

225 
__i¢‹mÆ
 ();

227 
__isföôef
 ();

228 
__isföôed
 ();

229 
__isföôe
 ();

231 
__isöff
 ();

232 
__isöfd
 ();

233 
__isöf
 ();

235 
__i¢™f
 ();

236 
__i¢™d
 ();

237 
__i¢™
 ();

239 
__signbôf
 ();

240 
__signbôd
 ();

241 
__signbôl
 ();

253 
acos
( );

254 
acosf
( );

256 
asö
( );

257 
asöf
( );

259 
©™
( );

260 
©™f
( );

262 
©™2
( , );

263 
©™2f
( , );

265 
cos
( );

266 
cosf
( );

268 
sö
( );

269 
söf
( );

271 
èn
( );

272 
ènf
( );

274 
acosh
( );

275 
acoshf
( );

277 
asöh
( );

278 
asöhf
( );

280 
©™h
( );

281 
©™hf
( );

283 
cosh
( );

284 
coshf
( );

286 
söh
( );

287 
söhf
( );

289 
ènh
( );

290 
ènhf
( );

292 
exp
 ( );

293 
expf
 ( );

295 
exp2
 ( );

296 
exp2f
 ( );

298 
expm1
 ( );

299 
expm1f
 ( );

301 
log
 ( );

302 
logf
 ( );

304 
log10
 ( );

305 
log10f
 ( );

307 
log2
 ( );

308 
log2f
 ( );

310 
log1p
 ( );

311 
log1pf
 ( );

313 
logb
 ( );

314 
logbf
 ( );

316 
modf
 ( , * );

317 
modff
 ( , * );

319 
ldexp
 ( , );

320 
ldexpf
 ( , );

322 
‰exp
 ( , * );

323 
‰expf
 ( , * );

325 
ûogb
 ( );

326 
ûogbf
 ( );

328 
sˇlbn
 ( , );

329 
sˇlbnf
 ( , );

331 
sˇlb 
 ( , );

332 
sˇlb f
 ( , );

334 
Ábs
( );

335 
Ábsf
( );

337 
cbπ
( );

338 
cbπf
( );

340 
hypŸ
 ( , );

341 
hypŸf
 ( , );

343 
pow
 ( , );

344 
powf
 ( , );

346 
sqπ
( );

347 
sqπf
( );

349 
îf
( );

350 
îff
( );

352 
îfc
( );

353 
îfcf
( );

360 
lgamma
( );

361 
lgammaf
( );

363 
tgamma
( );

364 
tgammaf
( );

366 
˚û
 ( );

367 
˚ûf
 ( );

369 
Êo‹
 ( );

370 
Êo‹f
 ( );

372 
√¨byöt
 ( );

373 
√¨byötf
 ( );

375 
röt
 ( );

376 
rötf
 ( );

378 
Ãöt
 ( );

379 
Ãötf
 ( );

381 
round
 ( );

382 
roundf
 ( );

384 
Ãound
 ( );

385 
Ãoundf
 ( );

387 #i‡–
deföed
 (
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901L ) || ! deföed–
__STRICT_ANSI__
 ) || ! deföed–
__GNUC__
 )

390 
Œröt
 ( );

391 
Œrötf
 ( );

393 
Œround
 ( );

394 
Œroundf
 ( );

398 
åunc
 ( );

399 
åuncf
 ( );

401 
fmod
 ( , );

402 
fmodf
 ( , );

404 
ªmaödî
 ( , );

405 
ªmaödîf
 ( , );

407 
ªmquo
 ( , , * );

408 
ªmquof
 ( , , * );

410 
c›ysign
 ( , );

411 
c›ysignf
 ( , );

413 
«n
( const * );

414 
«nf
( const * );

416 
√xè·î
 ( , );

417 
√xè·îf
 ( , );

419 
fdim
 ( , );

420 
fdimf
 ( , );

422 
fmax
 ( , );

423 
fmaxf
 ( , );

425 
fmö
 ( , );

426 
fmöf
 ( , );

428 
fma
 ( , , );

429 
fmaf
 ( , , );

431 
aco¶
();

432 
asöl
();

433 
©™l
();

434 
©™2l
(, );

435 
co¶
();

436 
söl
();

437 
è∆
();

438 
acoshl
();

439 
asöhl
();

440 
©™hl
();

441 
coshl
();

442 
söhl
();

443 
ènhl
();

444 
ex∂
();

445 
exp2l
();

446 
expm1l
();

447 
logl
();

448 
log10l
();

449 
log2l
();

450 
log1∂
();

451 
logbl
();

452 
modÊ
(, *);

453 
ldex∂
(, );

454 
‰ex∂
(, *);

455 
ûogbl
();

456 
sˇlb∆
(, );

457 
sˇlb l
(, );

458 
Áb¶
();

459 
cbπl
();

460 
hypŸl
(, );

461 
powl
(, );

462 
sqπl
();

463 
îÊ
();

464 
îf˛
();

471 
lgammÆ
();

473 
tgammÆ
();

474 
˚ûl
();

475 
Êo‹l
();

476 
√¨byöé
();

477 
röé
();

478 
Ãöé
();

479 
roundl
();

480 
Ãoundl
();

482 #i‡–
deföed
 (
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901L ) || ! deföed–
__STRICT_ANSI__
 ) || ! deföed–
__GNUC__
 )

484 
Œröé
();

485 
Œroundl
();

488 
åun˛
();

489 
fmodl
(, );

490 
ªmaödîl
(, );

491 
ªmquﬁ
(, , *);

492 
c›ysig∆
(, );

493 
«∆
(const *);

494 
√xè·îl
(, );

495 
√xâow¨d
(, );

496 
√xâow¨df
(, );

497 
√xâow¨dl
(, );

498 
fdiml
(, );

499 
fmaxl
(, );

500 
fmöl
(, );

501 
fmÆ
(, , );

503 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
 ((x),(y))

	)

504 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
 ((x),(y))

	)

505 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
 ((x),(y))

	)

506 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
 ((x),(y))

	)

507 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
 ((x),(y))

	)

508 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
 ((x),(y))

	)

510 
__öf
( );

511 
__öff
( );

512 
__öÊ
( );

513 
__«n
( );

515 #i‡!
deföed
(
_ANSI_SOURCE
)

516 
j0
 ( );

518 
j1
 ( );

520 
jn
 ( , );

522 
y0
 ( );

524 
y1
 ( );

526 
yn
 ( , );

528 
sˇlb
 ( , );

531 
	#M_E
 2.71828182845904523536028747135266250

	)

532 
	#M_LOG2E
 1.44269504088896340735992468100189214

	)

533 
	#M_LOG10E
 0.434294481903251827651128918916605082

	)

534 
	#M_LN2
 0.693147180559945309417232121458176568

	)

535 
	#M_LN10
 2.30258509299404568401799145468436421

	)

536 
	#M_PI
 3.14159265358979323846264338327950288

	)

537 
	#M_PI_2
 1.57079632679489661923132169163975144

	)

538 
	#M_PI_4
 0.785398163397448309615660845819875721

	)

539 
	#M_1_PI
 0.318309886183790671537767526745028724

	)

540 
	#M_2_PI
 0.636619772367581343075535053490057448

	)

541 
	#M_2_SQRTPI
 1.12837916709551257389615890312154517

	)

542 
	#M_SQRT2
 1.41421356237309504880168872420969808

	)

543 
	#M_SQRT1_2
 0.707106781186547524400844362104849039

	)

545 
	#MAXFLOAT
 (()3.40282346638528860e+38)

	)

546 
signgam
;

551 #i‡!
deföed
(
__NOEXTENSIONS__
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

552 
	#__WANT_EXTENSIONS__


	)

555 #ifde‡
__WANT_EXTENSIONS__


557 
	#FP_SNAN
 
FP_NAN


	)

558 
	#FP_QNAN
 
FP_NAN


	)

560 
röâﬁ
 ( );

562 
roundtﬁ
 ( );

567 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

568 #i‡(!
deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

569 #i‡!
deföed
(
__˝lu•lus
)

571 
	sex˚±i⁄
 {

572 
	gty≥
;

573 *
	g«me
;

574 
	g¨g1
;

575 
	g¨g2
;

576 
	gªtvÆ
;

580 
	#HUGE
 
MAXFLOAT


	)

587 
	#X_TLOSS
 1.41484755040568800000e+16

	)

589 
	#DOMAIN
 1

	)

590 
	#SING
 2

	)

591 
	#OVERFLOW
 3

	)

592 
	#UNDERFLOW
 4

	)

593 
	#TLOSS
 5

	)

594 
	#PLOSS
 6

	)

599 #i‡!
deföed
–
__STRICT_ANSI__
Ë&& !deföed(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

600 
föôe
 ( );

602 
gamma
 ( );

604 #i‡(!
deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

606 #i‡!
deföed
(
__˝lu•lus
)

607 
m©hîr
 ( 
ex˚±i⁄
 * );

613 
signifiˇnd
 ( );

618 
dªm
 ( , );

625 #ifde‡
_REENTRANT


626 
	~<AvaûabûôyMa¸os.h
>

628 
lgammaf_r
 ( , * ) 
AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER
;

629 
lgamma_r
 ( , * ) 
AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER
;

630 
lgammÆ_r
 ( , * ) 
AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER
;

638 #ifde‡
__˝lu•lus


	@/usr/include/architecture/ppc/math.h

30 #i‚de‡
__MATH__


31 
	#__MATH__


	)

33 
	~"sys/cdefs.h
"

35 #i‡(!
deföed
(
__WANT_LONG_DOUBLE_FORMAT__
))

36 #i‡
deföed
(
__APPLE_CC__
Ë&& deföed(
__LONG_DOUBLE_128__
)

37 
	#__WANT_LONG_DOUBLE_FORMAT__
 128

	)

39 
	#__WANT_LONG_DOUBLE_FORMAT__
 64

	)

43 #i‡–
__WANT_LONG_DOUBLE_FORMAT__
 - 0L == 128L )

44 
	#__LIBMLDBL_COMPAT
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË"$LDBL128")

	)

45 #ñi‡–
__WANT_LONG_DOUBLE_FORMAT__
 - 0L == 64L )

46 
	#__LIBMLDBL_COMPAT
(
sym
Ë

	)

48 
	#__LIBMLDBL_COMPAT
(
sym
Ë

	)

51 #ifde‡
__˝lu•lus


64 #i‡
__FLT_EVAL_METHOD__
 == 0

65 
	tÊﬂt_t
;

66 
	tdoubÀ_t
;

67 #ñi‡
__FLT_EVAL_METHOD__
 == 1

68 
	tÊﬂt_t
;

69 
	tdoubÀ_t
;

70 #ñi‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ == -1

71 
	tÊﬂt_t
;

72 
	tdoubÀ_t
;

78 #i‡
deföed
(
__GNUC__
Ë&& ! deföed–
__XLC__
 )

79 
	#HUGE_VAL
 
	`__buûtö_huge_vÆ
()

	)

80 
	#HUGE_VALF
 
	`__buûtö_huge_vÆf
()

	)

81 
	#HUGE_VALL
 
	`__buûtö_huge_vÆl
()

	)

82 
	#NAN
 
	`__buûtö_«nf
("0x7fc00000"Ë

	)

83 
	#__MATH_H_ALWAYS_INLINE__
 
	`__©åibuã__
 ((
Æways_ölöe
))

	)

85 
	#HUGE_VAL
 1e500

	)

86 
	#HUGE_VALF
 1e50f

	)

87 
	#HUGE_VALL
 1e500L

	)

88 
	#NAN
 
	`__«n
–)

	)

89 
	#__MATH_H_ALWAYS_INLINE__


	)

92 
	#INFINITY
 
HUGE_VALF


	)

98 
	#FP_NAN
 1

	)

99 
	#FP_INFINITE
 2

	)

100 
	#FP_ZERO
 3

	)

101 
	#FP_NORMAL
 4

	)

102 
	#FP_SUBNORMAL
 5

	)

103 
	#FP_SUPERNORMAL
 6

	)

106 #unde‡
FP_FAST_FMA


107 #unde‡
FP_FAST_FMAF


108 #unde‡
FP_FAST_FMAL


111 
	#FP_ILOGB0
 (-2147483647)

	)

112 
	#FP_ILOGBNAN
 (2147483647)

	)

115 
	#MATH_ERRNO
 1

	)

116 
	#MATH_ERREXCEPT
 2

	)

118 
	#m©h_îrh™dlög
 (
	`__m©h_îrh™dlög
())

	)

119 
__m©h_îrh™dlög
 ( );

134 #i‡(
__WANT_LONG_DOUBLE_FORMAT__
 - 0L == 128L)

135 
	#Â˛assify
(
x
) \

136 – (
x
Ë=(Ë? 
	`__Â˛assifyf
(()x) \

137 :  (
x
Ë=(Ë? 
	`__Â˛assifyd
(()x) \

138 : 
	`__Â˛assify
 (()
x
))

	)

140 
__Â˛assifyf
();

141 
__Â˛assifyd
();

142 
__Â˛assify
 ();

144 #i‡
deföed
–
__GNUC__
 ) && ! deföed–
__XLC__
 ) && 0 =
__FINITE_MATH_ONLY__


151 
	#i¢‹mÆ
(
x
) \

152 – (
x
Ë=(Ë? 
	`__ölöe_i¢‹mÆf
(()(x)) \

153 :  (
x
Ë=(Ë? 
	`__ölöe_i¢‹mÆd
(()(x)) \

154 : 
	`__ölöe_i¢‹mÆ
 (()(
x
)))

	)

156 
	#isföôe
(
x
) \

157 – (
x
Ë=(Ë? 
	`__ölöe_isföôef
(()(x)) \

158 :  (
x
Ë=(Ë? 
	`__ölöe_isföôed
(()(x)) \

159 : 
	`__ölöe_isföôe
 (()(
x
)))

	)

161 
	#isöf
(
x
) \

162 – (
x
Ë=(Ë? 
	`__ölöe_isöff
(()(x)) \

163 :  (
x
Ë=(Ë? 
	`__ölöe_isöfd
(()(x)) \

164 : 
	`__ölöe_isöf
 (()(
x
)))

	)

166 
	#i¢™
(
x
) \

167 – (
x
Ë=(Ë? 
	`__ölöe_i¢™f
(()(x)) \

168 :  (
x
Ë=(Ë? 
	`__ölöe_i¢™d
(()(x)) \

169 : 
	`__ölöe_i¢™
 (()(
x
)))

	)

171 
	#signbô
(
x
) \

172 – (
x
Ë=(Ë? 
	`__ölöe_signbôf
(()(x)) \

173 :  (
x
Ë=(Ë? 
	`__ölöe_signbôd
(()(x)) \

174 : 
	`__ölöe_signbô
(()(
x
)))

	)

179 
__ölöe__
 
__ölöe_isföôef
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

180 
__ölöe__
 
__ölöe_isföôed
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

181 
__ölöe__
 
__ölöe_isföôe
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

182 
__ölöe__
 
__ölöe_isöff
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

183 
__ölöe__
 
__ölöe_isöfd
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

184 
__ölöe__
 
__ölöe_isöf
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

185 
__ölöe__
 
__ölöe_i¢™f
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

186 
__ölöe__
 
__ölöe_i¢™d
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

187 
__ölöe__
 
__ölöe_i¢™
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

188 
__ölöe__
 
__ölöe_i¢‹mÆf
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

189 
__ölöe__
 
__ölöe_i¢‹mÆd
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

190 
__ölöe__
 
__ölöe_i¢‹mÆ
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

191 
__ölöe__
 
__ölöe_signbôf
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

192 
__ölöe__
 
__ölöe_signbôd
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

193 
__ölöe__
 
__ölöe_signbô
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

195 
__ölöe__
 
__ölöe_isöff
–
__x
 ) {  
__buûtö_Ábsf
(__xË=
__buûtö_öff
(); }

196 
__ölöe__
 
__ölöe_isöfd
–
__x
 ) {  
__buûtö_Ábs
(__xË=
__buûtö_öf
(); }

197 
__ölöe__
 
__ölöe_isöf
–
__x
 ) {  
__buûtö_Áb¶
(__xË=
__buûtö_öÊ
(); }

198 
__ölöe__
 
__ölöe_isföôef
–
__x
 ) {  
	g__x
 =__x && 
__buûtö_Ábsf
(__xË!
__buûtö_öff
(); }

199 
__ölöe__
 
__ölöe_isföôed
–
__x
 ) {  
	g__x
 =__x && 
__buûtö_Ábs
(__xË!
__buûtö_öf
(); }

200 
__ölöe__
 
__ölöe_isföôe
–
__x
 ) {  
	g__x
 =__x && 
__buûtö_Áb¶
(__xË!
__buûtö_öÊ
(); }

201 
__ölöe__
 
__ölöe_i¢™f
–
__x
 ) {  
	g__x
 != __x; }

202 
__ölöe__
 
__ölöe_i¢™d
–
__x
 ) {  
	g__x
 != __x; }

203 
__ölöe__
 
__ölöe_i¢™
–
__x
 ) {  
	g__x
 != __x; }

204 
__ölöe__
 
__ölöe_signbôf
–
__x
 ) { uni⁄{ 
	g__f
; 
	g__u
; }__u; __u.__f = __x;  ()(__u.__u >> 31); }

205 
__ölöe__
 
__ölöe_signbôd
–
__x
 ) { uni⁄{ 
	g__f
; 
	g__u
; }__u; __u.__f = __x;  ()(__u.__u >> ( 8 * ( __u.__u) - 1)); }

206 
__ölöe__
 
__ölöe_signbô
–
__x
 ){ uni⁄{ 
	g__ld
; 
	g__p
; }
	g__u
; __u.__ld = __x;  () (__u.__p >> ( 8 * ( __u.__p) - 1)); }

207 
__ölöe__
 
__ölöe_i¢‹mÆf
–
__x
 ) { 
	gÁbsf
 = 
__buûtö_Ábsf
(__x); if–
	g__x
 !__x )  0;  fabs‡< 
__buûtö_öff
(Ë&& fabs‡>
__FLT_MIN__
; }

208 
__ölöe__
 
__ölöe_i¢‹mÆd
–
__x
 ) { 
	gÁbsf
 = 
__buûtö_Ábs
(__x); if–
	g__x
 !__x )  0;  fabs‡< 
__buûtö_öf
(Ë&& fabs‡>
__DBL_MIN__
; }

209 
__ölöe__
 
__ölöe_i¢‹mÆ
–
__x
 ) { 
	gÁbsf
 = 
__buûtö_Áb¶
(__x); if–
	g__x
 !__x )  0;  fabs‡< 
__buûtö_öÊ
(Ë&& fabs‡>
__LDBL_MIN__
; }

213 
	#i¢‹mÆ
(
x
) \

214 – (
x
Ë=(Ë? 
	`__i¢‹mÆf
(()(x)) \

215 :  (
x
Ë=(Ë? 
	`__i¢‹mÆd
(()(x)) \

216 : 
	`__i¢‹mÆ
 (()(
x
)))

	)

218 
	#isföôe
(
x
) \

219 – (
x
Ë=(Ë? 
	`__isföôef
(()(x)) \

220 :  (
x
Ë=(Ë? 
	`__isföôed
(()(x)) \

221 : 
	`__isföôe
 (()(
x
)))

	)

223 
	#isöf
(
x
) \

224 – (
x
Ë=(Ë? 
	`__isöff
(()(x)) \

225 :  (
x
Ë=(Ë? 
	`__isöfd
(()(x)) \

226 : 
	`__isöf
 (()(
x
)))

	)

228 
	#i¢™
(
x
) \

229 – (
x
Ë=(Ë? 
	`__i¢™f
(()(x)) \

230 :  (
x
Ë=(Ë? 
	`__i¢™d
(()(x)) \

231 : 
	`__i¢™
 (()(
x
)))

	)

233 
	#signbô
(
x
) \

234 – (
x
Ë=(Ë? 
	`__signbôf
(()(x)) \

235 :  (
x
Ë=(Ë? 
	`__signbôd
(()(x)) \

236 : 
	`__signbôl
(()(
x
)))

	)

239 
__i¢‹mÆf
 ();

240 
__i¢‹mÆd
 ();

241 
__i¢‹mÆ
 ();

243 
__isföôef
 ();

244 
__isföôed
 ();

245 
__isföôe
 ();

247 
__isöff
 ();

248 
__isöfd
 ();

249 
__isöf
 ();

251 
__i¢™f
 ();

252 
__i¢™d
 ();

253 
__i¢™
 ();

255 
__signbôf
 ();

256 
__signbôd
 ();

257 
__signbôl
 ();

262 
	#Â˛assify
(
x
) \

263 – (
x
Ë=(Ë? 
	`__Â˛assifyf
(()(x)Ë: 
	`__Â˛assifyd
(()(x)Ë)

	)

265 
__Â˛assifyf
();

266 
__Â˛assifyd
();

268 #i‡
deföed
–
__GNUC__
 ) && ! deföed–
__XLC__
 ) && 0 =
__FINITE_MATH_ONLY__


274 
	#i¢‹mÆ
(
x
) \

275 – (
x
Ë=(Ë? 
	`__ölöe_i¢‹mÆf
(()(x)Ë: 
	`__ölöe_i¢‹mÆd
(()(x)Ë)

	)

277 
	#isföôe
(
x
) \

278 – (
x
Ë=(Ë? 
	`__ölöe_isföôef
(()(x)Ë: 
	`__ölöe_isföôed
(()(x)Ë)

	)

280 
	#isöf
(
x
) \

281 – (
x
Ë=(Ë? 
	`__ölöe_isöff
(()(x)Ë: 
	`__ölöe_isöfd
(()(x)Ë)

	)

283 
	#i¢™
(
x
) \

284 – (
x
Ë=(Ë? 
	`__ölöe_i¢™f
(()(x)Ë: 
	`__ölöe_i¢™d
(()(x)Ë)

	)

286 
	#signbô
(
x
) \

287 – (
x
Ë=(Ë? 
	`__ölöe_signbôf
(()(x)Ë: 
	`__ölöe_signbôd
(()(x)Ë)

	)

292 
__ölöe__
 
__ölöe_isföôef
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

293 
__ölöe__
 
__ölöe_isföôed
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

294 
__ölöe__
 
__ölöe_isföôe
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

295 
__ölöe__
 
__ölöe_isöff
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

296 
__ölöe__
 
__ölöe_isöfd
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

297 
__ölöe__
 
__ölöe_isöf
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

298 
__ölöe__
 
__ölöe_i¢™f
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

299 
__ölöe__
 
__ölöe_i¢™d
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

300 
__ölöe__
 
__ölöe_i¢™
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

301 
__ölöe__
 
__ölöe_i¢‹mÆf
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

302 
__ölöe__
 
__ölöe_i¢‹mÆd
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

303 
__ölöe__
 
__ölöe_i¢‹mÆ
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

304 
__ölöe__
 
__ölöe_signbôf
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

305 
__ölöe__
 
__ölöe_signbôd
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

306 
__ölöe__
 
__ölöe_signbô
 (Ë
	g__MATH_H_ALWAYS_INLINE__
;

308 
__ölöe__
 
__ölöe_isöff
–
__x
 ) {  
__buûtö_Ábsf
(__xË=
__buûtö_öff
(); }

309 
__ölöe__
 
__ölöe_isöfd
–
__x
 ) {  
__buûtö_Ábs
(__xË=
__buûtö_öf
(); }

310 
__ölöe__
 
__ölöe_isöf
–
__x
 ) {  
__buûtö_Áb¶
(__xË=
__buûtö_öÊ
(); }

311 
__ölöe__
 
__ölöe_isföôef
–
__x
 ) {  
	g__x
 =__x && 
__buûtö_Ábsf
(__xË!
__buûtö_öff
(); }

312 
__ölöe__
 
__ölöe_isföôed
–
__x
 ) {  
	g__x
 =__x && 
__buûtö_Ábs
(__xË!
__buûtö_öf
(); }

313 
__ölöe__
 
__ölöe_isföôe
–
__x
 ) {  
	g__x
 =__x && 
__buûtö_Áb¶
(__xË!
__buûtö_öÊ
(); }

314 
__ölöe__
 
__ölöe_i¢™f
–
__x
 ) {  
	g__x
 != __x; }

315 
__ölöe__
 
__ölöe_i¢™d
–
__x
 ) {  
	g__x
 != __x; }

316 
__ölöe__
 
__ölöe_i¢™
–
__x
 ) {  
	g__x
 != __x; }

317 
__ölöe__
 
__ölöe_signbôf
–
__x
 ) { uni⁄{ 
	g__f
; 
	g__u
; }__u; __u.__f = __x;  ()(__u.__u >> 31); }

318 
__ölöe__
 
__ölöe_signbôd
–
__x
 ) { uni⁄{ 
	g__f
; 
	g__u
; }__u; __u.__f = __x;  ()(__u.__u >> ( 8 * ( __u.__u) - 1)); }

319 
__ölöe__
 
__ölöe_signbô
–
__x
 ){ uni⁄{ 
	g__ld
; 
	g__p
; }
	g__u
; __u.__ld = __x;  () (__u.__p >> ( 8 * ( __u.__p) - 1)); }

320 
__ölöe__
 
__ölöe_i¢‹mÆf
–
__x
 ) { 
	gÁbsf
 = 
__buûtö_Ábsf
(__x); if–
	g__x
 !__x )  0;  fabs‡< 
__buûtö_öff
(Ë&& fabs‡>
__FLT_MIN__
; }

321 
__ölöe__
 
__ölöe_i¢‹mÆd
–
__x
 ) { 
	gÁbsf
 = 
__buûtö_Ábs
(__x); if–
	g__x
 !__x )  0;  fabs‡< 
__buûtö_öf
(Ë&& fabs‡>
__DBL_MIN__
; }

322 
__ölöe__
 
__ölöe_i¢‹mÆ
–
__x
 ) { 
	gÁbsf
 = 
__buûtö_Áb¶
(__x); if–
	g__x
 !__x )  0;  fabs‡< 
__buûtö_öÊ
(Ë&& fabs‡>
__LDBL_MIN__
; }

326 
	#i¢‹mÆ
(
x
) \

327 – (
x
Ë=(Ë? 
	`__i¢‹mÆf
(()(x)Ë: 
	`__i¢‹mÆd
(()(x)Ë)

	)

329 
	#isföôe
(
x
) \

330 – (
x
Ë=(Ë? 
	`__isföôef
(()(x)Ë: 
	`__isföôed
(()(x)Ë)

	)

332 
	#isöf
(
x
) \

333 – (
x
Ë=(Ë? 
	`__isöff
(()(x)Ë: 
	`__isöfd
(()(x)Ë)

	)

335 
	#i¢™
(
x
) \

336 – (
x
Ë=(Ë? 
	`__i¢™f
(()(x)Ë: 
	`__i¢™d
(()(x)Ë)

	)

338 
	#signbô
(
x
) \

339 – (
x
Ë=(Ë? 
	`__signbôf
(()(x)Ë: 
	`__signbôd
(()(x)Ë)

	)

342 
__i¢‹mÆf
 ();

343 
__i¢‹mÆd
 ();

345 
__isföôef
 ();

346 
__isföôed
 ();

348 
__isöff
 ();

349 
__isöfd
 ();

351 
__i¢™f
 ();

352 
__i¢™d
 ();

354 
__signbôf
 ();

355 
__signbôd
 ();

368 
acos
( );

369 
acosf
( );

371 
asö
( );

372 
asöf
( );

374 
©™
( );

375 
©™f
( );

377 
©™2
( , );

378 
©™2f
( , );

380 
cos
( );

381 
cosf
( );

383 
sö
( );

384 
söf
( );

386 
èn
( );

387 
ènf
( );

389 
acosh
( );

390 
acoshf
( );

392 
asöh
( );

393 
asöhf
( );

395 
©™h
( );

396 
©™hf
( );

398 
cosh
( );

399 
coshf
( );

401 
söh
( );

402 
söhf
( );

404 
ènh
( );

405 
ènhf
( );

407 
exp
( );

408 
expf
( );

410 
exp2
( );

411 
exp2f
( );

413 
expm1
( );

414 
expm1f
( );

416 
log
( );

417 
logf
( );

419 
log10
( );

420 
log10f
( );

422 
log2
( );

423 
log2f
( );

425 
log1p
( );

426 
log1pf
( );

428 
logb
( );

429 
logbf
( );

431 
modf
( , * );

432 
modff
( , * );

434 
ldexp
( , );

435 
ldexpf
( , );

437 
‰exp
( , * );

438 
‰expf
( , * );

440 
ûogb
( );

441 
ûogbf
( );

443 
sˇlbn
( , );

444 
sˇlbnf
( , );

446 
sˇlb 
( , );

447 
sˇlb f
( , );

449 
Ábs
( );

450 
Ábsf
( );

452 
cbπ
( );

453 
cbπf
( );

455 
hypŸ
( , );

456 
hypŸf
( , );

458 
pow
( , );

459 
powf
( , );

461 
sqπ
( );

462 
sqπf
( );

464 
îf
( );

465 
îff
( );

467 
îfc
( );

468 
îfcf
( );

470 
lgamma
( );

471 
lgammaf
( );

473 
tgamma
( );

474 
tgammaf
( );

476 
˚û
( );

477 
˚ûf
( );

479 
Êo‹
( );

480 
Êo‹f
( );

482 
√¨byöt
( );

483 
√¨byötf
( );

485 
röt
( );

486 
rötf
( );

488 
Ãöt
( );

489 
Ãötf
( );

491 
round
( );

492 
roundf
( );

494 
Ãound
( );

495 
Ãoundf
( );

497 #i‡–
deföed
 (
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901L ) || ! deföed–
__STRICT_ANSI__
 ) || ! deföed–
__GNUC__
 )

499 
Œröt
( );

500 
Œrötf
( );

502 
Œround
( );

503 
Œroundf
( );

506 
åunc
( );

507 
åuncf
( );

509 
fmod
( , );

510 
fmodf
( , );

512 
ªmaödî
( , );

513 
ªmaödîf
( , );

515 
ªmquo
( , , * );

516 
ªmquof
( , , * );

518 
c›ysign
( , );

519 
c›ysignf
( , );

521 
«n
( const * );

522 
«nf
( const * );

524 
√xè·î
( , );

525 
√xè·îf
( , );

528 
fdim
( , );

529 
fdimf
( , );

531 
fmax
( , );

532 
fmaxf
( , );

534 
fmö
( , );

535 
fmöf
( , );

537 
fma
( , , );

538 
fmaf
( , , );

540 #i‡–
__WANT_LONG_DOUBLE_FORMAT__
 - 0L > 0L )

541 
aco¶
–Ë
__LIBMLDBL_COMPAT
(acosl);

542 
asöl
–Ë
__LIBMLDBL_COMPAT
(asinl);

543 
©™l
–Ë
__LIBMLDBL_COMPAT
(atanl);

544 
©™2l
–, Ë
__LIBMLDBL_COMPAT
(atan2l);

545 
co¶
–Ë
__LIBMLDBL_COMPAT
(cosl);

546 
söl
–Ë
__LIBMLDBL_COMPAT
(sinl);

547 
è∆
–Ë
__LIBMLDBL_COMPAT
(tanl);

548 
acoshl
–Ë
__LIBMLDBL_COMPAT
(acoshl);

549 
asöhl
–Ë
__LIBMLDBL_COMPAT
(asinhl);

550 
©™hl
–Ë
__LIBMLDBL_COMPAT
(atanhl);

551 
coshl
–Ë
__LIBMLDBL_COMPAT
(coshl);

552 
söhl
–Ë
__LIBMLDBL_COMPAT
(sinhl);

553 
ènhl
–Ë
__LIBMLDBL_COMPAT
(tanhl);

554 
ex∂
–Ë
__LIBMLDBL_COMPAT
(expl);

555 
exp2l
–Ë
__LIBMLDBL_COMPAT
(exp2l);

556 
expm1l
–Ë
__LIBMLDBL_COMPAT
(expm1l);

557 
logl
–Ë
__LIBMLDBL_COMPAT
(logl);

558 
log10l
–Ë
__LIBMLDBL_COMPAT
(log10l);

559 
log2l
–Ë
__LIBMLDBL_COMPAT
(log2l);

560 
log1∂
–Ë
__LIBMLDBL_COMPAT
(log1pl);

561 
logbl
–Ë
__LIBMLDBL_COMPAT
(logbl);

562 
modÊ
–, * ) 
__LIBMLDBL_COMPAT
(modfl);

563 
ldex∂
–, Ë
__LIBMLDBL_COMPAT
(ldexpl);

564 
‰ex∂
–, * ) 
__LIBMLDBL_COMPAT
(frexpl);

565 
ûogbl
–Ë
__LIBMLDBL_COMPAT
(ilogbl);

566 
sˇlb∆
–, Ë
__LIBMLDBL_COMPAT
(scalbnl);

567 
sˇlb l
–, Ë
__LIBMLDBL_COMPAT
(scalblnl);

568 
Áb¶
–Ë
__LIBMLDBL_COMPAT
(fabsl);

569 
cbπl
–Ë
__LIBMLDBL_COMPAT
(cbrtl);

570 
hypŸl
–, Ë
__LIBMLDBL_COMPAT
(hypotl);

571 
powl
–, Ë
__LIBMLDBL_COMPAT
(powl);

572 
sqπl
–Ë
__LIBMLDBL_COMPAT
(sqrtl);

573 
îÊ
–Ë
__LIBMLDBL_COMPAT
(erfl);

574 
îf˛
–Ë
__LIBMLDBL_COMPAT
(erfcl);

575 
lgammÆ
–Ë
__LIBMLDBL_COMPAT
(lgammal);

576 
tgammÆ
–Ë
__LIBMLDBL_COMPAT
(tgammal);

577 
˚ûl
–Ë
__LIBMLDBL_COMPAT
(ceill);

578 
Êo‹l
–Ë
__LIBMLDBL_COMPAT
(floorl);

579 
√¨byöé
–Ë
__LIBMLDBL_COMPAT
(nearbyintl);

580 
röé
–Ë
__LIBMLDBL_COMPAT
(rintl);

581 
Ãöé
–Ë
__LIBMLDBL_COMPAT
(lrintl);

582 
roundl
–Ë
__LIBMLDBL_COMPAT
(roundl);

583 
Ãoundl
–Ë
__LIBMLDBL_COMPAT
(lroundl);

585 #i‡–
deföed
 (
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901L ) || ! deföed–
__STRICT_ANSI__
 ) || ! deföed–
__GNUC__
 )

587 
Œröé
–Ë
__LIBMLDBL_COMPAT
(llrintl);

588 
Œroundl
–Ë
__LIBMLDBL_COMPAT
(llroundl);

591 
åun˛
–Ë
__LIBMLDBL_COMPAT
(truncl);

592 
fmodl
–, Ë
__LIBMLDBL_COMPAT
(fmodl);

593 
ªmaödîl
–, Ë
__LIBMLDBL_COMPAT
(remainderl);

594 
ªmquﬁ
–, , * ) 
__LIBMLDBL_COMPAT
(remquol);

595 
c›ysig∆
–, Ë
__LIBMLDBL_COMPAT
(copysignl);

596 
«∆
–c⁄° * ) 
__LIBMLDBL_COMPAT
(nanl);

597 
√xè·îl
–, Ë
__LIBMLDBL_COMPAT
(nextafterl);

598 
√xâow¨d
–, Ë
__LIBMLDBL_COMPAT
(nexttoward);

599 
√xâow¨df
–, Ë
__LIBMLDBL_COMPAT
(nexttowardf);

600 
√xâow¨dl
–, Ë
__LIBMLDBL_COMPAT
(nexttowardl);

601 
fdiml
–, Ë
__LIBMLDBL_COMPAT
(fdiml);

602 
fmaxl
–, Ë
__LIBMLDBL_COMPAT
(fmaxl);

603 
fmöl
–, Ë
__LIBMLDBL_COMPAT
(fminl);

604 
fmÆ
–, , Ë
__LIBMLDBL_COMPAT
(fmal);

607 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
 ((x),(y))

	)

608 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
 ((x),(y))

	)

609 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
 ((x),(y))

	)

610 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
 ((x),(y))

	)

611 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
 ((x),(y))

	)

612 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
 ((x),(y))

	)

614 
__öf
( );

615 
__öff
( );

616 
__«n
( );

618 #i‡!
deföed
(
_ANSI_SOURCE
)

619 
j0
 ( );

620 
j1
 ( );

621 
jn
 ( , );

623 
y0
 ( );

624 
y1
 ( );

625 
yn
 ( , );

662 #i‡
deföed
–
__µc__
 )

663 #i‡
deföed
–
__GNUC__
 ) && ! deföed–
__XLC__
 ) && ( ! deföed–
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) || __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0 >= 1040 )

664 
sˇlb
 ( , Ë
__asm
("_scalb$UNIX2003" );

666 
sˇlb
 ( , );

669 
sˇlb
 ( , );

672 
	#M_E
 2.71828182845904523536028747135266250

	)

673 
	#M_LOG2E
 1.44269504088896340735992468100189214

	)

674 
	#M_LOG10E
 0.434294481903251827651128918916605082

	)

675 
	#M_LN2
 0.693147180559945309417232121458176568

	)

676 
	#M_LN10
 2.30258509299404568401799145468436421

	)

677 
	#M_PI
 3.14159265358979323846264338327950288

	)

678 
	#M_PI_2
 1.57079632679489661923132169163975144

	)

679 
	#M_PI_4
 0.785398163397448309615660845819875721

	)

680 
	#M_1_PI
 0.318309886183790671537767526745028724

	)

681 
	#M_2_PI
 0.636619772367581343075535053490057448

	)

682 
	#M_2_SQRTPI
 1.12837916709551257389615890312154517

	)

683 
	#M_SQRT2
 1.41421356237309504880168872420969808

	)

684 
	#M_SQRT1_2
 0.707106781186547524400844362104849039

	)

686 
	#MAXFLOAT
 (()3.40282346638528860e+38)

	)

687 
signgam
;

691 #i‡!
deföed
(
__NOEXTENSIONS__
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

692 
	#__WANT_EXTENSIONS__


	)

695 #ifde‡
__WANT_EXTENSIONS__


697 
	#FP_SNAN
 
FP_NAN


	)

698 
	#FP_QNAN
 
FP_NAN


	)

700 
röâﬁ
 ( );

702 
roundtﬁ
 ( );

704 
	s__com∂ex_s
 {

705 
	gRól
;

706 
	gImag
;

707 } 
	t__com∂ex_t
;

712 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

714 #i‡(!
deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

715 
	efdvîsi⁄
 {
	g_fdlibm_õì
 = -1, 
	g_fdlibm_svid
, 
	g_fdlibm_x›í
, 
	g_fdlibm_posix
};

716 
	#fdlibm_õì
 
_fdlibm_õì


	)

717 
	#fdlibm_svid
 
_fdlibm_svid


	)

718 
	#fdlibm_x›í
 
_fdlibm_x›í


	)

719 
	#fdlibm_posix
 
_fdlibm_posix


	)

721 
	#_LIB_VERSION_TYPE
 
fdvîsi⁄


	)

722 
	#_LIB_VERSION
 
_fdlib_vîsi⁄


	)

731 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

733 
	#_IEEE_
 
fdlibm_õì


	)

734 
	#_SVID_
 
fdlibm_svid


	)

735 
	#_XOPEN_
 
fdlibm_x›í


	)

736 
	#_POSIX_
 
fdlibm_posix


	)

738 #i‡!
deföed
(
__˝lu•lus
)

739 
	sex˚±i⁄
 {

740 
	gty≥
;

741 *
	g«me
;

742 
	g¨g1
;

743 
	g¨g2
;

744 
	gªtvÆ
;

748 
	#HUGE
 
MAXFLOAT


	)

755 
	#X_TLOSS
 1.41484755040568800000e+16

	)

757 
	#DOMAIN
 1

	)

758 
	#SING
 2

	)

759 
	#OVERFLOW
 3

	)

760 
	#UNDERFLOW
 4

	)

761 
	#TLOSS
 5

	)

762 
	#PLOSS
 6

	)

767 #i‡!
deföed
–
__STRICT_ANSI__
Ë&& !deföed(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

769 
föôe
 ( );

771 
gamma
 ( );

773 #i‡(!
deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

775 #i‡!
deföed
(
__˝lu•lus
)

776 
m©hîr
 ( 
ex˚±i⁄
 * );

782 
signifiˇnd
 ( );

787 
dªm
 ( , );

793 #ifde‡
_REENTRANT


794 
gamma_r
 ( , * );

795 
lgamma_r
 ( , * );

807 #i‡
deföed
(
__FAST_MATH__
Ë&& !deföed(
__˝lu•lus
)

809 
	#__FSELS
(
e
,
t
,
f
Ë((”Ë>0.0fË? (tË: (f))

	)

810 
	#__FSEL
(
e
,
t
,
f
Ë((”Ë>0.0Ë? (tË: (f))

	)

812 
__ölöe__
 
__Á°m©h_Êo‹f
–
f
 ) 
__©åibuã__
((
__Æways_ölöe__
));

813 
__ölöe__
 
__Á°m©h_Êo‹f
–
f
 )

815 
	gb
, 
	gc
, 
	gd
, 
	ge
, 
	gg
, 
	gh
, 
	gt
;

817 
	gc
 = 
__FSELS
–
f
, -8388608.f, 8388608.‡); 
	gb
 = 
Ábsf
( f );

818 
	gd
 = 
f
 - 
c
; 
	ge
 = 
b
 - 8388608.f;

819 
__asm__
("" : "+f" (
d
));

820 
	gd
 = 
d
 + 
c
;

821 
	gg
 = 
f
 - 
d
;

822 
	gh
 = 
__FSELS
–
g
, 0.0f, 1.0f );

823 
	gt
 = 
d
 - 
h
;

824  
__FSELS
–
e
, 
f
, 
t
 );

827 
__ölöe__
 
__Á°m©h_˚ûf
–
f
 ) 
__©åibuã__
((
__Æways_ölöe__
));

828 
__ölöe__
 
__Á°m©h_˚ûf
–
f
 )

830 
	gb
, 
	gc
, 
	gd
, 
	ge
, 
	gg
, 
	gh
, 
	gt
;

832 
	gc
 = 
__FSELS
–
f
, -8388608.f, 8388608.‡); 
	gb
 = 
Ábsf
( f );

833 
	gd
 = 
f
 - 
c
; 
	ge
 = 
b
 - 8388608.f;

834 
__asm__
("" : "+f" (
d
));

835 
	gd
 = 
d
 + 
c
;

836 
	gg
 = 
d
 - 
f
;

837 
	gh
 = 
__FSELS
–
g
, 0.0f, 1.0f );

838 
	gt
 = 
d
 + 
h
;

839  
__FSELS
–
e
, 
f
, 
t
 );

842 
__ölöe__
 
__Á°m©h_Êo‹
–
f
 ) 
__©åibuã__
((
__Æways_ölöe__
));

843 
__ölöe__
 
__Á°m©h_Êo‹
–
f
 )

845 
	gb
, 
	gc
, 
	gd
, 
	ge
, 
	gg
, 
	gh
, 
	gt
;

847 
	gc
 = 
__FSEL
–
f
, -4503599627370496., 4503599627370496. ); 
	gb
 = 
Ábs
( f );

848 
	gd
 = 
f
 - 
c
; 
	ge
 = 
b
 - 4503599627370496.;

849 
__asm__
("" : "+f" (
d
));

850 
	gd
 = 
d
 + 
c
;

851 
	gg
 = 
f
 - 
d
;

852 
	gh
 = 
__FSEL
–
g
, 0.0, 1.0 );

853 
	gt
 = 
d
 - 
h
;

854  
__FSEL
–
e
, 
f
, 
t
 );

857 
__ölöe__
 
__Á°m©h_˚û
–
f
 ) 
__©åibuã__
((
__Æways_ölöe__
));

858 
__ölöe__
 
__Á°m©h_˚û
–
f
 )

860 
	gb
, 
	gc
, 
	gd
, 
	ge
, 
	gg
, 
	gh
, 
	gt
;

862 
	gc
 = 
__FSEL
–
f
, -4503599627370496., 4503599627370496. ); 
	gb
 = 
Ábs
( f );

863 
	gd
 = 
f
 - 
c
; 
	ge
 = 
b
 - 4503599627370496.;

864 
__asm__
("" : "+f" (
d
));

865 
	gd
 = 
d
 + 
c
;

866 
	gg
 = 
d
 - 
f
;

867 
	gh
 = 
__FSEL
–
g
, 0.0, 1.0 );

868 
	gt
 = 
d
 + 
h
;

869  
__FSEL
–
e
, 
f
, 
t
 );

872 
	#Êo‹f
(
x
Ë
	`__Á°m©h_Êo‹f
((x))

	)

873 
	#˚ûf
(
x
Ë
	`__Á°m©h_˚ûf
((x))

	)

874 
	#Êo‹
(
x
Ë
	`__Á°m©h_Êo‹
((x))

	)

875 
	#˚û
(
x
Ë
	`__Á°m©h_˚û
((x))

	)

879 #ifde‡
__˝lu•lus


	@/usr/include/machine/_param.h

28 #i‡
deföed
 (
__µc__
Ë|| deföed (
__µc64__
)

29 
	~"µc/_∑øm.h
"

30 #ñi‡
deföed
 (
__i386__
Ë|| deföed (
__x86_64__
)

31 
	~"i386/_∑øm.h
"

32 #ñi‡
deföed
 (
__¨m__
)

33 
	~"¨m/_∑øm.h
"

35 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/machine/endian.h

31 #i‚de‡
_BSD_MACHINE_ENDIAN_H_


32 
	#_BSD_MACHINE_ENDIAN_H_


	)

34 #i‡
deföed
 (
__µc__
Ë|| deföed(
__µc64__
)

35 
	~"µc/ídün.h
"

36 #ñi‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

37 
	~"i386/ídün.h
"

38 #ñi‡
deföed
 (
__¨m__
)

39 
	~"¨m/ídün.h
"

41 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/machine/types.h

31 #i‚de‡
_BSD_MACHINE_TYPES_H_


32 
	#_BSD_MACHINE_TYPES_H_


	)

34 #i‡
deföed
 (
__µc__
Ë|| deföed (
__µc64__
)

35 
	~"µc/ty≥s.h
"

36 #ñi‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

37 
	~"i386/ty≥s.h
"

38 #ñi‡
deföed
 (
__¨m__
)

39 
	~"¨m/ty≥s.h
"

41 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/netinet6/in6.h

96 #i‚de‡
__KAME_NETINET_IN_H_INCLUDED_


100 #i‚de‡
_NETINET6_IN6_H_


101 
	#_NETINET6_IN6_H_


	)

102 
	~<sys/≠∂ópi›ts.h
>

103 
	~<sys/_ty≥s.h
>

106 #i‚de‡
_SA_FAMILY_T


107 
	#_SA_FAMILY_T


	)

108 
__uöt8_t
 
	tß_Ámûy_t
;

116 
	#__KAME__


	)

117 
	#__KAME_VERSION
 "20010528/≠∂e-d¨wö"

	)

119 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

148 
	#IPV6PORT_RESERVED
 1024

	)

149 
	#IPV6PORT_ANONMIN
 49152

	)

150 
	#IPV6PORT_ANONMAX
 65535

	)

151 
	#IPV6PORT_RESERVEDMIN
 600

	)

152 
	#IPV6PORT_RESERVEDMAX
 (
IPV6PORT_RESERVED
-1)

	)

158 
	sö6_addr
 {

160 
__uöt8_t
 
	m__u6_addr8
[16];

161 
__uöt16_t
 
	m__u6_addr16
[8];

162 
__uöt32_t
 
	m__u6_addr32
[4];

163 } 
	m__u6_addr
;

166 
	#s6_addr
 
__u6_addr
.
__u6_addr8


	)

168 
	#INET6_ADDRSTRLEN
 46

	)

173 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

174 
	#SIN6_LEN


	)

176 
	ssockaddr_ö6
 {

177 
__uöt8_t
 
	msö6_Àn
;

178 
ß_Ámûy_t
 
	msö6_Ámûy
;

179 
ö_p‹t_t
 
	msö6_p‹t
;

180 
__uöt32_t
 
	msö6_Êowöfo
;

181 
ö6_addr
 
	msö6_addr
;

182 
__uöt32_t
 
	msö6_sc›e_id
;

191 
	#IN6ADDR_ANY_INIT
 \

193 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

194 
	#IN6ADDR_LOOPBACK_INIT
 \

196 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

197 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

198 
	#IN6ADDR_NODELOCAL_ALLNODES_INIT
 \

200 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

201 
	#IN6ADDR_LINKLOCAL_ALLNODES_INIT
 \

203 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

204 
	#IN6ADDR_LINKLOCAL_ALLROUTERS_INIT
 \

206 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}

	)

209 c⁄° 
ö6_addr
 
ö6addr_™y
;

210 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

211 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

212 c⁄° 
ö6_addr
 
ö6addr_nodñoˇl_Æ odes
;

213 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Æ odes
;

214 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_ÆÃouãrs
;

223 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

224 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

225 (
	`memcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

232 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

233 ((*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

234 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

235 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

236 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=0))

	)

241 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

242 ((*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

243 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

244 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

245 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=
	`¡ohl
(1)))

	)

250 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

251 ((*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

252 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

253 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

254 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]) != 0) && \

255 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë!
	`¡ohl
(1)))

	)

260 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

261 ((*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

262 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

263 (*(c⁄° 
__uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]Ë=
	`¡ohl
(0x0000ffff)))

	)

269 
	#__IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

270 
	#__IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

271 
	#__IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

272 
	#__IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

273 
	#__IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

279 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

280 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0x80))

	)

281 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

282 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0xc0))

	)

287 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(◊)->
s6_addr
[0] =0xff)

	)

289 
	#__IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

294 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

295 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

296 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_NODELOCAL
))

	)

297 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

298 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

299 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

300 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

301 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

302 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_SITELOCAL
))

	)

303 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

304 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

305 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

306 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

307 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

308 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_GLOBAL
))

	)

314 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

322 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

324 
	#IPV6_OPTIONS
 1

	)

325 
	#IPV6_RECVOPTS
 5

	)

326 
	#IPV6_RECVRETOPTS
 6

	)

327 
	#IPV6_RECVDSTADDR
 7

	)

328 
	#IPV6_RETOPTS
 8

	)

330 
	#IPV6_SOCKOPT_RESERVED1
 3

	)

332 
	#IPV6_UNICAST_HOPS
 4

	)

333 
	#IPV6_MULTICAST_IF
 9

	)

334 
	#IPV6_MULTICAST_HOPS
 10

	)

335 
	#IPV6_MULTICAST_LOOP
 11

	)

336 
	#IPV6_JOIN_GROUP
 12

	)

337 
	#IPV6_LEAVE_GROUP
 13

	)

339 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

340 
	#IPV6_PORTRANGE
 14

	)

341 
	#ICMP6_FILTER
 18

	)

343 
	#IPV6_PKTINFO
 19

	)

344 
	#IPV6_HOPLIMIT
 20

	)

345 
	#IPV6_NEXTHOP
 21

	)

346 
	#IPV6_HOPOPTS
 22

	)

347 
	#IPV6_DSTOPTS
 23

	)

348 
	#IPV6_RTHDR
 24

	)

349 
	#IPV6_PKTOPTIONS
 25

	)

351 
	#IPV6_CHECKSUM
 26

	)

353 
	#IPV6_V6ONLY
 27

	)

354 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

355 
	#IPV6_BINDV6ONLY
 
IPV6_V6ONLY


	)

359 
	#IPV6_IPSEC_POLICY
 28

	)

361 
	#IPV6_FAITH
 29

	)

364 
	#IPV6_FW_ADD
 30

	)

365 
	#IPV6_FW_DEL
 31

	)

366 
	#IPV6_FW_FLUSH
 32

	)

367 
	#IPV6_FW_ZERO
 33

	)

368 
	#IPV6_FW_GET
 34

	)

371 
	#IPV6_RECVTCLASS
 35

	)

372 
	#IPV6_TCLASS
 36

	)

376 
	#IPV6_RTHDR_LOOSE
 0

	)

377 
	#IPV6_RTHDR_STRICT
 1

	)

378 
	#IPV6_RTHDR_TYPE_0
 0

	)

383 
	#IPV6_DEFAULT_MULTICAST_HOPS
 1

	)

384 
	#IPV6_DEFAULT_MULTICAST_LOOP
 1

	)

389 
	sùv6_mªq
 {

390 
ö6_addr
 
	mùv6mr_mu…üddr
;

391 
	mùv6mr_öãrÁ˚
;

397 
	sö6_pktöfo
 {

398 
ö6_addr
 
	mùi6_addr
;

399 
	mùi6_ifödex
;

406 
	#IPV6_PORTRANGE_DEFAULT
 0

	)

407 
	#IPV6_PORTRANGE_HIGH
 1

	)

408 
	#IPV6_PORTRANGE_LOW
 2

	)

416 
	#IPV6PROTO_MAXID
 (
IPPROTO_PIM
 + 1Ë

	)

421 
	#IPV6CTL_FORWARDING
 1

	)

422 
	#IPV6CTL_SENDREDIRECTS
 2

	)

423 
	#IPV6CTL_DEFHLIM
 3

	)

424 #ifde‡
nŸyë


425 
	#IPV6CTL_DEFMTU
 4

	)

427 
	#IPV6CTL_FORWSRCRT
 5

	)

428 
	#IPV6CTL_STATS
 6

	)

429 
	#IPV6CTL_MRTSTATS
 7

	)

430 
	#IPV6CTL_MRTPROTO
 8

	)

431 
	#IPV6CTL_MAXFRAGPACKETS
 9

	)

432 
	#IPV6CTL_SOURCECHECK
 10

	)

433 
	#IPV6CTL_SOURCECHECK_LOGINT
 11

	)

434 
	#IPV6CTL_ACCEPT_RTADV
 12

	)

435 
	#IPV6CTL_KEEPFAITH
 13

	)

436 
	#IPV6CTL_LOG_INTERVAL
 14

	)

437 
	#IPV6CTL_HDRNESTLIMIT
 15

	)

438 
	#IPV6CTL_DAD_COUNT
 16

	)

439 
	#IPV6CTL_AUTO_FLOWLABEL
 17

	)

440 
	#IPV6CTL_DEFMCASTHLIM
 18

	)

441 
	#IPV6CTL_GIF_HLIM
 19

	)

442 
	#IPV6CTL_KAME_VERSION
 20

	)

443 
	#IPV6CTL_USE_DEPRECATED
 21

	)

444 
	#IPV6CTL_RR_PRUNE
 22

	)

446 
	#IPV6CTL_MAPPED_ADDR
 23

	)

448 
	#IPV6CTL_V6ONLY
 24

	)

449 
	#IPV6CTL_RTEXPIRE
 25

	)

450 
	#IPV6CTL_RTMINEXPIRE
 26

	)

451 
	#IPV6CTL_RTMAXCACHE
 27

	)

453 
	#IPV6CTL_USETEMPADDR
 32

	)

454 
	#IPV6CTL_TEMPPLTIME
 33

	)

455 
	#IPV6CTL_TEMPVLTIME
 34

	)

456 
	#IPV6CTL_AUTO_LINKLOCAL
 35

	)

457 
	#IPV6CTL_RIP6STATS
 36

	)

459 
	#IPV6CTL_MAXFRAGS
 41

	)

461 
	#IPV6CTL_NEIGHBORGCTHRESH
 46

	)

462 
	#IPV6CTL_MAXIFPREFIXES
 47

	)

463 
	#IPV6CTL_MAXIFDEFROUTERS
 48

	)

464 
	#IPV6CTL_MAXDYNROUTES
 49

	)

468 
	#IPV6CTL_MAXID
 50

	)

471 
__BEGIN_DECLS


472 
	gcmsghdr
;

474 
öë6_›ti⁄_•a˚
();

475 
öë6_›ti⁄_öô
(*, 
cmsghdr
 **, );

476 
öë6_›ti⁄_≠≥nd
(
cmsghdr
 *, c⁄° 
__uöt8_t
 *,

478 
__uöt8_t
 *
öë6_›ti⁄_Æloc
(
cmsghdr
 *, , , );

479 
öë6_›ti⁄_√xt
(c⁄° 
cmsghdr
 *, 
__uöt8_t
 **);

480 
öë6_›ti⁄_föd
(c⁄° 
cmsghdr
 *, 
__uöt8_t
 **, );

482 
size_t
 
öë6_πhdr_•a˚
(, );

483 
cmsghdr
 *
öë6_πhdr_öô
(*, );

484 
öë6_πhdr_add
(
cmsghdr
 *, c⁄° 
ö6_addr
 *,

486 
öë6_πhdr_œ°h›
(
cmsghdr
 *, );

488 
öë6_πhdr_ªvî£
(c⁄° 
cmsghdr
 *, cmsghdr *);

490 
öë6_πhdr_£gmíts
(c⁄° 
cmsghdr
 *);

491 
ö6_addr
 *
öë6_πhdr_gëaddr
(
cmsghdr
 *, );

492 
öë6_πhdr_gëÊags
(c⁄° 
cmsghdr
 *, );

494 
öë6_›t_öô
(*, 
size_t
);

495 
öë6_›t_≠≥nd
(*, 
size_t
, , 
__uöt8_t
,

496 
size_t
, 
__uöt8_t
, **);

497 
öë6_›t_föish
(*, 
size_t
, );

498 
öë6_›t_£t_vÆ
(*, 
size_t
, *, );

500 
öë6_›t_√xt
(*, 
size_t
, , 
__uöt8_t
 *,

501 
size_t
 *, **);

502 
öë6_›t_föd
(*, 
size_t
, , 
__uöt8_t
,

503 
size_t
 *, **);

504 
öë6_›t_gë_vÆ
(*, 
size_t
, *, );

505 
size_t
 
öë6_πh_•a˚
(, );

506 *
öë6_πh_öô
(*, , , );

507 
öë6_πh_add
(*, c⁄° 
ö6_addr
 *);

508 
öë6_πh_ªvî£
(const *, *);

509 
öë6_πh_£gmíts
(const *);

510 
ö6_addr
 *
öë6_πh_gëaddr
(const *, );

511 
	g__END_DECLS


	@/usr/include/runetype.h

39 #i‚def 
_RUNETYPE_H_


40 
	#_RUNETYPE_H_


	)

42 
	~<_ty≥s.h
>

44 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

46 #i‚def 
_SIZE_T


47 
	#_SIZE_T


	)

48 
__d¨wö_size_t
 
	tsize_t
;

51 #i‚def 
_CT_RUNE_T


52 
	#_CT_RUNE_T


	)

53 
__d¨wö_˘_ru√_t
 
	t˘_ru√_t
;

56 #i‚def 
_RUNE_T


57 
	#_RUNE_T


	)

58 
__d¨wö_ru√_t
 
	tru√_t
;

61 #i‚def 
__˝lu•lus


62 #i‚def 
_WCHAR_T


63 
	#_WCHAR_T


	)

64 
__d¨wö_wch¨_t
 
	twch¨_t
;

68 #i‚def 
_WINT_T


69 
	#_WINT_T


	)

70 
__d¨wö_wöt_t
 
	twöt_t
;

75 
	#_CACHED_RUNES
 (1 <<8 )

	)

76 
	#_CRMASK
 (~(
_CACHED_RUNES
 - 1))

	)

82 
__d¨wö_ru√_t
 
	m__mö
;

83 
__d¨wö_ru√_t
 
	m__max
;

84 
__d¨wö_ru√_t
 
	m__m≠
;

85 
__uöt32_t
 *
	m__ty≥s
;

86 } 
	t_Ru√E¡ry
;

89 
	m__ƒ™ges
;

90 
_Ru√E¡ry
 *
	m__ønges
;

91 } 
	t_Ru√R™ge
;

94 
	m__«me
[14];

95 
__uöt32_t
 
	m__mask
;

96 } 
	t_Ru√Ch¨Cœss
;

99 
	m__magic
[8];

100 
	m__ícodög
[32];

102 
__d¨wö_ru√_t
 (*
__sgëru√
)(c⁄° *, 
	m__d¨wö_size_t
, const **);

103 (*
	m__•uåu√
)(
	m__d¨wö_ru√_t
, *, 
	m__d¨wö_size_t
, **);

104 
__d¨wö_ru√_t
 
	m__övÆid_ru√
;

106 
__uöt32_t
 
	m__ru√ty≥
[
_CACHED_RUNES
];

107 
__d¨wö_ru√_t
 
	m__m≠lowî
[
_CACHED_RUNES
];

108 
__d¨wö_ru√_t
 
	m__m≠uµî
[
_CACHED_RUNES
];

115 
_Ru√R™ge
 
	m__ru√ty≥_ext
;

116 
_Ru√R™ge
 
	m__m≠lowî_ext
;

117 
_Ru√R™ge
 
	m__m≠uµî_ext
;

119 *
	m__v¨übÀ
;

120 
	m__v¨übÀ_Àn
;

125 
	m__nch¨˛as£s
;

126 
_Ru√Ch¨Cœss
 *
	m__ch¨˛as£s
;

127 } 
	t_Ru√LoˇÀ
;

129 
	#_RUNE_MAGIC_A
 "Ru√MagA"

	)

131 
__BEGIN_DECLS


132 
_Ru√LoˇÀ
 
_DeÁu…Ru√LoˇÀ
;

133 
_Ru√LoˇÀ
 *
_CuºítRu√LoˇÀ
;

134 
	g__END_DECLS


	@/usr/include/secure/_stdio.h

24 #i‚de‡
_STDIO_H_


25 #îr‹ 
îr‹
 "Never use <secure/_stdio.h> directly; include <stdio.h> instead."

28 #i‚de‡
_SECURE__STDIO_H_


29 
	#_SECURE__STDIO_H_


	)

31 
	~<£cuª/_comm⁄.h
>

33 #i‡
_USE_FORTIFY_LEVEL
 > 0

35 #unde‡
•rötf


36 #unde‡
v•rötf


37 #unde‡
¢¥ötf


38 #unde‡
v¢¥ötf


42 
	$__•rötf_chk
 (* 
__ª°ri˘
, , 
size_t
,

43 c⁄° * 
__ª°ri˘
, ...)

44 
	`__DARWIN_LDBL_COMPAT
 (
__•rötf_chk
);

46 
	#•rötf
(
°r
, ...) \

47 
	`__buûtö___•rötf_chk
 (
°r
, 0, 
	`__d¨wö_obsz
(°r), 
__VA_ARGS__
)

	)

49 
	$__¢¥ötf_chk
 (* 
__ª°ri˘
, 
size_t
, , size_t,

50 c⁄° * 
__ª°ri˘
, ...)

51 
	`__DARWIN_LDBL_COMPAT
 (
__¢¥ötf_chk
);

53 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

54 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 0, 
	`__d¨wö_obsz
(°r), 
__VA_ARGS__
)

	)

56 
	$__v•rötf_chk
 (* 
__ª°ri˘
, , 
size_t
,

57 c⁄° * 
__ª°ri˘
, 
va_li°
)

58 
	`__DARWIN_LDBL_COMPAT
 (
__v•rötf_chk
);

60 
	#v•rötf
(
°r
, 
f‹m©
, 
≠
) \

61 
	`__buûtö___v•rötf_chk
 (
°r
, 0, 
	`__d¨wö_obsz
(°r), 
f‹m©
, 
≠
)

	)

63 
	$__v¢¥ötf_chk
 (* 
__ª°ri˘
, 
size_t
, , size_t,

64 c⁄° * 
__ª°ri˘
, 
va_li°
)

65 
	`__DARWIN_LDBL_COMPAT
 (
__v¢¥ötf_chk
);

67 
	#v¢¥ötf
(
°r
, 
Àn
, 
f‹m©
, 
≠
) \

68 
	`__buûtö___v¢¥ötf_chk
 (
°r
, 
Àn
, 0, 
	`__d¨wö_obsz
(°r), 
f‹m©
, 
≠
)

	)

	@/usr/include/secure/_string.h

24 #i‚de‡
_STRING_H_


28 #i‚de‡
_SECURE__STRING_H_


29 
	#_SECURE__STRING_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<£cuª/_comm⁄.h
>

34 #i‡
_USE_FORTIFY_LEVEL
 > 0

39 #unde‡
mem˝y


40 #unde‡
memmove


41 #unde‡
mem£t


42 #unde‡
°r˝y


43 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

44 #unde‡
°p˝y


46 #unde‡
°∫˝y


47 #unde‡
°rˇt


48 #unde‡
°∫ˇt


50 
	#mem˝y
(
de°
, 
§c
, 
Àn
) \

51 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

52 ? 
	`__buûtö___mem˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__d¨wö_obsz0
 (dest)) \

53 : 
	`__ölöe_mem˝y_chk
 (
de°
, 
§c
, 
Àn
))

	)

55 
__ölöe
 *

56 
	$__ölöe_mem˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
)

58  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__d¨wö_obsz0
(__dest));

59 
	}
}

61 
	#memmove
(
de°
, 
§c
, 
Àn
) \

62 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

63 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__d¨wö_obsz0
 (dest)) \

64 : 
	`__ölöe_memmove_chk
 (
de°
, 
§c
, 
Àn
))

	)

66 
__ölöe
 *

67 
	$__ölöe_memmove_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
)

69  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__d¨wö_obsz0
(__dest));

70 
	}
}

72 
	#mem£t
(
de°
, 
vÆ
, 
Àn
) \

73 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

74 ? 
	`__buûtö___mem£t_chk
 (
de°
, 
vÆ
, 
Àn
, 
	`__d¨wö_obsz0
 (dest)) \

75 : 
	`__ölöe_mem£t_chk
 (
de°
, 
vÆ
, 
Àn
))

	)

77 
__ölöe
 *

78 
	$__ölöe_mem£t_chk
 (*
__de°
, 
__vÆ
, 
size_t
 
__Àn
)

80  
	`__buûtö___mem£t_chk
 (
__de°
, 
__vÆ
, 
__Àn
, 
	`__d¨wö_obsz0
(__dest));

81 
	}
}

83 
	#°r˝y
(
de°
, 
§c
) \

84 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

85 ? 
	`__buûtö___°r˝y_chk
 (
de°
, 
§c
, 
	`__d¨wö_obsz
 (dest)) \

86 : 
	`__ölöe_°r˝y_chk
 (
de°
, 
§c
))

	)

88 
__ölöe
 *

89 
	$__ölöe_°r˝y_chk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

91  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__d¨wö_obsz
(__dest));

92 
	}
}

94 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

95 
	#°p˝y
(
de°
, 
§c
) \

96 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

97 ? 
	`__buûtö___°p˝y_chk
 (
de°
, 
§c
, 
	`__d¨wö_obsz
 (dest)) \

98 : 
	`__ölöe_°p˝y_chk
 (
de°
, 
§c
))

	)

100 
__ölöe
 *

101 
	$__ölöe_°p˝y_chk
 (*
__de°
, c⁄° *
__§c
)

103  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__d¨wö_obsz
(__dest));

104 
	}
}

107 
	#°∫˝y
(
de°
, 
§c
, 
Àn
) \

108 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

109 ? 
	`__buûtö___°∫˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__d¨wö_obsz
 (dest)) \

110 : 
	`__ölöe_°∫˝y_chk
 (
de°
, 
§c
, 
Àn
))

	)

112 
__ölöe
 *

113 
	$__ölöe_°∫˝y_chk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
)

116  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__d¨wö_obsz
(__dest));

117 
	}
}

119 
	#°rˇt
(
de°
, 
§c
) \

120 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

121 ? 
	`__buûtö___°rˇt_chk
 (
de°
, 
§c
, 
	`__d¨wö_obsz
 (dest)) \

122 : 
	`__ölöe_°rˇt_chk
 (
de°
, 
§c
))

	)

124 
__ölöe
 *

125 
	$__ölöe_°rˇt_chk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

127  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__d¨wö_obsz
(__dest));

128 
	}
}

130 
	#°∫ˇt
(
de°
, 
§c
, 
Àn
) \

131 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

132 ? 
	`__buûtö___°∫ˇt_chk
 (
de°
, 
§c
, 
Àn
, 
	`__d¨wö_obsz
 (dest)) \

133 : 
	`__ölöe_°∫ˇt_chk
 (
de°
, 
§c
, 
Àn
))

	)

135 
__ölöe
 *

136 
	$__ölöe_°∫ˇt_chk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__Àn
)

139  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__d¨wö_obsz
(__dest));

140 
	}
}

	@/usr/include/stdint.h

6 #i‚de‡
_STDINT_H_


7 
	#_STDINT_H_


	)

9 #i‡
__LP64__


10 
	#__WORDSIZE
 64

	)

12 
	#__WORDSIZE
 32

	)

18 #i‚de‡
_INT8_T


19 
	#_INT8_T


	)

20 sig√d 
	töt8_t
;

23 #i‚de‡
_INT16_T


24 
	#_INT16_T


	)

25 
	töt16_t
;

28 #i‚de‡
_INT32_T


29 
	#_INT32_T


	)

30 
	töt32_t
;

33 #i‚de‡
_INT64_T


34 
	#_INT64_T


	)

35 
	töt64_t
;

38 #i‚de‡
_UINT8_T


39 
	#_UINT8_T


	)

40 
	tuöt8_t
;

43 #i‚de‡
_UINT16_T


44 
	#_UINT16_T


	)

45 
	tuöt16_t
;

48 #i‚de‡
_UINT32_T


49 
	#_UINT32_T


	)

50 
	tuöt32_t
;

53 #i‚de‡
_UINT64_T


54 
	#_UINT64_T


	)

55 
	tuöt64_t
;

59 
öt8_t
 
	töt_Àa°8_t
;

60 
öt16_t
 
	töt_Àa°16_t
;

61 
öt32_t
 
	töt_Àa°32_t
;

62 
öt64_t
 
	töt_Àa°64_t
;

63 
uöt8_t
 
	tuöt_Àa°8_t
;

64 
uöt16_t
 
	tuöt_Àa°16_t
;

65 
uöt32_t
 
	tuöt_Àa°32_t
;

66 
uöt64_t
 
	tuöt_Àa°64_t
;

70 
öt8_t
 
	töt_Á°8_t
;

71 
öt16_t
 
	töt_Á°16_t
;

72 
öt32_t
 
	töt_Á°32_t
;

73 
öt64_t
 
	töt_Á°64_t
;

74 
uöt8_t
 
	tuöt_Á°8_t
;

75 
uöt16_t
 
	tuöt_Á°16_t
;

76 
uöt32_t
 
	tuöt_Á°32_t
;

77 
uöt64_t
 
	tuöt_Á°64_t
;

82 #i‚de‡
_INTPTR_T


83 
	#_INTPTR_T


	)

84 
	töçå_t
;

87 #i‚de‡
_UINTPTR_T


88 
	#_UINTPTR_T


	)

89 
	tuöçå_t
;

94 #i‚de‡
_INTMAX_T


95 
	#_INTMAX_T


	)

96 #ifde‡
__INTMAX_TYPE__


97 
__INTMAX_TYPE__
 
	tötmax_t
;

99 
	tötmax_t
;

103 #i‚de‡
_UINTMAX_T


104 
	#_UINTMAX_T


	)

105 #ifde‡
__UINTMAX_TYPE__


106 
__UINTMAX_TYPE__
 
	tuötmax_t
;

108 
	tuötmax_t
;

119 
	#INT8_MAX
 127

	)

120 
	#INT16_MAX
 32767

	)

121 
	#INT32_MAX
 2147483647

	)

122 
	#INT64_MAX
 9223372036854775807LL

	)

124 
	#INT8_MIN
 -128

	)

125 
	#INT16_MIN
 -32768

	)

132 
	#INT32_MIN
 (-
INT32_MAX
-1)

	)

133 
	#INT64_MIN
 (-
INT64_MAX
-1)

	)

135 
	#UINT8_MAX
 255

	)

136 
	#UINT16_MAX
 65535

	)

137 
	#UINT32_MAX
 4294967295U

	)

138 
	#UINT64_MAX
 18446744073709551615ULL

	)

141 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

142 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

143 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

144 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

146 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

147 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

148 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

149 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

151 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

152 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

153 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

154 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

157 
	#INT_FAST8_MIN
 
INT8_MIN


	)

158 
	#INT_FAST16_MIN
 
INT16_MIN


	)

159 
	#INT_FAST32_MIN
 
INT32_MIN


	)

160 
	#INT_FAST64_MIN
 
INT64_MIN


	)

162 
	#INT_FAST8_MAX
 
INT8_MAX


	)

163 
	#INT_FAST16_MAX
 
INT16_MAX


	)

164 
	#INT_FAST32_MAX
 
INT32_MAX


	)

165 
	#INT_FAST64_MAX
 
INT64_MAX


	)

167 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

168 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

169 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

170 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

174 #i‡
__WORDSIZE
 == 64

175 
	#INTPTR_MIN
 
INT64_MIN


	)

176 
	#INTPTR_MAX
 
INT64_MAX


	)

178 
	#INTPTR_MIN
 
INT32_MIN


	)

179 
	#INTPTR_MAX
 
INT32_MAX


	)

182 #i‡
__WORDSIZE
 == 64

183 
	#UINTPTR_MAX
 
UINT64_MAX


	)

185 
	#UINTPTR_MAX
 
UINT32_MAX


	)

189 
	#INTMAX_MIN
 
INT64_MIN


	)

190 
	#INTMAX_MAX
 
INT64_MAX


	)

192 
	#UINTMAX_MAX
 
UINT64_MAX


	)

195 #i‡
__WORDSIZE
 == 64

196 
	#PTRDIFF_MIN
 
INT64_MIN


	)

197 
	#PTRDIFF_MAX
 
INT64_MAX


	)

199 
	#PTRDIFF_MIN
 
INT32_MIN


	)

200 
	#PTRDIFF_MAX
 
INT32_MAX


	)

207 #i‡
__WORDSIZE
 == 64

208 
	#SIZE_MAX
 
UINT64_MAX


	)

210 
	#SIZE_MAX
 
UINT32_MAX


	)

213 #i‚de‡
WCHAR_MAX


214 #ifde‡
__WCHAR_MAX__


215 
	#WCHAR_MAX
 
__WCHAR_MAX__


	)

217 
	#WCHAR_MAX
 0x7fffffff

	)

225 #i‚de‡
WCHAR_MIN


226 #i‡
WCHAR_MAX
 == 0xffff

227 
	#WCHAR_MIN
 0

	)

229 
	#WCHAR_MIN
 (-
WCHAR_MAX
-1)

	)

233 
	#WINT_MIN
 
INT32_MIN


	)

234 
	#WINT_MAX
 
INT32_MAX


	)

236 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

237 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

240 
	#INT8_C
(
v
Ë(v)

	)

241 
	#INT16_C
(
v
Ë(v)

	)

242 
	#INT32_C
(
v
Ë(v)

	)

243 
	#INT64_C
(
v
Ë(v ## 
LL
)

	)

245 
	#UINT8_C
(
v
Ë(v ## 
U
)

	)

246 
	#UINT16_C
(
v
Ë(v ## 
U
)

	)

247 
	#UINT32_C
(
v
Ë(v ## 
U
)

	)

248 
	#UINT64_C
(
v
Ë(v ## 
ULL
)

	)

250 
	#INTMAX_C
(
v
Ë(v ## 
LL
)

	)

251 
	#UINTMAX_C
(
v
Ë(v ## 
ULL
)

	)

	@/usr/include/sys/_endian.h

90 #i‚de‡
_SYS__ENDIAN_H_


91 
	#_SYS__ENDIAN_H_


	)

93 
	~<sys/cdefs.h
>

99 #i‡
deföed
(
löt
)

101 
__BEGIN_DECLS


102 
__uöt16_t
 
¡ohs
(__uint16_t);

103 
__uöt16_t
 
ht⁄s
(__uint16_t);

104 
__uöt32_t
 
¡ohl
(__uint32_t);

105 
__uöt32_t
 
ht⁄l
(__uint32_t);

106 
	g__END_DECLS


108 #ñi‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_BIG_ENDIAN


110 
	#¡ohl
(
x
Ë((
__uöt32_t
)(x))

	)

111 
	#¡ohs
(
x
Ë((
__uöt16_t
)(x))

	)

112 
	#ht⁄l
(
x
Ë((
__uöt32_t
)(x))

	)

113 
	#ht⁄s
(
x
Ë((
__uöt16_t
)(x))

	)

115 #i‡ 
deföed
(
KERNEL
Ë|| (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

116 
	#NTOHL
(
x
Ë(x)

	)

117 
	#NTOHS
(
x
Ë(x)

	)

118 
	#HTONL
(
x
Ë(x)

	)

119 
	#HTONS
(
x
Ë(x)

	)

124 
	~<libkîn/_OSByãOrdî.h
>

126 
	#¡ohs
(
x
Ë
	`__DARWIN_OSSw≠I¡16
(x)

	)

127 
	#ht⁄s
(
x
Ë
	`__DARWIN_OSSw≠I¡16
(x)

	)

129 
	#¡ohl
(
x
Ë
	`__DARWIN_OSSw≠I¡32
(x)

	)

130 
	#ht⁄l
(
x
Ë
	`__DARWIN_OSSw≠I¡32
(x)

	)

132 #if 
deföed
(
KERNEL
Ë|| (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

133 
	#NTOHL
(
x
Ë(xË
	`¡ohl
((
__uöt32_t
)x)

	)

134 
	#NTOHS
(
x
Ë(xË
	`¡ohs
((
__uöt16_t
)x)

	)

135 
	#HTONL
(
x
Ë(xË
	`ht⁄l
((
__uöt32_t
)x)

	)

136 
	#HTONS
(
x
Ë(xË
	`ht⁄s
((
__uöt16_t
)x)

	)

	@/usr/include/sys/_select.h

36 #i‚de‡
_SYS__SELECT_H_


37 
	#_SYS__SELECT_H_


	)

39 
	$£À˘
(, 
fd_£t
 * 
__ª°ri˘
, fd_set * __restrict,

40 
fd_£t
 * 
__ª°ri˘
, 
timevÆ
 * __restrict)

41 #i‡
	`deföed
(
_DARWIN_C_SOURCE
Ë|| deföed(
_DARWIN_UNLIMITED_SELECT
)

42 
	$__DARWIN_EXTSN_C
(
£À˘
)

44 #i‡
	`deföed
(
__LP64__
Ë&& !
__DARWIN_NON_CANCELABLE


45 
	$__DARWIN_1050
(
£À˘
)

47 
	$__DARWIN_ALIAS_C
(
£À˘
)

	@/usr/include/sys/_structs.h

29 
	~<sys/cdefs.h
>

30 
	~<sys/_ty≥s.h
>

32 #ifde‡
__√ed_uc⁄ãxt_t


33 #i‚de‡
__√ed_°ru˘_uc⁄ãxt


34 
	#__√ed_°ru˘_uc⁄ãxt


	)

38 #ifde‡
__√ed_uc⁄ãxt64_t


39 #i‚de‡
__√ed_°ru˘_uc⁄ãxt64


40 
	#__√ed_°ru˘_uc⁄ãxt64


	)

44 #ifde‡
__√ed_°ru˘_uc⁄ãxt


45 #i‚de‡
__√ed_°ru˘_mc⁄ãxt


46 
	#__√ed_°ru˘_mc⁄ãxt


	)

50 #ifde‡
__√ed_°ru˘_uc⁄ãxt64


51 #i‚de‡
__√ed_°ru˘_mc⁄ãxt64


52 
	#__√ed_°ru˘_mc⁄ãxt64


	)

56 #i‡
deföed
(
__√ed_°ru˘_mc⁄ãxt
Ë|| deföed(
__√ed_°ru˘_mc⁄ãxt64
)

57 
	~<machöe/_°ru˘s.h
>

60 #i‡
deföed
(
__√ed_°ack_t
Ë|| deföed(
__√ed_°ru˘_uc⁄ãxt
Ë|| deföed(
__√ed_°ru˘_uc⁄ãxt64
)

61 #i‚de‡
__√ed_°ru˘_sigÆt°ack


62 
	#__√ed_°ru˘_sigÆt°ack


	)

66 #ifde‡
__√ed_°ru˘_sigÆt°ack


67 #unde‡
__√ed_°ru˘_sigÆt°ack


69 #i‚de‡
_STRUCT_SIGALTSTACK


70 #i‡
__DARWIN_UNIX03


71 
	#_STRUCT_SIGALTSTACK
 
__d¨wö_sigÆt°ack


	)

73 
	#_STRUCT_SIGALTSTACK
 
sigÆt°ack


	)

75 
	g_STRUCT_SIGALTSTACK


77 *
	gss_•
;

78 
__d¨wö_size_t
 
	gss_size
;

79 
	gss_Êags
;

84 #ifde‡
__√ed_°ru˘_time•ec


85 #unde‡
__√ed_°ru˘_time•ec


86 #i‚de‡
_STRUCT_TIMESPEC


87 
	#_STRUCT_TIMESPEC
 
time•ec


	)

88 
	g_STRUCT_TIMESPEC


90 
__d¨wö_time_t
 
	gtv_£c
;

91 
	gtv_n£c
;

96 #ifde‡
__√ed_°ru˘_timevÆ


97 #unde‡
__√ed_°ru˘_timevÆ


98 #i‚de‡
_STRUCT_TIMEVAL


99 
	#_STRUCT_TIMEVAL
 
timevÆ


	)

100 
	g_STRUCT_TIMEVAL


102 
__d¨wö_time_t
 
	gtv_£c
;

103 
__d¨wö_su£c⁄ds_t
 
	gtv_u£c
;

108 #ifde‡
__√ed_°ru˘_timevÆ32


109 #unde‡
__√ed_°ru˘_timevÆ32


110 #i‚de‡
_STRUCT_TIMEVAL32


111 
	#_STRUCT_TIMEVAL32
 
timevÆ32


	)

112 
	g_STRUCT_TIMEVAL32


114 
__öt32_t
 
	gtv_£c
;

115 
__öt32_t
 
	gtv_u£c
;

120 #ifde‡
__√ed_°ru˘_uc⁄ãxt


121 #unde‡
__√ed_°ru˘_uc⁄ãxt


122 #i‚de‡
_STRUCT_UCONTEXT


123 #i‡
__DARWIN_UNIX03


124 
	#_STRUCT_UCONTEXT
 
__d¨wö_uc⁄ãxt


	)

126 
	#_STRUCT_UCONTEXT
 
uc⁄ãxt


	)

128 
	g_STRUCT_UCONTEXT


130 
	guc_⁄°ack
;

131 
__d¨wö_sig£t_t
 
	guc_sigmask
;

132 
_STRUCT_SIGALTSTACK
 
	guc_°ack
;

133 
_STRUCT_UCONTEXT
 *
	guc_lök
;

134 
__d¨wö_size_t
 
	guc_mcsize
;

135 
_STRUCT_MCONTEXT
 *
	guc_mc⁄ãxt
;

136 #ifde‡
_XOPEN_SOURCE


137 
_STRUCT_MCONTEXT
 
	g__mc⁄ãxt_d©a
;

143 #ifde‡
__√ed_°ru˘_uc⁄ãxt64


144 #unde‡
__√ed_°ru˘_uc⁄ãxt64


145 #i‚de‡
_STRUCT_UCONTEXT64


146 #i‡
__DARWIN_UNIX03


147 
	#_STRUCT_UCONTEXT64
 
__d¨wö_uc⁄ãxt64


	)

149 
	#_STRUCT_UCONTEXT64
 
uc⁄ãxt64


	)

151 
	g_STRUCT_UCONTEXT64


153 
	guc_⁄°ack
;

154 
__d¨wö_sig£t_t
 
	guc_sigmask
;

155 
_STRUCT_SIGALTSTACK
 
	guc_°ack
;

156 
_STRUCT_UCONTEXT64
 *
	guc_lök
;

157 
__d¨wö_size_t
 
	guc_mcsize
;

158 
_STRUCT_MCONTEXT64
 *
	guc_mc⁄ãxt64
;

164 #ifde‡
__√ed_fd_£t


165 #unde‡
__√ed_fd_£t


166 #i‚de‡
_FD_SET


167 
	#_FD_SET


	)

174 #ifde‡
FD_SETSIZE


175 
	#__DARWIN_FD_SETSIZE
 
FD_SETSIZE


	)

177 
	#__DARWIN_FD_SETSIZE
 1024

	)

179 
	#__DARWIN_NBBY
 8

	)

180 
	#__DARWIN_NFDBITS
 ((
__öt32_t
Ë* 
__DARWIN_NBBY
Ë

	)

181 
	#__DARWIN_howm™y
(
x
, 
y
Ë((((xË% (y)Ë=0Ë? ((xË/ (y)Ë: (((xË/ (y)Ë+ 1)Ë

	)

183 
__BEGIN_DECLS


184 
	sfd_£t
 {

185 
__öt32_t
 
	mfds_bôs
[
__DARWIN_howm™y
(
__DARWIN_FD_SETSIZE
, 
__DARWIN_NFDBITS
)];

186 } 
	tfd_£t
;

187 
__END_DECLS


190 
__ölöe
 

191 
	$__d¨wö_fd_is£t
(
_n
, c⁄° 
fd_£t
 *
_p
)

193  (
_p
->
fds_bôs
[
_n
/
__DARWIN_NFDBITS
] & (1<<(_n % __DARWIN_NFDBITS)));

194 
	}
}

196 
	#__DARWIN_FD_SET
(
n
, 
p
Ëdÿ{ 
__fd
 = (n); (’)->
fds_bôs
[__fd/
__DARWIN_NFDBITS
] |(1<<(__fd % __DARWIN_NFDBITS))); } 0)

	)

197 
	#__DARWIN_FD_CLR
(
n
, 
p
Ëdÿ{ 
__fd
 = (n); (’)->
fds_bôs
[__fd/
__DARWIN_NFDBITS
] &~(1<<(__fd % __DARWIN_NFDBITS))); } 0)

	)

198 
	#__DARWIN_FD_ISSET
(
n
, 
p
Ë
	`__d¨wö_fd_is£t
(“), (p))

	)

200 #i‡
__GNUC__
 > 3 || __GNUC__ =3 && 
__GNUC_MINOR__
 >= 3

205 
	#__DARWIN_FD_ZERO
(
p
Ë
	`__buûtö_bzîo
’, (*’)))

	)

207 
	#__DARWIN_FD_ZERO
(
p
Ë
	`bzîo
’, (*’)))

	)

210 
	#__DARWIN_FD_COPY
(
f
, 
t
Ë
	`bc›y
(f,Å, (*(f)))

	)

214 #ifde‡
__√ed_°ack_t


215 #unde‡
__√ed_°ack_t


216 #i‚de‡
_STACK_T


217 
	#_STACK_T


	)

218 
_STRUCT_SIGALTSTACK
 
	t°ack_t
;

222 #ifde‡
__√ed_uc⁄ãxt_t


223 #unde‡
__√ed_uc⁄ãxt_t


225 #i‚de‡
_UCONTEXT_T


226 
	#_UCONTEXT_T


	)

227 
_STRUCT_UCONTEXT
 
	tuc⁄ãxt_t
;

231 #ifde‡
__√ed_uc⁄ãxt64_t


232 #unde‡
__√ed_uc⁄ãxt64_t


233 #i‚de‡
_UCONTEXT64_T


234 
	#_UCONTEXT64_T


	)

235 
_STRUCT_UCONTEXT64
 
	tuc⁄ãxt64_t
;

	@/usr/include/sys/_types.h

29 #i‚de‡
_SYS__TYPES_H_


30 
	#_SYS__TYPES_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<machöe/_ty≥s.h
>

36 #i‡
deföed
(
__LP64__
)

37 
	#__PTHREAD_SIZE__
 1168

	)

38 
	#__PTHREAD_ATTR_SIZE__
 56

	)

39 
	#__PTHREAD_MUTEXATTR_SIZE__
 8

	)

40 
	#__PTHREAD_MUTEX_SIZE__
 56

	)

41 
	#__PTHREAD_CONDATTR_SIZE__
 8

	)

42 
	#__PTHREAD_COND_SIZE__
 40

	)

43 
	#__PTHREAD_ONCE_SIZE__
 8

	)

44 
	#__PTHREAD_RWLOCK_SIZE__
 192

	)

45 
	#__PTHREAD_RWLOCKATTR_SIZE__
 16

	)

47 
	#__PTHREAD_SIZE__
 596

	)

48 
	#__PTHREAD_ATTR_SIZE__
 36

	)

49 
	#__PTHREAD_MUTEXATTR_SIZE__
 8

	)

50 
	#__PTHREAD_MUTEX_SIZE__
 40

	)

51 
	#__PTHREAD_CONDATTR_SIZE__
 4

	)

52 
	#__PTHREAD_COND_SIZE__
 24

	)

53 
	#__PTHREAD_ONCE_SIZE__
 4

	)

54 
	#__PTHREAD_RWLOCK_SIZE__
 124

	)

55 
	#__PTHREAD_RWLOCKATTR_SIZE__
 12

	)

58 
	s__d¨wö_±hªad_h™dÀr_ªc


60 (*
	m__routöe
)(*);

61 *
	m__¨g
;

62 
__d¨wö_±hªad_h™dÀr_ªc
 *
	m__√xt
;

64 
	s_›aque_±hªad_©å_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_ATTR_SIZE__
]; };

65 
	s_›aque_±hªad_c⁄d_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_COND_SIZE__
]; };

66 
	s_›aque_±hªad_c⁄d©å_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_CONDATTR_SIZE__
]; };

67 
	s_›aque_±hªad_muãx_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_MUTEX_SIZE__
]; };

68 
	s_›aque_±hªad_muãx©å_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_MUTEXATTR_SIZE__
]; };

69 
	s_›aque_±hªad_⁄˚_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_ONCE_SIZE__
]; };

70 
	s_›aque_±hªad_rwlock_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_RWLOCK_SIZE__
]; };

71 
	s_›aque_±hªad_rwlock©å_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_RWLOCKATTR_SIZE__
]; };

72 
	s_›aque_±hªad_t
 { 
	m__sig
; 
__d¨wö_±hªad_h™dÀr_ªc
 *
	m__˛ónup_°ack
; 
	m__›aque
[
__PTHREAD_SIZE__
]; };

80 #ifde‡
__˝lu•lus


81 #ifde‡
__GNUG__


82 
	#__DARWIN_NULL
 
__nuŒ


	)

84 #ifde‡
__LP64__


85 
	#__DARWIN_NULL
 (0L)

	)

87 
	#__DARWIN_NULL
 0

	)

91 
	#__DARWIN_NULL
 ((*)0)

	)

94 
__öt64_t
 
	t__d¨wö_blk˙t_t
;

95 
__öt32_t
 
	t__d¨wö_blksize_t
;

96 
__öt32_t
 
	t__d¨wö_dev_t
;

97 
	t__d¨wö_fsblk˙t_t
;

98 
	t__d¨wö_fsfû˙t_t
;

99 
__uöt32_t
 
	t__d¨wö_gid_t
;

100 
__uöt32_t
 
	t__d¨wö_id_t
;

101 
__uöt64_t
 
	t__d¨wö_öo64_t
;

102 #i‡
__DARWIN_64_BIT_INO_T


103 
__d¨wö_öo64_t
 
	t__d¨wö_öo_t
;

105 
__uöt32_t
 
	t__d¨wö_öo_t
;

107 
__d¨wö_«tuøl_t
 
	t__d¨wö_mach_p‹t_«me_t
;

108 
__d¨wö_mach_p‹t_«me_t
 
	t__d¨wö_mach_p‹t_t
;

109 
__uöt16_t
 
	t__d¨wö_mode_t
;

110 
__öt64_t
 
	t__d¨wö_off_t
;

111 
__öt32_t
 
	t__d¨wö_pid_t
;

112 
_›aque_±hªad_©å_t


113 
	t__d¨wö_±hªad_©å_t
;

114 
_›aque_±hªad_c⁄d_t


115 
	t__d¨wö_±hªad_c⁄d_t
;

116 
_›aque_±hªad_c⁄d©å_t


117 
	t__d¨wö_±hªad_c⁄d©å_t
;

118 
	t__d¨wö_±hªad_key_t
;

119 
_›aque_±hªad_muãx_t


120 
	t__d¨wö_±hªad_muãx_t
;

121 
_›aque_±hªad_muãx©å_t


122 
	t__d¨wö_±hªad_muãx©å_t
;

123 
_›aque_±hªad_⁄˚_t


124 
	t__d¨wö_±hªad_⁄˚_t
;

125 
_›aque_±hªad_rwlock_t


126 
	t__d¨wö_±hªad_rwlock_t
;

127 
_›aque_±hªad_rwlock©å_t


128 
	t__d¨wö_±hªad_rwlock©å_t
;

129 
_›aque_±hªad_t


130 *
	t__d¨wö_±hªad_t
;

131 
__uöt32_t
 
	t__d¨wö_sig£t_t
;

132 
__öt32_t
 
	t__d¨wö_su£c⁄ds_t
;

133 
__uöt32_t
 
	t__d¨wö_uid_t
;

134 
__uöt32_t
 
	t__d¨wö_u£c⁄ds_t
;

135 
	t__d¨wö_uuid_t
[16];

136 
	t__d¨wö_uuid_°rög_t
[37];

	@/usr/include/sys/appleapiopts.h

29 #i‚de‡
__SYS_APPLEAPIOPTS_H__


30 
	#__SYS_APPLEAPIOPTS_H__


	)

33 #i‚de‡
__APPLE_API_STANDARD


34 
	#__APPLE_API_STANDARD


	)

37 #i‚de‡
__APPLE_API_STABLE


38 
	#__APPLE_API_STABLE


	)

41 #i‚de‡
__APPLE_API_STRICT_CONFORMANCE


43 #i‚de‡
__APPLE_API_EVOLVING


44 
	#__APPLE_API_EVOLVING


	)

47 #i‚de‡
__APPLE_API_UNSTABLE


48 
	#__APPLE_API_UNSTABLE


	)

51 #i‚de‡
__APPLE_API_PRIVATE


52 
	#__APPLE_API_PRIVATE


	)

55 #i‚de‡
__APPLE_API_OBSOLETE


56 
	#__APPLE_API_OBSOLETE


	)

	@/usr/include/sys/cdefs.h

67 #i‚def 
_CDEFS_H_


68 
	#_CDEFS_H_


	)

70 #i‡
deföed
(
__˝lu•lus
)

71 
	#__BEGIN_DECLS
 "C" {

	)

72 
	#__END_DECLS
 }

	)

74 
	#__BEGIN_DECLS


	)

75 
	#__END_DECLS


	)

85 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

86 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

87 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

88 
	#__STRING
(
x
Ë#x

	)

90 
	#__c⁄°
 c⁄°

	)

91 
	#__sig√d
 sig√d

	)

92 
	#__vﬁ©ûe
 vﬁ©ûe

	)

93 #i‡
deföed
(
__˝lu•lus
)

94 
	#__ölöe
 
ölöe


	)

96 #i‚de‡
__GNUC__


97 
	#__ölöe


	)

102 
	#__P
(
¥Ÿos
Ë(Ë

	)

103 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

104 
	#__STRING
(
x
Ë"x"

	)

106 #i‚de‡
__GNUC__


107 
	#__c⁄°


	)

108 
	#__ölöe


	)

109 
	#__sig√d


	)

110 
	#__vﬁ©ûe


	)

121 #i‚def 
NO_ANSI_KEYWORDS


122 c⁄° 
__c⁄°


	)

123 
	#ölöe
 
__ölöe


	)

124 sig√d 
__sig√d


	)

125 vﬁ©ûê
__vﬁ©ûe


	)

137 #i‡
deföed
(
__MWERKS__
) && (__MWERKS__ > 0x2400)

139 #ñi‡
__GNUC__
 > 2 || __GNUC__ =2 && 
__GNUC_MINOR__
 >= 5

140 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

141 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

142 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >= 5 && __GNUC_MINOR__ < 7

143 
	#__unu£d


	)

145 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

148 
	#__©åibuã__
(
x
Ë

	)

149 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

151 
	#__dód
 
__vﬁ©ûe


	)

152 
	#__puª
 
__c⁄°


	)

157 #i‚de‡
__dód


158 
	#__dód


	)

159 
	#__puª


	)

161 #i‚de‡
__dód2


162 
	#__dód2


	)

163 
	#__puª2


	)

164 
	#__unu£d


	)

173 #i‡!(
__GNUC__
 =2 && 
__GNUC_MINOR__
 == 95)

174 #i‡
__STDC_VERSION__
 < 199901

175 
	#__ª°ri˘


	)

177 
	#__ª°ri˘
 
ª°ri˘


	)

189 #i‡
__GNUC__
 > 2 || __GNUC__ =2 && 
__GNUC_MINOR__
 >= 7

190 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
) \

191 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

192 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
) \

193 
	`__©åibuã__
((
	`__f‹m©__
 (
__sˇnf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

195 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

196 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

199 
	#__IDSTRING
(
«me
,
°rög
Ëc⁄° «me[] 
__unu£d
 = 
	)
string

201 #i‚de‡
__COPYRIGHT


202 
	#__COPYRIGHT
(
s
Ë
	`__IDSTRING
(
c›yright
,s)

	)

205 #i‚de‡
__RCSID


206 
	#__RCSID
(
s
Ë
	`__IDSTRING
(
rcsid
,s)

	)

209 #i‚de‡
__SCCSID


210 
	#__SCCSID
(
s
Ë
	`__IDSTRING
(
sccsid
,s)

	)

213 #i‚de‡
__PROJECT_VERSION


214 
	#__PROJECT_VERSION
(
s
Ë
	`__IDSTRING
(
¥oje˘_vîsi⁄
,s)

	)

256 
	#__DARWIN_ONLY_64_BIT_INO_T
 0

	)

258 
	#__DARWIN_ONLY_VERS_1050
 0

	)

278 #i‡!
deföed
(
__DARWIN_ONLY_UNIX_CONFORMANCE
)

279 #i‡
deföed
(
__LP64__
)

280 
	#__DARWIN_ONLY_UNIX_CONFORMANCE
 1

	)

282 
	#__DARWIN_ONLY_UNIX_CONFORMANCE
 0

	)

286 #i‡!
deföed
(
__DARWIN_UNIX03
)

287 #i‡ 
__DARWIN_ONLY_UNIX_CONFORMANCE


288 #i‡
deföed
(
_NONSTD_SOURCE
)

291 
	#__DARWIN_UNIX03
 1

	)

292 #ñi‡
deföed
(
_DARWIN_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

293 #i‡
deföed
(
_NONSTD_SOURCE
)

296 
	#__DARWIN_UNIX03
 1

	)

297 #ñi‡
deföed
(
_NONSTD_SOURCE
)

298 
	#__DARWIN_UNIX03
 0

	)

300 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1050)

301 
	#__DARWIN_UNIX03
 0

	)

303 
	#__DARWIN_UNIX03
 1

	)

308 #i‡!
deföed
(
__DARWIN_64_BIT_INO_T
)

309 #i‡ 
deföed
(
_DARWIN_USE_64_BIT_INODE
)

310 #i‡
deföed
(
_DARWIN_NO_64_BIT_INODE
)

313 
	#__DARWIN_64_BIT_INO_T
 1

	)

314 #ñi‡
deföed
(
_DARWIN_NO_64_BIT_INODE
)

315 #i‡
__DARWIN_ONLY_64_BIT_INO_T


318 
	#__DARWIN_64_BIT_INO_T
 0

	)

320 #i‡
__DARWIN_ONLY_64_BIT_INO_T


321 
	#__DARWIN_64_BIT_INO_T
 1

	)

322 #ñi‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
Ë&& ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0Ë< 1060Ë|| 
__DARWIN_UNIX03
 == 0

323 
	#__DARWIN_64_BIT_INO_T
 0

	)

325 
	#__DARWIN_64_BIT_INO_T
 1

	)

330 #i‡!
deföed
(
__DARWIN_VERS_1050
)

331 #i‡ 
__DARWIN_ONLY_VERS_1050


332 
	#__DARWIN_VERS_1050
 1

	)

333 #ñi‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
Ë&& ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0Ë< 1050Ë|| 
__DARWIN_UNIX03
 == 0

334 
	#__DARWIN_VERS_1050
 0

	)

336 
	#__DARWIN_VERS_1050
 1

	)

340 #i‡!
deföed
(
__DARWIN_NON_CANCELABLE
)

341 
	#__DARWIN_NON_CANCELABLE
 0

	)

347 #i‡
__DARWIN_UNIX03


348 #i‡
__DARWIN_ONLY_UNIX_CONFORMANCE


349 
	#__DARWIN_SUF_UNIX03


	)

351 
	#__DARWIN_SUF_UNIX03
 "$UNIX2003"

	)

354 #i‡
__DARWIN_64_BIT_INO_T


355 #i‡
__DARWIN_ONLY_64_BIT_INO_T


356 
	#__DARWIN_SUF_64_BIT_INO_T


	)

358 
	#__DARWIN_SUF_64_BIT_INO_T
 "$INODE64"

	)

361 
	#__DARWIN_SUF_64_BIT_INO_T


	)

364 #i‡
__DARWIN_VERS_1050


365 #i‡
__DARWIN_ONLY_VERS_1050


366 
	#__DARWIN_SUF_1050


	)

368 
	#__DARWIN_SUF_1050
 "$1050"

	)

371 
	#__DARWIN_SUF_1050


	)

374 #i‡
__DARWIN_NON_CANCELABLE


375 
	#__DARWIN_SUF_NON_CANCELABLE
 "$NOCANCEL"

	)

377 
	#__DARWIN_SUF_NON_CANCELABLE


	)

381 
	#__DARWIN_SUF_UNIX03


	)

382 
	#__DARWIN_SUF_64_BIT_INO_T


	)

383 
	#__DARWIN_SUF_NON_CANCELABLE


	)

384 
	#__DARWIN_SUF_1050


	)

387 
	#__DARWIN_SUF_EXTSN
 "$DARWIN_EXTSN"

	)

392 
	#__DARWIN_ALIAS
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_UNIX03
)

	)

393 
	#__DARWIN_ALIAS_C
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_NON_CANCELABLE
 
__DARWIN_SUF_UNIX03
)

	)

394 
	#__DARWIN_ALIAS_I
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_64_BIT_INO_T
 
__DARWIN_SUF_UNIX03
)

	)

395 
	#__DARWIN_INODE64
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_64_BIT_INO_T
)

	)

397 
	#__DARWIN_1050
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
)

	)

398 
	#__DARWIN_1050ALIAS
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
 
__DARWIN_SUF_UNIX03
)

	)

399 
	#__DARWIN_1050ALIAS_C
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
 
__DARWIN_SUF_NON_CANCELABLE
 
__DARWIN_SUF_UNIX03
)

	)

400 
	#__DARWIN_1050ALIAS_I
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
 
__DARWIN_SUF_64_BIT_INO_T
 
__DARWIN_SUF_UNIX03
)

	)

401 
	#__DARWIN_1050INODE64
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
 
__DARWIN_SUF_64_BIT_INO_T
)

	)

403 
	#__DARWIN_EXTSN
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_EXTSN
)

	)

404 
	#__DARWIN_EXTSN_C
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_EXTSN
 
__DARWIN_SUF_NON_CANCELABLE
)

	)

409 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1060)

410 #unde‡
__DARWIN_10_6_AND_LATER


411 
	#__DARWIN_10_6_AND_LATER_ALIAS
(
x
Ë

	)

413 
	#__DARWIN_10_6_AND_LATER


	)

414 
	#__DARWIN_10_6_AND_LATER_ALIAS
(
x
Ë
	)
x

438 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1L

439 #unde‡
_POSIX_C_SOURCE


440 
	#_POSIX_C_SOURCE
 199009L

	)

444 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2L

445 #unde‡
_POSIX_C_SOURCE


446 
	#_POSIX_C_SOURCE
 199209L

	)

450 #ifde‡
_XOPEN_SOURCE


451 #i‡
_XOPEN_SOURCE
 - 0L >= 600L

452 #unde‡
_POSIX_C_SOURCE


453 
	#_POSIX_C_SOURCE
 200112L

	)

454 #ñi‡
_XOPEN_SOURCE
 - 0L >= 500L

455 #unde‡
_POSIX_C_SOURCE


456 
	#_POSIX_C_SOURCE
 199506L

	)

464 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

465 
	#_POSIX_C_SOURCE
 198808L

	)

473 
	#__DARWIN_NO_LONG_LONG
 (
	`deföed
(
__STRICT_ANSI__
) \

474 && (
__STDC_VERSION__
-0 < 199901L) \

475 && !
	`deföed
(
__GNUG__
))

	)

483 #i‡
deföed
(
__¨m__
)

484 
	#__DARWIN_LDBL_COMPAT
(
x
Ë

	)

485 
	#__DARWIN_LDBL_COMPAT2
(
x
Ë

	)

486 
	#__DARWIN_LONG_DOUBLE_IS_DOUBLE
 1

	)

487 #ñi‡
deföed
(
__µc__
)

488 #i‡
deföed
(
__LDBL_MANT_DIG__
Ë&& deföed(
__DBL_MANT_DIG__
) && \

489 
__LDBL_MANT_DIG__
 > 
__DBL_MANT_DIG__


490 #i‡
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
-0 < 1040

491 
	#__DARWIN_LDBL_COMPAT
(
x
Ë
	`__asm
("_" 
	`__STRING
(xË"$LDBLStub")

	)

493 
	#__DARWIN_LDBL_COMPAT
(
x
Ë
	`__asm
("_" 
	`__STRING
(xË"$LDBL128")

	)

495 
	#__DARWIN_LDBL_COMPAT2
(
x
Ë
	`__asm
("_" 
	`__STRING
(xË"$LDBL128")

	)

496 
	#__DARWIN_LONG_DOUBLE_IS_DOUBLE
 0

	)

498 
	#__DARWIN_LDBL_COMPAT
(
x
Ë

	)

499 
	#__DARWIN_LDBL_COMPAT2
(
x
Ë

	)

500 
	#__DARWIN_LONG_DOUBLE_IS_DOUBLE
 1

	)

502 #ñi‡
deföed
(
__i386__
Ë|| deföed(
__µc64__
Ë|| deföed(
__x86_64__
)

503 
	#__DARWIN_LDBL_COMPAT
(
x
Ë

	)

504 
	#__DARWIN_LDBL_COMPAT2
(
x
Ë

	)

505 
	#__DARWIN_LONG_DOUBLE_IS_DOUBLE
 0

	)

507 #îr‹ 
Unknown
 
¨chôe˘uª


513 #i‡
__GNUC__
 >= 3

514 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

516 
	#__dïªˇãd


	)

527 #i‡
__DARWIN_64_BIT_INO_T


528 
	#_DARWIN_FEATURE_64_BIT_INODE
 1

	)

535 #i‡
__DARWIN_LONG_DOUBLE_IS_DOUBLE


536 
	#_DARWIN_FEATURE_LONG_DOUBLE_IS_DOUBLE
 1

	)

545 #i‡
__DARWIN_ONLY_64_BIT_INO_T


546 
	#_DARWIN_FEATURE_ONLY_64_BIT_INODE
 1

	)

553 #i‡
__DARWIN_ONLY_VERS_1050


554 
	#_DARWIN_FEATURE_ONLY_VERS_1050
 1

	)

561 #i‡
__DARWIN_ONLY_UNIX_CONFORMANCE


562 
	#_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE
 1

	)

569 #i‡
__DARWIN_UNIX03


570 
	#_DARWIN_FEATURE_UNIX_CONFORMANCE
 3

	)

579 #i‚de‡
__CAST_AWAY_QUALIFIER


580 
	#__CAST_AWAY_QUALIFIER
(
v¨übÀ
, 
quÆifõr
, 
ty≥
Ë—y≥Ë((*)0 + ((quÆifõ∏*)(v¨übÀË- (quÆifõ∏*)0Ë)

	)

	@/usr/include/sys/errno.h

69 #i‚def 
_SYS_ERRNO_H_


70 
	#_SYS_ERRNO_H_


	)

72 
	~<sys/cdefs.h
>

73 
__BEGIN_DECLS


74 * 
__îr‹
();

75 
	#î∫o
 (*
	`__îr‹
())

	)

76 
	g__END_DECLS


82 
	#EPERM
 1

	)

83 
	#ENOENT
 2

	)

84 
	#ESRCH
 3

	)

85 
	#EINTR
 4

	)

86 
	#EIO
 5

	)

87 
	#ENXIO
 6

	)

88 
	#E2BIG
 7

	)

89 
	#ENOEXEC
 8

	)

90 
	#EBADF
 9

	)

91 
	#ECHILD
 10

	)

92 
	#EDEADLK
 11

	)

94 
	#ENOMEM
 12

	)

95 
	#EACCES
 13

	)

96 
	#EFAULT
 14

	)

97 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

98 
	#ENOTBLK
 15

	)

100 
	#EBUSY
 16

	)

101 
	#EEXIST
 17

	)

102 
	#EXDEV
 18

	)

103 
	#ENODEV
 19

	)

104 
	#ENOTDIR
 20

	)

105 
	#EISDIR
 21

	)

106 
	#EINVAL
 22

	)

107 
	#ENFILE
 23

	)

108 
	#EMFILE
 24

	)

109 
	#ENOTTY
 25

	)

110 
	#ETXTBSY
 26

	)

111 
	#EFBIG
 27

	)

112 
	#ENOSPC
 28

	)

113 
	#ESPIPE
 29

	)

114 
	#EROFS
 30

	)

115 
	#EMLINK
 31

	)

116 
	#EPIPE
 32

	)

119 
	#EDOM
 33

	)

120 
	#ERANGE
 34

	)

123 
	#EAGAIN
 35

	)

124 
	#EWOULDBLOCK
 
EAGAIN


	)

125 
	#EINPROGRESS
 36

	)

126 
	#EALREADY
 37

	)

129 
	#ENOTSOCK
 38

	)

130 
	#EDESTADDRREQ
 39

	)

131 
	#EMSGSIZE
 40

	)

132 
	#EPROTOTYPE
 41

	)

133 
	#ENOPROTOOPT
 42

	)

134 
	#EPROTONOSUPPORT
 43

	)

135 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

136 
	#ESOCKTNOSUPPORT
 44

	)

138 
	#ENOTSUP
 45

	)

139 #i‡!
__DARWIN_UNIX03
 && !
deföed
(
KERNEL
)

148 
	#EOPNOTSUPP
 
ENOTSUP


	)

151 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

152 
	#EPFNOSUPPORT
 46

	)

154 
	#EAFNOSUPPORT
 47

	)

155 
	#EADDRINUSE
 48

	)

156 
	#EADDRNOTAVAIL
 49

	)

159 
	#ENETDOWN
 50

	)

160 
	#ENETUNREACH
 51

	)

161 
	#ENETRESET
 52

	)

162 
	#ECONNABORTED
 53

	)

163 
	#ECONNRESET
 54

	)

164 
	#ENOBUFS
 55

	)

165 
	#EISCONN
 56

	)

166 
	#ENOTCONN
 57

	)

167 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

168 
	#ESHUTDOWN
 58

	)

169 
	#ETOOMANYREFS
 59

	)

171 
	#ETIMEDOUT
 60

	)

172 
	#ECONNREFUSED
 61

	)

174 
	#ELOOP
 62

	)

175 
	#ENAMETOOLONG
 63

	)

178 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

179 
	#EHOSTDOWN
 64

	)

181 
	#EHOSTUNREACH
 65

	)

182 
	#ENOTEMPTY
 66

	)

185 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

186 
	#EPROCLIM
 67

	)

187 
	#EUSERS
 68

	)

189 
	#EDQUOT
 69

	)

192 
	#ESTALE
 70

	)

193 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

194 
	#EREMOTE
 71

	)

195 
	#EBADRPC
 72

	)

196 
	#ERPCMISMATCH
 73

	)

197 
	#EPROGUNAVAIL
 74

	)

198 
	#EPROGMISMATCH
 75

	)

199 
	#EPROCUNAVAIL
 76

	)

202 
	#ENOLCK
 77

	)

203 
	#ENOSYS
 78

	)

205 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

206 
	#EFTYPE
 79

	)

207 
	#EAUTH
 80

	)

208 
	#ENEEDAUTH
 81

	)

211 
	#EPWROFF
 82

	)

212 
	#EDEVERR
 83

	)

215 
	#EOVERFLOW
 84

	)

218 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

219 
	#EBADEXEC
 85

	)

220 
	#EBADARCH
 86

	)

221 
	#ESHLIBVERS
 87

	)

222 
	#EBADMACHO
 88

	)

225 
	#ECANCELED
 89

	)

227 
	#EIDRM
 90

	)

228 
	#ENOMSG
 91

	)

229 
	#EILSEQ
 92

	)

230 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

231 
	#ENOATTR
 93

	)

234 
	#EBADMSG
 94

	)

235 
	#EMULTIHOP
 95

	)

236 
	#ENODATA
 96

	)

237 
	#ENOLINK
 97

	)

238 
	#ENOSR
 98

	)

239 
	#ENOSTR
 99

	)

240 
	#EPROTO
 100

	)

241 
	#ETIME
 101

	)

243 #i‡
__DARWIN_UNIX03
 || 
deföed
(
KERNEL
)

245 
	#EOPNOTSUPP
 102

	)

248 
	#ENOPOLICY
 103

	)

250 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

251 
	#ELAST
 103

	)

	@/usr/include/sys/fcntl.h

70 #i‚de‡
_SYS_FCNTL_H_


71 
	#_SYS_FCNTL_H_


	)

78 
	~<sys/_ty≥s.h
>

79 
	~<sys/cdefs.h
>

82 #i‚de‡
_SIZE_T


83 
	#_SIZE_T


	)

84 
__d¨wö_size_t
 
	tsize_t
;

87 #i‚def 
_MODE_T


88 
__d¨wö_mode_t
 
	tmode_t
;

89 
	#_MODE_T


	)

92 #i‚de‡
_OFF_T


93 
__d¨wö_off_t
 
	toff_t
;

94 
	#_OFF_T


	)

97 #i‚de‡
_PID_T


98 
__d¨wö_pid_t
 
	tpid_t
;

99 
	#_PID_T


	)

110 
	#O_RDONLY
 0x0000

	)

111 
	#O_WRONLY
 0x0001

	)

112 
	#O_RDWR
 0x0002

	)

113 
	#O_ACCMODE
 0x0003

	)

123 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

124 
	#FREAD
 0x0001

	)

125 
	#FWRITE
 0x0002

	)

127 
	#O_NONBLOCK
 0x0004

	)

128 
	#O_APPEND
 0x0008

	)

129 #i‚de‡
O_SYNC


130 
	#O_SYNC
 0x0080

	)

132 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

133 
	#O_SHLOCK
 0x0010

	)

134 
	#O_EXLOCK
 0x0020

	)

135 
	#O_ASYNC
 0x0040

	)

136 
	#O_FSYNC
 
O_SYNC


	)

137 
	#O_NOFOLLOW
 0x0100

	)

139 
	#O_CREAT
 0x0200

	)

140 
	#O_TRUNC
 0x0400

	)

141 
	#O_EXCL
 0x0800

	)

142 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

143 
	#O_EVTONLY
 0x8000

	)

147 
	#O_NOCTTY
 0x20000

	)

150 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

151 
	#O_DIRECTORY
 0x100000

	)

152 
	#O_SYMLINK
 0x200000

	)

155 #i‚de‡
O_DSYNC


156 
	#O_DSYNC
 0x400000

	)

165 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

166 
	#FAPPEND
 
O_APPEND


	)

167 
	#FASYNC
 
O_ASYNC


	)

168 
	#FFSYNC
 
O_FSYNC


	)

169 
	#FFDSYNC
 
O_DSYNC


	)

170 
	#FNONBLOCK
 
O_NONBLOCK


	)

171 
	#FNDELAY
 
O_NONBLOCK


	)

172 
	#O_NDELAY
 
O_NONBLOCK


	)

179 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

180 
	#CPF_OVERWRITE
 1

	)

181 
	#CPF_IGNORE_MODE
 2

	)

182 
	#CPF_MASK
 (
CPF_OVERWRITE
|
CPF_IGNORE_MODE
)

	)

190 
	#F_DUPFD
 0

	)

191 
	#F_GETFD
 1

	)

192 
	#F_SETFD
 2

	)

193 
	#F_GETFL
 3

	)

194 
	#F_SETFL
 4

	)

195 
	#F_GETOWN
 5

	)

196 
	#F_SETOWN
 6

	)

197 
	#F_GETLK
 7

	)

198 
	#F_SETLK
 8

	)

199 
	#F_SETLKW
 9

	)

200 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

201 
	#F_CHKCLEAN
 41

	)

202 
	#F_PREALLOCATE
 42

	)

203 
	#F_SETSIZE
 43

	)

204 
	#F_RDADVISE
 44

	)

205 
	#F_RDAHEAD
 45

	)

206 
	#F_READBOOTSTRAP
 46

	)

207 
	#F_WRITEBOOTSTRAP
 47

	)

208 
	#F_NOCACHE
 48

	)

209 
	#F_LOG2PHYS
 49

	)

210 
	#F_GETPATH
 50

	)

211 
	#F_FULLFSYNC
 51

	)

212 
	#F_PATHPKG_CHECK
 52

	)

213 
	#F_FREEZE_FS
 53

	)

214 
	#F_THAW_FS
 54

	)

215 
	#F_GLOBAL_NOCACHE
 55

	)

218 
	#F_ADDSIGS
 59

	)

220 
	#F_MARKDEPENDENCY
 60

	)

222 
	#F_ADDFILESIGS
 61

	)

225 
	#FCNTL_FS_SPECIFIC_BASE
 0x00010000

	)

230 
	#FD_CLOEXEC
 1

	)

233 
	#F_RDLCK
 1

	)

234 
	#F_UNLCK
 2

	)

235 
	#F_WRLCK
 3

	)

241 #i‚de‡
SEEK_SET


242 
	#SEEK_SET
 0

	)

243 
	#SEEK_CUR
 1

	)

244 
	#SEEK_END
 2

	)

251 #i‚de‡
S_IFMT


253 
	#S_IFMT
 0170000

	)

254 
	#S_IFIFO
 0010000

	)

255 
	#S_IFCHR
 0020000

	)

256 
	#S_IFDIR
 0040000

	)

257 
	#S_IFBLK
 0060000

	)

258 
	#S_IFREG
 0100000

	)

259 
	#S_IFLNK
 0120000

	)

260 
	#S_IFSOCK
 0140000

	)

261 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

262 
	#S_IFWHT
 0160000

	)

267 
	#S_IRWXU
 0000700

	)

268 
	#S_IRUSR
 0000400

	)

269 
	#S_IWUSR
 0000200

	)

270 
	#S_IXUSR
 0000100

	)

272 
	#S_IRWXG
 0000070

	)

273 
	#S_IRGRP
 0000040

	)

274 
	#S_IWGRP
 0000020

	)

275 
	#S_IXGRP
 0000010

	)

277 
	#S_IRWXO
 0000007

	)

278 
	#S_IROTH
 0000004

	)

279 
	#S_IWOTH
 0000002

	)

280 
	#S_IXOTH
 0000001

	)

282 
	#S_ISUID
 0004000

	)

283 
	#S_ISGID
 0002000

	)

284 
	#S_ISVTX
 0001000

	)

286 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

287 
	#S_ISTXT
 
S_ISVTX


	)

288 
	#S_IREAD
 
S_IRUSR


	)

289 
	#S_IWRITE
 
S_IWUSR


	)

290 
	#S_IEXEC
 
S_IXUSR


	)

294 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

297 
	#F_ALLOCATECONTIG
 0x00000002

	)

298 
	#F_ALLOCATEALL
 0x00000004

	)

302 
	#F_PEOFPOSMODE
 3

	)

304 
	#F_VOLPOSMODE
 4

	)

311 
	sÊock
 {

312 
off_t
 
	ml_°¨t
;

313 
off_t
 
	ml_Àn
;

314 
pid_t
 
	ml_pid
;

315 
	ml_ty≥
;

316 
	ml_whí˚
;

320 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

327 
	sødvis‹y
 {

328 
off_t
 
	mø_off£t
;

329 
	mø_cou¡
;

339 
	sfsig«tuªs
 {

340 
off_t
 
	mfs_fûe_°¨t
;

341 *
	mfs_blob_°¨t
;

342 
size_t
 
	mfs_blob_size
;

343 } 
	tfsig«tuªs_t
;

346 
	#LOCK_SH
 0x01

	)

347 
	#LOCK_EX
 0x02

	)

348 
	#LOCK_NB
 0x04

	)

349 
	#LOCK_UN
 0x08

	)

353 
	sf°‹e
 {

354 
	mf°_Êags
;

355 
	mf°_posmode
;

356 
off_t
 
	mf°_off£t
;

357 
off_t
 
	mf°_Àngth
;

358 
off_t
 
	mf°_byãßŒoc
;

359 } 
	tf°‹e_t
;

363 
	sfboŸ°ø±øns„r
 {

364 
off_t
 
	mfbt_off£t
;

365 
size_t
 
	mfbt_Àngth
;

366 *
	mfbt_buf„r
;

367 } 
	tfboŸ°ø±øns„r_t
;

386 #¥agm®
∑ck
(4)

388 
	slog2phys
 {

389 
	ml2p_Êags
;

390 
off_t
 
	ml2p_c⁄tigbyãs
;

391 
off_t
 
	ml2p_devoff£t
;

394 #¥agm®
∑ck
()

396 
	#O_POPUP
 0x80000000

	)

397 
	#O_ALERT
 0x20000000

	)

403 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

404 #i‚de‡
_FILESEC_T


405 
	g_fûe£c
;

406 
_fûe£c
 *
	tfûe£c_t
;

407 
	#_FILESEC_T


	)

410 
	mFILESEC_OWNER
 = 1,

411 
	mFILESEC_GROUP
 = 2,

412 
	mFILESEC_UUID
 = 3,

413 
	mFILESEC_MODE
 = 4,

414 
	mFILESEC_ACL
 = 5,

415 
	mFILESEC_GRPUUID
 = 6,

418 
	mFILESEC_ACL_RAW
 = 100,

419 
	mFILESEC_ACL_ALLOCSIZE
 = 101

420 } 
	tfûe£c_¥›îty_t
;

423 
	#FILESEC_GUID
 
FILESEC_UUID


	)

426 
__BEGIN_DECLS


427 
	$›í
(c⁄° *, , ...Ë
	`__DARWIN_ALIAS_C
(
›í
);

428 
	$¸ót
(c⁄° *, 
mode_t
Ë
	`__DARWIN_ALIAS_C
(
¸ót
);

429 
	$f˙é
(, , ...Ë
	`__DARWIN_ALIAS_C
(
f˙é
);

430 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

431 
	`›íx_≈
(c⁄° *, , 
fûe£c_t
);

432 
	`Êock
(, );

433 
fûe£c_t
 
	`fûe£c_öô
();

434 
fûe£c_t
 
	`fûe£c_dup
(filesec_t);

435 
	`fûe£c_‰ì
(
fûe£c_t
);

436 
	`fûe£c_gë_¥›îty
(
fûe£c_t
, 
fûe£c_¥›îty_t
, *);

437 
	`fûe£c_quîy_¥›îty
(
fûe£c_t
, 
fûe£c_¥›îty_t
, *);

438 
	`fûe£c_£t_¥›îty
(
fûe£c_t
, 
fûe£c_¥›îty_t
, const *);

439 
	`fûe£c_un£t_¥›îty
(
fûe£c_t
, 
fûe£c_¥›îty_t
);

440 
	#_FILESEC_UNSET_PROPERTY
 ((*)0)

	)

441 
	#_FILESEC_REMOVE_ACL
 ((*)1)

	)

443 
__END_DECLS


	@/usr/include/sys/resource.h

64 #i‚de‡
_SYS_RESOURCE_H_


65 
	#_SYS_RESOURCE_H_


	)

67 
	~<sys/≠∂ópi›ts.h
>

68 
	~<sys/cdefs.h
>

69 
	~<sys/_ty≥s.h
>

75 
	#__√ed_°ru˘_timevÆ


	)

76 
	~<sys/_°ru˘s.h
>

79 #i‚de‡
_ID_T


80 
	#_ID_T


	)

81 
__d¨wö_id_t
 
	tid_t
;

88 
__uöt64_t
 
	tæim_t
;

99 
	#PRIO_PROCESS
 0

	)

100 
	#PRIO_PGRP
 1

	)

101 
	#PRIO_USER
 2

	)

103 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

104 
	#PRIO_DARWIN_THREAD
 3

	)

109 
	#PRIO_MIN
 -20

	)

110 
	#PRIO_MAX
 20

	)

116 
	#PRIO_DARWIN_BG
 0x1000

	)

130 
	#RUSAGE_SELF
 0

	)

131 
	#RUSAGE_CHILDREN
 -1

	)

142 
	srußge
 {

143 
timevÆ
 
	mru_utime
;

144 
timevÆ
 
	mru_°ime
;

145 #i‡
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_DARWIN_C_SOURCE
)

146 
	mru_›aque
[14];

153 
	mru_maxrss
;

154 
	#ru_fú°
 
ru_ixrss


	)

155 
	mru_ixrss
;

156 
	mru_idrss
;

157 
	mru_i§ss
;

158 
	mru_möÊt
;

159 
	mru_majÊt
;

160 
	mru_nsw≠
;

161 
	mru_öblock
;

162 
	mru_oublock
;

163 
	mru_msg¢d
;

164 
	mru_msgrcv
;

165 
	mru_nsig«ls
;

166 
	mru_nvcsw
;

167 
	mru_nivcsw
;

168 
	#ru_œ°
 
ru_nivcsw


	)

184 
	#RLIM_INFINITY
 (((
__uöt64_t
)1 << 63Ë- 1Ë

	)

185 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

186 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

192 
	#RLIMIT_CPU
 0

	)

193 
	#RLIMIT_FSIZE
 1

	)

194 
	#RLIMIT_DATA
 2

	)

195 
	#RLIMIT_STACK
 3

	)

196 
	#RLIMIT_CORE
 4

	)

197 
	#RLIMIT_AS
 5

	)

198 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

199 
	#RLIMIT_RSS
 
RLIMIT_AS


	)

200 
	#RLIMIT_MEMLOCK
 6

	)

201 
	#RLIMIT_NPROC
 7

	)

203 
	#RLIMIT_NOFILE
 8

	)

204 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

205 
	#RLIM_NLIMITS
 9

	)

207 
	#_RLIMIT_POSIX_FLAG
 0x1000

	)

213 
	sæimô
 {

214 
æim_t
 
	mæim_cur
;

215 
æim_t
 
	mæim_max
;

218 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

220 
	#IOPOL_TYPE_DISK
 0

	)

223 
	#IOPOL_SCOPE_PROCESS
 0

	)

224 
	#IOPOL_SCOPE_THREAD
 1

	)

227 
	#IOPOL_DEFAULT
 0

	)

228 
	#IOPOL_NORMAL
 1

	)

229 
	#IOPOL_PASSIVE
 2

	)

230 
	#IOPOL_THROTTLE
 3

	)

235 
__BEGIN_DECLS


236 
gë¥i‹ôy
(, 
id_t
);

237 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

238 
gëi›ﬁicy_≈
(, );

240 
	$gëæimô
(, 
æimô
 *Ë
	`__DARWIN_ALIAS
(
gëæimô
);

241 
	`gërußge
(, 
rußge
 *);

242 
	`£çri‹ôy
(, 
id_t
, );

243 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

244 
	`£ti›ﬁicy_≈
(, , );

246 
	$£ålimô
(, c⁄° 
æimô
 *Ë
	`__DARWIN_ALIAS
(
£ålimô
);

247 
__END_DECLS


	@/usr/include/sys/select.h

63 #i‚de‡
_SYS_SELECT_H_


64 
	#_SYS_SELECT_H_


	)

66 
	~<sys/≠∂ópi›ts.h
>

67 
	~<sys/cdefs.h
>

68 
	~<sys/_ty≥s.h
>

75 
	#__√ed_fd_£t


	)

76 
	#__√ed_°ru˘_time•ec


	)

77 
	#__√ed_°ru˘_timevÆ


	)

78 
	~<sys/_°ru˘s.h
>

85 #i‚def 
_TIME_T


86 
	#_TIME_T


	)

87 
__d¨wö_time_t
 
	ttime_t
;

90 #i‚de‡
_SUSECONDS_T


91 
	#_SUSECONDS_T


	)

92 
__d¨wö_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

95 #i‚de‡
_SIGSET_T


96 
	#_SIGSET_T


	)

97 
__d¨wö_sig£t_t
 
	tsig£t_t
;

112 #i‚def 
FD_SETSIZE


113 
	#FD_SETSIZE
 
__DARWIN_FD_SETSIZE


	)

115 #i‚de‡
FD_SET


116 
	#FD_SET
(
n
, 
p
Ë
	`__DARWIN_FD_SET
“,Ö)

	)

118 #i‚de‡
FD_CLR


119 
	#FD_CLR
(
n
, 
p
Ë
	`__DARWIN_FD_CLR
“,Ö)

	)

121 #i‚de‡
FD_ISSET


122 
	#FD_ISSET
(
n
, 
p
Ë
	`__DARWIN_FD_ISSET
“,Ö)

	)

124 #i‚de‡
FD_ZERO


125 
	#FD_ZERO
(
p
Ë
	`__DARWIN_FD_ZERO
’)

	)

127 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

128 #i‚de‡
FD_COPY


129 
	#FD_COPY
(
f
, 
t
Ë
	`__DARWIN_FD_COPY
(f,Å)

	)

134 
	g__BEGIN_DECLS


136 #i‚de‡ 
__MWERKS__


137 
	$p£À˘
(, 
fd_£t
 * 
__ª°ri˘
, fd_set * __restrict,

138 
fd_£t
 * 
__ª°ri˘
, c⁄° 
time•ec
 * __restrict,

139 c⁄° 
sig£t_t
 * 
__ª°ri˘
)

140 #i‡
	`deföed
(
_DARWIN_C_SOURCE
Ë|| deföed(
_DARWIN_UNLIMITED_SELECT
)

141 
	$__DARWIN_EXTSN_C
(
p£À˘
)

143 #i‡
	`deföed
(
__LP64__
Ë&& !
__DARWIN_NON_CANCELABLE


144 
	$__DARWIN_1050
(
p£À˘
)

146 
	$__DARWIN_ALIAS_C
(
p£À˘
)

152 
	~<sys/_£À˘.h
>

154 
__END_DECLS


	@/usr/include/sys/signal.h

69 #i‚def 
_SYS_SIGNAL_H_


70 
	#_SYS_SIGNAL_H_


	)

72 
	~<sys/cdefs.h
>

73 
	~<sys/≠∂ópi›ts.h
>

75 
	#__DARWIN_NSIG
 32

	)

77 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

78 
	#NSIG
 
__DARWIN_NSIG


	)

81 
	~<machöe/sig«l.h
>

83 
	#SIGHUP
 1

	)

84 
	#SIGINT
 2

	)

85 
	#SIGQUIT
 3

	)

86 
	#SIGILL
 4

	)

87 
	#SIGTRAP
 5

	)

88 
	#SIGABRT
 6

	)

89 #i‡ (
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_DARWIN_C_SOURCE
))

90 
	#SIGPOLL
 7

	)

92 
	#SIGIOT
 
SIGABRT


	)

93 
	#SIGEMT
 7

	)

95 
	#SIGFPE
 8

	)

96 
	#SIGKILL
 9

	)

97 
	#SIGBUS
 10

	)

98 
	#SIGSEGV
 11

	)

99 
	#SIGSYS
 12

	)

100 
	#SIGPIPE
 13

	)

101 
	#SIGALRM
 14

	)

102 
	#SIGTERM
 15

	)

103 
	#SIGURG
 16

	)

104 
	#SIGSTOP
 17

	)

105 
	#SIGTSTP
 18

	)

106 
	#SIGCONT
 19

	)

107 
	#SIGCHLD
 20

	)

108 
	#SIGTTIN
 21

	)

109 
	#SIGTTOU
 22

	)

110 #i‡ (!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

111 
	#SIGIO
 23

	)

113 
	#SIGXCPU
 24

	)

114 
	#SIGXFSZ
 25

	)

115 
	#SIGVTALRM
 26

	)

116 
	#SIGPROF
 27

	)

117 #i‡ (!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

118 
	#SIGWINCH
 28

	)

119 
	#SIGINFO
 29

	)

121 
	#SIGUSR1
 30

	)

122 
	#SIGUSR2
 31

	)

124 #i‡
deföed
(
_ANSI_SOURCE
Ë|| 
__DARWIN_UNIX03
 || deföed(
__˝lu•lus
)

130 
	#SIG_DFL
 ((*)())0

	)

131 
	#SIG_IGN
 ((*)())1

	)

132 
	#SIG_HOLD
 ((*)())5

	)

133 
	#SIG_ERR
 (((*)())-1)

	)

136 
	#SIG_DFL
 ((*)–))0

	)

137 
	#SIG_IGN
 ((*)–))1

	)

138 
	#SIG_HOLD
 ((*)–))5

	)

139 
	#SIG_ERR
 (((*)–))-1)

	)

142 #i‚de‡
_ANSI_SOURCE


143 
	~<sys/_ty≥s.h
>

145 
	#__√ed_mc⁄ãxt_t


	)

146 
	#__√ed_°ack_t


	)

147 
	#__√ed_uc⁄ãxt_t


	)

148 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

149 #i‡
deföed
(
__µc__
Ë|| deföed(
__µc64__
)

150 
	#__√ed_mc⁄ãxt64_t


	)

151 
	#__√ed_uc⁄ãxt64_t


	)

154 
	~<sys/_°ru˘s.h
>

156 #i‚de‡
_PID_T


157 
	#_PID_T


	)

158 
__d¨wö_pid_t
 
	tpid_t
;

161 #i‚de‡
_PTHREAD_ATTR_T


162 
	#_PTHREAD_ATTR_T


	)

163 
__d¨wö_±hªad_©å_t
 
	t±hªad_©å_t
;

166 #i‚de‡
_SIGSET_T


167 
	#_SIGSET_T


	)

168 
__d¨wö_sig£t_t
 
	tsig£t_t
;

171 #i‚def 
_SIZE_T


172 
	#_SIZE_T


	)

173 
__d¨wö_size_t
 
	tsize_t
;

176 #i‚de‡
_UID_T


177 
	#_UID_T


	)

178 
__d¨wö_uid_t
 
	tuid_t
;

181 
	usigvÆ
 {

183 
	msivÆ_öt
;

184 *
	msivÆ_±r
;

187 
	#SIGEV_NONE
 0

	)

188 
	#SIGEV_SIGNAL
 1

	)

189 
	#SIGEV_THREAD
 3

	)

191 
	ssigevít
 {

192 
	msigev_nŸify
;

193 
	msigev_signo
;

194 
sigvÆ
 
	msigev_vÆue
;

195 (*
	msigev_nŸify_fun˘i⁄
)(
	msigvÆ
);

196 
±hªad_©å_t
 *
	msigev_nŸify_©åibuãs
;

200 
	s__sigöfo
 {

201 
	msi_signo
;

202 
	msi_î∫o
;

203 
	msi_code
;

204 
pid_t
 
	msi_pid
;

205 
uid_t
 
	msi_uid
;

206 
	msi_°©us
;

207 *
	msi_addr
;

208 
sigvÆ
 
	msi_vÆue
;

209 
	msi_b™d
;

210 
	m__∑d
[7];

211 } 
	tsigöfo_t
;

228 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

229 
	#ILL_NOOP
 0

	)

231 
	#ILL_ILLOPC
 1

	)

232 
	#ILL_ILLTRP
 2

	)

233 
	#ILL_PRVOPC
 3

	)

234 
	#ILL_ILLOPN
 4

	)

235 
	#ILL_ILLADR
 5

	)

236 
	#ILL_PRVREG
 6

	)

237 
	#ILL_COPROC
 7

	)

238 
	#ILL_BADSTK
 8

	)

241 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

242 
	#FPE_NOOP
 0

	)

244 
	#FPE_FLTDIV
 1

	)

245 
	#FPE_FLTOVF
 2

	)

246 
	#FPE_FLTUND
 3

	)

247 
	#FPE_FLTRES
 4

	)

248 
	#FPE_FLTINV
 5

	)

249 
	#FPE_FLTSUB
 6

	)

250 
	#FPE_INTDIV
 7

	)

251 
	#FPE_INTOVF
 8

	)

254 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

255 
	#SEGV_NOOP
 0

	)

257 
	#SEGV_MAPERR
 1

	)

258 
	#SEGV_ACCERR
 2

	)

261 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

262 
	#BUS_NOOP
 0

	)

264 
	#BUS_ADRALN
 1

	)

265 
	#BUS_ADRERR
 2

	)

266 
	#BUS_OBJERR
 3

	)

269 
	#TRAP_BRKPT
 1

	)

270 
	#TRAP_TRACE
 2

	)

273 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

274 
	#CLD_NOOP
 0

	)

276 
	#CLD_EXITED
 1

	)

277 
	#CLD_KILLED
 2

	)

278 
	#CLD_DUMPED
 3

	)

279 
	#CLD_TRAPPED
 4

	)

280 
	#CLD_STOPPED
 5

	)

281 
	#CLD_CONTINUED
 6

	)

284 
	#POLL_IN
 1

	)

285 
	#POLL_OUT
 2

	)

286 
	#POLL_MSG
 3

	)

287 
	#POLL_ERR
 4

	)

288 
	#POLL_PRI
 5

	)

289 
	#POLL_HUP
 6

	)

292 
	u__siga˘i⁄_u
 {

293 (*
	m__ß_h™dÀr
)();

294 (*
	m__ß_siga˘i⁄
)(, 
	m__sigöfo
 *,

299 
	s__siga˘i⁄
 {

300 
__siga˘i⁄_u
 
	m__siga˘i⁄_u
;

301 (*
	mß_åamp
)(*, , , 
	msigöfo_t
 *, *);

302 
sig£t_t
 
	mß_mask
;

303 
	mß_Êags
;

309 
	ssiga˘i⁄
 {

310 
__siga˘i⁄_u
 
	m__siga˘i⁄_u
;

311 
sig£t_t
 
	mß_mask
;

312 
	mß_Êags
;

318 
	#ß_h™dÀr
 
__siga˘i⁄_u
.
__ß_h™dÀr


	)

319 
	#ß_siga˘i⁄
 
__siga˘i⁄_u
.
__ß_siga˘i⁄


	)

321 
	#SA_ONSTACK
 0x0001

	)

322 
	#SA_RESTART
 0x0002

	)

323 
	#SA_RESETHAND
 0x0004

	)

324 
	#SA_NOCLDSTOP
 0x0008

	)

325 
	#SA_NODEFER
 0x0010

	)

326 
	#SA_NOCLDWAIT
 0x0020

	)

327 
	#SA_SIGINFO
 0x0040

	)

328 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

329 
	#SA_USERTRAMP
 0x0100

	)

331 
	#SA_64REGSET
 0x0200

	)

337 
	#SA_USERSPACE_MASK
 (
SA_ONSTACK
 | 
SA_RESTART
 | 
SA_RESETHAND
 | 
SA_NOCLDSTOP
 | 
SA_NODEFER
 | 
SA_NOCLDWAIT
 | 
SA_SIGINFO
)

	)

342 
	#SIG_BLOCK
 1

	)

343 
	#SIG_UNBLOCK
 2

	)

344 
	#SIG_SETMASK
 3

	)

347 
	#SI_USER
 0x10001

	)

348 
	#SI_QUEUE
 0x10002

	)

349 
	#SI_TIMER
 0x10003

	)

350 
	#SI_ASYNCIO
 0x10004

	)

351 
	#SI_MESGQ
 0x10005

	)

353 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

354 (*
	tsig_t
)();

361 
	#SS_ONSTACK
 0x0001

	)

362 
	#SS_DISABLE
 0x0004

	)

363 
	#MINSIGSTKSZ
 32768

	)

364 
	#SIGSTKSZ
 131072

	)

366 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

371 
	ssigvec
 {

372 (*
sv_h™dÀr
)();

373 
sv_mask
;

374 
sv_Êags
;

377 
	#SV_ONSTACK
 
SA_ONSTACK


	)

378 
	#SV_INTERRUPT
 
SA_RESTART


	)

379 
	#SV_RESETHAND
 
SA_RESETHAND


	)

380 
	#SV_NODEFER
 
SA_NODEFER


	)

381 
	#SV_NOCLDSTOP
 
SA_NOCLDSTOP


	)

382 
	#SV_SIGINFO
 
SA_SIGINFO


	)

384 
	#sv_⁄°ack
 
sv_Êags


	)

390 
	ssig°ack
 {

391 *
ss_•
;

392 
ss_⁄°ack
;

395 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

400 
	#sigmask
(
m
Ë(1 << ((m)-1))

	)

403 
	#BADSIG
 
SIG_ERR


	)

412 
__BEGIN_DECLS


413 (*
	`sig«l
(, (*)()))();

414 
__END_DECLS


	@/usr/include/sys/termios.h

64 #i‚de‡
_SYS_TERMIOS_H_


65 
	#_SYS_TERMIOS_H_


	)

67 
	~<sys/cdefs.h
>

76 
	#VEOF
 0

	)

77 
	#VEOL
 1

	)

78 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

79 
	#VEOL2
 2

	)

81 
	#VERASE
 3

	)

82 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

83 
	#VWERASE
 4

	)

85 
	#VKILL
 5

	)

86 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

87 
	#VREPRINT
 6

	)

90 
	#VINTR
 8

	)

91 
	#VQUIT
 9

	)

92 
	#VSUSP
 10

	)

93 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

94 
	#VDSUSP
 11

	)

96 
	#VSTART
 12

	)

97 
	#VSTOP
 13

	)

98 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

99 
	#VLNEXT
 14

	)

100 
	#VDISCARD
 15

	)

102 
	#VMIN
 16

	)

103 
	#VTIME
 17

	)

104 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

105 
	#VSTATUS
 18

	)

108 
	#NCCS
 20

	)

110 #i‚de‡
_POSIX_VDISABLE


111 
	#_POSIX_VDISABLE
 0xff

	)

114 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

115 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË? (vÆË!
_POSIX_VDISABLE
 : 0)

	)

121 
	#IGNBRK
 0x00000001

	)

122 
	#BRKINT
 0x00000002

	)

123 
	#IGNPAR
 0x00000004

	)

124 
	#PARMRK
 0x00000008

	)

125 
	#INPCK
 0x00000010

	)

126 
	#ISTRIP
 0x00000020

	)

127 
	#INLCR
 0x00000040

	)

128 
	#IGNCR
 0x00000080

	)

129 
	#ICRNL
 0x00000100

	)

130 
	#IXON
 0x00000200

	)

131 
	#IXOFF
 0x00000400

	)

132 
	#IXANY
 0x00000800

	)

133 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

134 
	#IMAXBEL
 0x00002000

	)

135 
	#IUTF8
 0x00004000

	)

141 
	#OPOST
 0x00000001

	)

142 
	#ONLCR
 0x00000002

	)

143 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

144 
	#OXTABS
 0x00000004

	)

145 
	#ONOEOT
 0x00000008

	)

153 
	#OCRNL
 0x00000010

	)

154 
	#ONOCR
 0x00000020

	)

155 
	#ONLRET
 0x00000040

	)

156 
	#OFILL
 0x00000080

	)

157 
	#NLDLY
 0x00000300

	)

158 
	#TABDLY
 0x00000c04

	)

159 
	#CRDLY
 0x00003000

	)

160 
	#FFDLY
 0x00004000

	)

161 
	#BSDLY
 0x00008000

	)

162 
	#VTDLY
 0x00010000

	)

163 
	#OFDEL
 0x00020000

	)

164 #i‡!
deföed
(
_SYS_IOCTL_COMPAT_H_
Ë|| 
__DARWIN_UNIX03


175 
	#NL0
 0x00000000

	)

176 
	#NL1
 0x00000100

	)

177 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

178 
	#NL2
 0x00000200

	)

179 
	#NL3
 0x00000300

	)

181 
	#TAB0
 0x00000000

	)

182 
	#TAB1
 0x00000400

	)

183 
	#TAB2
 0x00000800

	)

185 
	#TAB3
 0x00000004

	)

186 
	#CR0
 0x00000000

	)

187 
	#CR1
 0x00001000

	)

188 
	#CR2
 0x00002000

	)

189 
	#CR3
 0x00003000

	)

190 
	#FF0
 0x00000000

	)

191 
	#FF1
 0x00004000

	)

192 
	#BS0
 0x00000000

	)

193 
	#BS1
 0x00008000

	)

194 
	#VT0
 0x00000000

	)

195 
	#VT1
 0x00010000

	)

204 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

205 
	#CIGNORE
 0x00000001

	)

207 
	#CSIZE
 0x00000300

	)

208 
	#CS5
 0x00000000

	)

209 
	#CS6
 0x00000100

	)

210 
	#CS7
 0x00000200

	)

211 
	#CS8
 0x00000300

	)

212 
	#CSTOPB
 0x00000400

	)

213 
	#CREAD
 0x00000800

	)

214 
	#PARENB
 0x00001000

	)

215 
	#PARODD
 0x00002000

	)

216 
	#HUPCL
 0x00004000

	)

217 
	#CLOCAL
 0x00008000

	)

218 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

219 
	#CCTS_OFLOW
 0x00010000

	)

220 
	#CRTSCTS
 (
CCTS_OFLOW
 | 
CRTS_IFLOW
)

	)

221 
	#CRTS_IFLOW
 0x00020000

	)

222 
	#CDTR_IFLOW
 0x00040000

	)

223 
	#CDSR_OFLOW
 0x00080000

	)

224 
	#CCAR_OFLOW
 0x00100000

	)

225 
	#MDMBUF
 0x00100000

	)

237 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

238 
	#ECHOKE
 0x00000001

	)

240 
	#ECHOE
 0x00000002

	)

241 
	#ECHOK
 0x00000004

	)

242 
	#ECHO
 0x00000008

	)

243 
	#ECHONL
 0x00000010

	)

244 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

245 
	#ECHOPRT
 0x00000020

	)

246 
	#ECHOCTL
 0x00000040

	)

248 
	#ISIG
 0x00000080

	)

249 
	#ICANON
 0x00000100

	)

250 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

251 
	#ALTWERASE
 0x00000200

	)

253 
	#IEXTEN
 0x00000400

	)

254 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

255 
	#EXTPROC
 0x00000800

	)

257 
	#TOSTOP
 0x00400000

	)

258 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

259 
	#FLUSHO
 0x00800000

	)

260 
	#NOKERNINFO
 0x02000000

	)

261 
	#PENDIN
 0x20000000

	)

263 
	#NOFLSH
 0x80000000

	)

265 
	ttcÊag_t
;

266 
	tcc_t
;

267 
	t•ìd_t
;

269 
	sãrmios
 {

270 
tcÊag_t
 
	mc_iÊag
;

271 
tcÊag_t
 
	mc_oÊag
;

272 
tcÊag_t
 
	mc_cÊag
;

273 
tcÊag_t
 
	mc_lÊag
;

274 
cc_t
 
	mc_cc
[
NCCS
];

275 
•ìd_t
 
	mc_i•ìd
;

276 
•ìd_t
 
	mc_o•ìd
;

283 
	#TCSANOW
 0

	)

284 
	#TCSADRAIN
 1

	)

285 
	#TCSAFLUSH
 2

	)

286 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

287 
	#TCSASOFT
 0x10

	)

293 
	#B0
 0

	)

294 
	#B50
 50

	)

295 
	#B75
 75

	)

296 
	#B110
 110

	)

297 
	#B134
 134

	)

298 
	#B150
 150

	)

299 
	#B200
 200

	)

300 
	#B300
 300

	)

301 
	#B600
 600

	)

302 
	#B1200
 1200

	)

303 
	#B1800
 1800

	)

304 
	#B2400
 2400

	)

305 
	#B4800
 4800

	)

306 
	#B9600
 9600

	)

307 
	#B19200
 19200

	)

308 
	#B38400
 38400

	)

309 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

310 
	#B7200
 7200

	)

311 
	#B14400
 14400

	)

312 
	#B28800
 28800

	)

313 
	#B57600
 57600

	)

314 
	#B76800
 76800

	)

315 
	#B115200
 115200

	)

316 
	#B230400
 230400

	)

317 
	#EXTA
 19200

	)

318 
	#EXTB
 38400

	)

322 
	#TCIFLUSH
 1

	)

323 
	#TCOFLUSH
 2

	)

324 
	#TCIOFLUSH
 3

	)

325 
	#TCOOFF
 1

	)

326 
	#TCOON
 2

	)

327 
	#TCIOFF
 3

	)

328 
	#TCION
 4

	)

330 
	~<sys/cdefs.h
>

332 
__BEGIN_DECLS


333 
•ìd_t
 
cfgëi•ìd
(c⁄° 
ãrmios
 *);

334 
•ìd_t
 
cfgëo•ìd
(c⁄° 
ãrmios
 *);

335 
cf£ti•ìd
(
ãrmios
 *, 
•ìd_t
);

336 
cf£to•ìd
(
ãrmios
 *, 
•ìd_t
);

337 
tcgë©å
(, 
ãrmios
 *);

338 
tc£èâr
(, , c⁄° 
ãrmios
 *);

339 
	$tcdøö
(Ë
	`__DARWIN_ALIAS_C
(
tcdøö
);

340 
	`tcÊow
(, );

341 
	`tcÊush
(, );

342 
	`tc£ndbªak
(, );

344 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

345 
	`cfmakîaw
(
ãrmios
 *);

346 
	`cf£t•ìd
(
ãrmios
 *, 
•ìd_t
);

348 
__END_DECLS


351 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

358 
	~<sys/âycom.h
>

366 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

367 
	~<sys/âydeÁu…s.h
>

	@/usr/include/sys/unistd.h

64 #i‚de‡
_SYS_UNISTD_H_


65 
	#_SYS_UNISTD_H_


	)

67 
	~<sys/cdefs.h
>

75 #ifdef 
_NOT_AVAILABLE


76 
	#_POSIX_SAVED_IDS


	)

79 
	#_POSIX_VERSION
 200112L

	)

80 
	#_POSIX2_VERSION
 200112L

	)

84 #i‚de‡
_POSIX_VDISABLE


85 
	#_POSIX_VDISABLE
 (()'\377')

	)

88 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

91 
	#F_OK
 0

	)

92 
	#X_OK
 (1<<0Ë

	)

93 
	#W_OK
 (1<<1Ë

	)

94 
	#R_OK
 (1<<2Ë

	)

96 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

102 
	#_READ_OK
 (1<<9Ë

	)

103 
	#_WRITE_OK
 (1<<10Ë

	)

104 
	#_EXECUTE_OK
 (1<<11Ë

	)

105 
	#_DELETE_OK
 (1<<12Ë

	)

106 
	#_APPEND_OK
 (1<<13Ë

	)

107 
	#_RMFILE_OK
 (1<<14Ë

	)

108 
	#_RATTR_OK
 (1<<15Ë

	)

109 
	#_WATTR_OK
 (1<<16Ë

	)

110 
	#_REXT_OK
 (1<<17Ë

	)

111 
	#_WEXT_OK
 (1<<18Ë

	)

112 
	#_RPERM_OK
 (1<<19Ë

	)

113 
	#_WPERM_OK
 (1<<20Ë

	)

114 
	#_CHOWN_OK
 (1<<21Ë

	)

116 
	#_ACCESS_EXTENDED_MASK
 (
_READ_OK
 | 
_WRITE_OK
 | 
_EXECUTE_OK
 | \

117 
_DELETE_OK
 | 
_APPEND_OK
 | \

118 
_RMFILE_OK
 | 
_REXT_OK
 | \

119 
_WEXT_OK
 | 
_RATTR_OK
 | 
_WATTR_OK
 | 
_RPERM_OK
 | \

120 
_WPERM_OK
 | 
_CHOWN_OK
)

	)

124 #i‚de‡
SEEK_SET


125 
	#SEEK_SET
 0

	)

126 
	#SEEK_CUR
 1

	)

127 
	#SEEK_END
 2

	)

130 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

132 
	#L_SET
 
SEEK_SET


	)

133 
	#L_INCR
 
SEEK_CUR


	)

134 
	#L_XTND
 
SEEK_END


	)

137 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

138 
	sac˚ssx_des¸ùt‹
 {

139 
	mad_«me_off£t
;

140 
	mad_Êags
;

141 
	mad_∑d
[2];

143 
	#ACCESSX_MAX_DESCRIPTORS
 100

	)

144 
	#ACCESSX_MAX_TABLESIZE
 (16 * 1024)

	)

148 
	#_PC_LINK_MAX
 1

	)

149 
	#_PC_MAX_CANON
 2

	)

150 
	#_PC_MAX_INPUT
 3

	)

151 
	#_PC_NAME_MAX
 4

	)

152 
	#_PC_PATH_MAX
 5

	)

153 
	#_PC_PIPE_BUF
 6

	)

154 
	#_PC_CHOWN_RESTRICTED
 7

	)

155 
	#_PC_NO_TRUNC
 8

	)

156 
	#_PC_VDISABLE
 9

	)

158 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

159 
	#_PC_NAME_CHARS_MAX
 10

	)

160 
	#_PC_CASE_SENSITIVE
 11

	)

161 
	#_PC_CASE_PRESERVING
 12

	)

162 
	#_PC_EXTENDED_SECURITY_NP
 13

	)

163 
	#_PC_AUTH_OPAQUE_NP
 14

	)

166 
	#_PC_2_SYMLINKS
 15

	)

167 
	#_PC_ALLOC_SIZE_MIN
 16

	)

168 
	#_PC_ASYNC_IO
 17

	)

169 
	#_PC_FILESIZEBITS
 18

	)

170 
	#_PC_PRIO_IO
 19

	)

171 
	#_PC_REC_INCR_XFER_SIZE
 20

	)

172 
	#_PC_REC_MAX_XFER_SIZE
 21

	)

173 
	#_PC_REC_MIN_XFER_SIZE
 22

	)

174 
	#_PC_REC_XFER_ALIGN
 23

	)

175 
	#_PC_SYMLINK_MAX
 24

	)

176 
	#_PC_SYNC_IO
 25

	)

179 
	#_CS_PATH
 1

	)

	@/usr/include/time.h

63 #i‚de‡
_TIME_H_


64 
	#_TIME_H_


	)

66 
	~<_ty≥s.h
>

68 
	#__√ed_°ru˘_time•ec


	)

69 
	~<_°ru˘s.h
>

71 #i‚de‡
NULL


72 
	#NULL
 
__DARWIN_NULL


	)

75 #i‚def 
_CLOCK_T


76 
	#_CLOCK_T


	)

77 
__d¨wö_˛ock_t
 
	t˛ock_t
;

80 #i‚def 
_SIZE_T


81 
	#_SIZE_T


	)

82 
__d¨wö_size_t
 
	tsize_t
;

85 #i‚def 
_TIME_T


86 
	#_TIME_T


	)

87 
__d¨wö_time_t
 
	ttime_t
;

90 
	stm
 {

91 
	mtm_£c
;

92 
	mtm_mö
;

93 
	mtm_hour
;

94 
	mtm_mday
;

95 
	mtm_m⁄
;

96 
	mtm_yór
;

97 
	mtm_wday
;

98 
	mtm_yday
;

99 
	mtm_isd°
;

100 
	mtm_gmtoff
;

101 *
	mtm_z⁄e
;

104 #i‡
__DARWIN_UNIX03


105 
	#CLOCKS_PER_SEC
 1000000

	)

107 
	~<machöe/_limôs.h
>

109 
	#CLOCKS_PER_SEC
 (
__DARWIN_CLK_TCK
)

	)

112 #i‚de‡
_ANSI_SOURCE


113 *
tz«me
[];

116 
gëd©e_îr
;

117 #i‡
__DARWIN_UNIX03


118 
timez⁄e
 
__DARWIN_ALIAS
(timezone);

120 
daylight
;

122 
__BEGIN_DECLS


123 *
as˘ime
(c⁄° 
tm
 *);

124 
˛ock_t
 
	$˛ock
(Ë
	`__DARWIN_ALIAS
(
˛ock
);

125 *
	`˘ime
(c⁄° 
time_t
 *);

126 
	`dif·ime
(
time_t
,Åime_t);

127 
tm
 *
	`gëd©e
(const *);

128 
tm
 *
	`gmtime
(c⁄° 
time_t
 *);

129 
tm
 *
	`loˇ…ime
(c⁄° 
time_t
 *);

130 
time_t
 
	$mktime
(
tm
 *Ë
	`__DARWIN_ALIAS
(
mktime
);

131 
size_t
 
	$°r·ime
(* 
__ª°ri˘
, 
size_t
, c⁄° * __ª°ri˘, c⁄° 
tm
 * __ª°ri˘Ë
	`__DARWIN_ALIAS
(
°r·ime
);

132 *
	$°Ωtime
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
tm
 * __ª°ri˘Ë
	`__DARWIN_ALIAS
(
°Ωtime
);

133 
time_t
 
	`time
(time_t *);

135 #i‚de‡
_ANSI_SOURCE


136 
	`tz£t
();

140 *
	`as˘ime_r
(c⁄° 
tm
 * 
__ª°ri˘
, * __restrict);

141 *
	`˘ime_r
(c⁄° 
time_t
 *, *);

142 
tm
 *
	`gmtime_r
(c⁄° 
time_t
 * 
__ª°ri˘
, tm * __restrict);

143 
tm
 *
	`loˇ…ime_r
(c⁄° 
time_t
 * 
__ª°ri˘
, tm * __restrict);

145 #i‡!
	`deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

146 
time_t
 
	`posix2time
(time_t);

147 #i‡!
__DARWIN_UNIX03


148 *
	`timez⁄e
(, );

150 
	`tz£twÆl
();

151 
time_t
 
	`time2posix
(time_t);

152 
time_t
 
	`timñoˇl
(
tm
 * const);

153 
time_t
 
	`timegm
(
tm
 * const);

156 #i‡!
	`deföed
(
_ANSI_SOURCE
)

157 
	$«no¶ìp
(c⁄° 
time•ec
 *, time•e¯*Ë
	`__DARWIN_ALIAS_C
(
«no¶ìp
);

159 
__END_DECLS


161 #ifde‡
_USE_EXTENDED_LOCALES_


162 
	~<xloˇÀ/_time.h
>

	@/usr/include/xlocale/_ctype.h

24 #i‚de‡
_XLOCALE__CTYPE_H_


25 
	#_XLOCALE__CTYPE_H_


	)

30 #i‡!
deföed
(
_DONT_USE_CTYPE_INLINE_
) && \

31 (
deföed
(
_USE_CTYPE_INLINE_
Ë|| deföed(
__GNUC__
Ë|| 
	$deföed
(
__˝lu•lus
))

34 
__BEGIN_DECLS


35 
	`___ru√ty≥_l
(
__d¨wö_˘_ru√_t
, 
loˇÀ_t
);

36 
__d¨wö_˘_ru√_t
 
	`___tﬁowî_l
(__d¨wö_˘_ru√_t, 
loˇÀ_t
);

37 
__d¨wö_˘_ru√_t
 
	`___touµî_l
(__d¨wö_˘_ru√_t, 
loˇÀ_t
);

38 
__END_DECLS


40 
__BEGIN_DECLS


41 
	`__maskru√_l
(
__d¨wö_˘_ru√_t
, , 
loˇÀ_t
);

42 
__END_DECLS


44 
__DARWIN_CTYPE_°©ic_ölöe
 

45 
	$__i°y≥_l
(
__d¨wö_˘_ru√_t
 
_c
, 
_f
, 
loˇÀ_t
 
_l
)

47  !!(
	`ißscii
(
_c
Ë? (
_DeÁu…Ru√LoˇÀ
.
__ru√ty≥
[_c] & 
_f
)

48 : 
	`__maskru√_l
(
_c
, 
_f
, 
_l
));

49 
	}
}

51 
__DARWIN_CTYPE_°©ic_ölöe
 
__d¨wö_˘_ru√_t


52 
	$__touµî_l
(
__d¨wö_˘_ru√_t
 
_c
, 
loˇÀ_t
 
_l
)

54  
	`ißscii
(
_c
Ë? 
_DeÁu…Ru√LoˇÀ
.
__m≠uµî
[_c]

55 : 
	`___touµî_l
(
_c
, 
_l
);

56 
	}
}

58 
__DARWIN_CTYPE_°©ic_ölöe
 
__d¨wö_˘_ru√_t


59 
	$__tﬁowî_l
(
__d¨wö_˘_ru√_t
 
_c
, 
loˇÀ_t
 
_l
)

61  
	`ißscii
(
_c
Ë? 
_DeÁu…Ru√LoˇÀ
.
__m≠lowî
[_c]

62 : 
	`___tﬁowî_l
(
_c
, 
_l
);

63 
	}
}

65 
__DARWIN_CTYPE_°©ic_ölöe
 

66 
	$__wcwidth_l
(
__d¨wö_˘_ru√_t
 
_c
, 
loˇÀ_t
 
_l
)

68 
_x
;

70 i‡(
_c
 == 0)

72 
_x
 = ()
	`__maskru√_l
(
_c
, 
_CTYPE_SWM
|
_CTYPE_R
, 
_l
);

73 i‡((
_x
 & 
_CTYPE_SWM
) != 0)

74  ((
_x
 & 
_CTYPE_SWM
Ë>> 
_CTYPE_SWS
);

75  ((
_x
 & 
_CTYPE_R
) != 0 ? 1 : -1);

76 
	}
}

78 #i‚de‡
_EXTERNALIZE_CTYPE_INLINES_


80 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

81 
	$digôtoöt_l
(
c
, 
loˇÀ_t
 
l
)

83  (
	`__maskru√_l
(
c
, 0x0F, 
l
));

84 
	}
}

86 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

87 
	$iß um_l
(
c
, 
loˇÀ_t
 
l
)

89  (
	`__i°y≥_l
(
c
, 
_CTYPE_A
|
_CTYPE_D
, 
l
));

90 
	}
}

92 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

93 
	$ißÕha_l
(
c
, 
loˇÀ_t
 
l
)

95  (
	`__i°y≥_l
(
c
, 
_CTYPE_A
, 
l
));

96 
	}
}

98 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

99 
	$isbœnk_l
(
c
, 
loˇÀ_t
 
l
)

101  (
	`__i°y≥_l
(
c
, 
_CTYPE_B
, 
l
));

102 
	}
}

104 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

105 
	$is˙ål_l
(
c
, 
loˇÀ_t
 
l
)

107  (
	`__i°y≥_l
(
c
, 
_CTYPE_C
, 
l
));

108 
	}
}

110 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

111 
	$isdigô_l
(
c
, 
loˇÀ_t
 
l
)

113  (
	`__i°y≥_l
(
c
, 
_CTYPE_D
, 
l
));

114 
	}
}

116 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

117 
	$isgøph_l
(
c
, 
loˇÀ_t
 
l
)

119  (
	`__i°y≥_l
(
c
, 
_CTYPE_G
, 
l
));

120 
	}
}

122 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

123 
	$ishexnumbî_l
(
c
, 
loˇÀ_t
 
l
)

125  (
	`__i°y≥_l
(
c
, 
_CTYPE_X
, 
l
));

126 
	}
}

128 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

129 
	$isideogøm_l
(
c
, 
loˇÀ_t
 
l
)

131  (
	`__i°y≥_l
(
c
, 
_CTYPE_I
, 
l
));

132 
	}
}

134 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

135 
	$i¶owî_l
(
c
, 
loˇÀ_t
 
l
)

137  (
	`__i°y≥_l
(
c
, 
_CTYPE_L
, 
l
));

138 
	}
}

140 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

141 
	$i¢umbî_l
(
c
, 
loˇÀ_t
 
l
)

143  (
	`__i°y≥_l
(
c
, 
_CTYPE_D
, 
l
));

144 
	}
}

146 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

147 
	$i•h⁄ogøm_l
(
c
, 
loˇÀ_t
 
l
)

149  (
	`__i°y≥_l
(
c
, 
_CTYPE_Q
, 
l
));

150 
	}
}

152 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

153 
	$i•röt_l
(
c
, 
loˇÀ_t
 
l
)

155  (
	`__i°y≥_l
(
c
, 
_CTYPE_R
, 
l
));

156 
	}
}

158 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

159 
	$i•un˘_l
(
c
, 
loˇÀ_t
 
l
)

161  (
	`__i°y≥_l
(
c
, 
_CTYPE_P
, 
l
));

162 
	}
}

164 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

165 
	$i§u√_l
(
c
, 
loˇÀ_t
 
l
)

167  (
	`__i°y≥_l
(
c
, 0xFFFFFFF0L, 
l
));

168 
	}
}

170 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

171 
	$is•a˚_l
(
c
, 
loˇÀ_t
 
l
)

173  (
	`__i°y≥_l
(
c
, 
_CTYPE_S
, 
l
));

174 
	}
}

176 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

177 
	$is•ecül_l
(
c
, 
loˇÀ_t
 
l
)

179  (
	`__i°y≥_l
(
c
, 
_CTYPE_T
, 
l
));

180 
	}
}

182 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

183 
	$isuµî_l
(
c
, 
loˇÀ_t
 
l
)

185  (
	`__i°y≥_l
(
c
, 
_CTYPE_U
, 
l
));

186 
	}
}

188 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

189 
	$isxdigô_l
(
c
, 
loˇÀ_t
 
l
)

191  (
	`__i°y≥_l
(
c
, 
_CTYPE_X
, 
l
));

192 
	}
}

194 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

195 
	$tﬁowî_l
(
c
, 
loˇÀ_t
 
l
)

197  (
	`__tﬁowî_l
(
c
, 
l
));

198 
	}
}

200 
__DARWIN_CTYPE_TOP_°©ic_ölöe
 

201 
	$touµî_l
(
c
, 
loˇÀ_t
 
l
)

203  (
	`__touµî_l
(
c
, 
l
));

204 
	}
}

209 
__BEGIN_DECLS


210 
digôtoöt_l
(, 
loˇÀ_t
);

211 
iß um_l
(, 
loˇÀ_t
);

212 
ißÕha_l
(, 
loˇÀ_t
);

213 
isbœnk_l
(, 
loˇÀ_t
);

214 
is˙ål_l
(, 
loˇÀ_t
);

215 
isdigô_l
(, 
loˇÀ_t
);

216 
isgøph_l
(, 
loˇÀ_t
);

217 
ishexnumbî_l
(, 
loˇÀ_t
);

218 
isideogøm_l
(, 
loˇÀ_t
);

219 
i¶owî_l
(, 
loˇÀ_t
);

220 
i¢umbî_l
(, 
loˇÀ_t
);

221 
i•h⁄ogøm_l
(, 
loˇÀ_t
);

222 
i•röt_l
(, 
loˇÀ_t
);

223 
i•un˘_l
(, 
loˇÀ_t
);

224 
i§u√_l
(, 
loˇÀ_t
);

225 
is•a˚_l
(, 
loˇÀ_t
);

226 
is•ecül_l
(, 
loˇÀ_t
);

227 
isuµî_l
(, 
loˇÀ_t
);

228 
isxdigô_l
(, 
loˇÀ_t
);

229 
tﬁowî_l
(, 
loˇÀ_t
);

230 
touµî_l
(, 
loˇÀ_t
);

231 
	g__END_DECLS


	@/usr/include/xlocale/_stdio.h

24 #i‚de‡
_XLOCALE__STDIO_H_


25 
	#_XLOCALE__STDIO_H_


	)

27 
__BEGIN_DECLS


28 
	$a•rötf_l
(**, 
loˇÀ_t
, const *, ...)

29 
	$__DARWIN_LDBL_COMPAT2
(
a•rötf_l
Ë
	`__¥ötÊike
(3, 4);

30 
	$Ârötf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

31 
	$__DARWIN_LDBL_COMPAT2
(
Ârötf_l
Ë
	`__¥ötÊike
(3, 4);

32 
	$fsˇnf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

33 
	$__DARWIN_LDBL_COMPAT2
(
fsˇnf_l
Ë
	`__sˇnÊike
(3, 4);

34 
	$¥ötf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...)

35 
	$__DARWIN_LDBL_COMPAT2
(
¥ötf_l
Ë
	`__¥ötÊike
(2, 3);

36 
	$sˇnf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...)

37 
	$__DARWIN_LDBL_COMPAT2
(
sˇnf_l
Ë
	`__sˇnÊike
(2, 3);

38 
	$¢¥ötf_l
(* 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
,

39 c⁄° * 
__ª°ri˘
, ...)

40 
	$__DARWIN_LDBL_COMPAT2
(
¢¥ötf_l
Ë
	`__¥ötÊike
(4, 5);

41 
	$•rötf_l
(* 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

42 
	$__DARWIN_LDBL_COMPAT2
(
•rötf_l
Ë
	`__¥ötÊike
(3, 4);

43 
	$ssˇnf_l
(c⁄° * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

44 ...Ë
	$__DARWIN_LDBL_COMPAT2
(
ssˇnf_l
Ë
	`__sˇnÊike
(3, 4);

45 
	$va•rötf_l
(**, 
loˇÀ_t
, c⁄° *, 
va_li°
)

46 
	$__DARWIN_LDBL_COMPAT2
(
va•rötf_l
Ë
	`__¥ötÊike
(3, 0);

47 
	$vÂrötf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

48 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT2
(
vÂrötf_l
Ë
	`__¥ötÊike
(3, 0);

49 
	$vfsˇnf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

50 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT2
(
vfsˇnf_l
Ë
	`__sˇnÊike
(3, 0);

51 
	$v¥ötf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
va_li°
)

52 
	$__DARWIN_LDBL_COMPAT2
(
v¥ötf_l
Ë
	`__¥ötÊike
(2, 0);

53 
	$vsˇnf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
va_li°
)

54 
	$__DARWIN_LDBL_COMPAT2
(
vsˇnf_l
Ë
	`__sˇnÊike
(2, 0);

55 
	$v¢¥ötf_l
(* 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
,

56 c⁄° * 
__ª°ri˘
, 
va_li°
)

57 
	$__DARWIN_LDBL_COMPAT2
(
v¢¥ötf_l
Ë
	`__¥ötÊike
(4, 0);

58 
	$v•rötf_l
(* 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

59 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT2
(
v•rötf_l
Ë
	`__¥ötÊike
(3, 0);

60 
	$vssˇnf_l
(c⁄° * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

61 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT2
(
vssˇnf_l
Ë
	`__sˇnÊike
(3, 0);

62 
__END_DECLS


	@/usr/include/xlocale/_stdlib.h

24 #i‚de‡
_XLOCALE__STDLIB_H_


25 
	#_XLOCALE__STDLIB_H_


	)

27 
__BEGIN_DECLS


28 
©of_l
(c⁄° *, 
loˇÀ_t
);

29 
©oi_l
(c⁄° *, 
loˇÀ_t
);

30 
©ﬁ_l
(c⁄° *, 
loˇÀ_t
);

31 #i‡!
__DARWIN_NO_LONG_LONG


33 
©ﬁl_l
(c⁄° *, 
loˇÀ_t
);

35 
mbÀn_l
(c⁄° *, 
size_t
, 
loˇÀ_t
);

36 
size_t
 
mb°owcs_l
(
wch¨_t
 * 
__ª°ri˘
 , const * __restrict, size_t,

37 
loˇÀ_t
);

38 
mbtowc_l
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
,

39 
loˇÀ_t
);

40 
	$°πod_l
(c⁄° *, **, 
loˇÀ_t
Ë
	`__DARWIN_ALIAS
(
°πod_l
);

41 
	$°πof_l
(c⁄° *, **, 
loˇÀ_t
Ë
	`__DARWIN_ALIAS
(
°πof_l
);

42 
	`°πﬁ_l
(c⁄° *, **, , 
loˇÀ_t
);

44 
	$°πﬁd_l
(c⁄° *, **, 
loˇÀ_t
)

45 
	`__DARWIN_LDBL_COMPAT2
(
°πﬁd_l
);

47 
	`°πﬁl_l
(c⁄° *, **, , 
loˇÀ_t
);

48 #i‡!
__DARWIN_NO_LONG_LONG


50 
	`°πoq_l
(c⁄° *, **, , 
loˇÀ_t
);

53 
	`°πoul_l
(c⁄° *, **, , 
loˇÀ_t
);

55 
	`°πouŒ_l
(c⁄° *, **, , 
loˇÀ_t
);

56 #i‡!
__DARWIN_NO_LONG_LONG


58 
	`°πouq_l
(c⁄° *, **, , 
loˇÀ_t
);

60 
size_t
 
	`wc°ombs_l
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t,

61 
loˇÀ_t
);

62 
	`w˘omb_l
(*, 
wch¨_t
, 
loˇÀ_t
);

65 #i‡!
	`deföed
(
__˝lu•lus
Ë&& deföed(
__WCHAR_MAX__
) && __WCHAR_MAX__ <= 0xffffU

66 #¥agm®
GCC
 
pois⁄
 
mb°owcs_l
 
mbtowc_l
 
wc°ombs_l
 
w˘omb_l


68 
__END_DECLS


	@/usr/include/xlocale/_string.h

24 #i‚de‡
_XLOCALE__STRING_H_


25 
	#_XLOCALE__STRING_H_


	)

27 
__BEGIN_DECLS


28 
°rcﬁl_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

29 
size_t
 
°rx‰m_l
(*, c⁄° *, size_t, 
loˇÀ_t
);

30 
°rˇ£cmp_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

31 *
°rˇ£°r_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

32 
°∫ˇ£cmp_l
(c⁄° *, c⁄° *, 
size_t
, 
loˇÀ_t
);

33 
	g__END_DECLS


	@/usr/include/AvailabilityInternal.h

30 #i‚de‡
__AVAILABILITY_INTERNAL__


31 
	#__AVAILABILITY_INTERNAL__


	)

36 
	#__AVAILABILITY_INTERNAL_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
,
	`visibûôy
("deÁu…")))

	)

37 
	#__AVAILABILITY_INTERNAL_UNAVAILABLE
 
	`__©åibuã__
((
u«vaûabÀ
,
	`visibûôy
("deÁu…")))

	)

38 
	#__AVAILABILITY_INTERNAL_WEAK_IMPORT
 
	`__©åibuã__
((
wók_imp‹t
,
	`visibûôy
("deÁu…")))

	)

39 
	#__AVAILABILITY_INTERNAL_REGULAR
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

42 #i‚de‡
__IPHONE_OS_VERSION_MIN_REQUIRED


43 #ifde‡
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__


45 
	#__IPHONE_OS_VERSION_MIN_REQUIRED
 
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__


	)

50 #ifde‡
__IPHONE_OS_VERSION_MIN_REQUIRED


52 #i‚de‡
__IPHONE_OS_VERSION_MAX_ALLOWED


53 
	#__IPHONE_OS_VERSION_MAX_ALLOWED
 
__IPHONE_3_0


	)

56 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_0


57 #unde‡
__IPHONE_OS_VERSION_MIN_REQUIRED


58 
	#__IPHONE_OS_VERSION_MIN_REQUIRED
 
__IPHONE_2_0


	)

62 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_2_0


63 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

64 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_0


65 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

67 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

69 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_2_0


	)

70 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

72 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_2_1


73 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

74 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


75 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

77 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

79 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

80 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


81 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

82 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

84 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

85 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

88 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_2_2


89 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

90 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


91 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

93 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

95 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

96 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


97 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

98 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

99 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

100 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


101 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

102 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

103 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

105 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

106 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

107 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

110 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_3_0


111 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

112 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


113 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

115 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

117 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

118 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


119 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

120 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

121 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

122 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

123 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


124 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

125 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

126 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

127 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

128 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


129 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

130 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

131 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

132 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

134 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

135 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

136 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

137 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

140 
	#__AVAILABILITY_INTERNAL__IPHONE_NA
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

141 
	#__AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

143 #ñi‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
)

145 
	#__MAC_OS_X_VERSION_MIN_REQUIRED
 
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__


	)

147 #i‚de‡
__MAC_OS_X_VERSION_MAX_ALLOWED


148 
	#__MAC_OS_X_VERSION_MAX_ALLOWED
 
__MAC_10_6


	)

152 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_6


153 
	#__AVAILABILITY_INTERNAL__MAC_10_6
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

154 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_6


155 
	#__AVAILABILITY_INTERNAL__MAC_10_6
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

157 
	#__AVAILABILITY_INTERNAL__MAC_10_6
 
__AVAILABILITY_INTERNAL_REGULAR


	)

159 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_5


160 
	#__AVAILABILITY_INTERNAL__MAC_10_5
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

161 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_5


162 
	#__AVAILABILITY_INTERNAL__MAC_10_5
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

164 
	#__AVAILABILITY_INTERNAL__MAC_10_5
 
__AVAILABILITY_INTERNAL_REGULAR


	)

166 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_4


167 
	#__AVAILABILITY_INTERNAL__MAC_10_4
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

168 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_4


169 
	#__AVAILABILITY_INTERNAL__MAC_10_4
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

171 
	#__AVAILABILITY_INTERNAL__MAC_10_4
 
__AVAILABILITY_INTERNAL_REGULAR


	)

173 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_3


174 
	#__AVAILABILITY_INTERNAL__MAC_10_3
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

175 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_3


176 
	#__AVAILABILITY_INTERNAL__MAC_10_3
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

178 
	#__AVAILABILITY_INTERNAL__MAC_10_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

180 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_2


181 
	#__AVAILABILITY_INTERNAL__MAC_10_2
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

182 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_2


183 
	#__AVAILABILITY_INTERNAL__MAC_10_2
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

185 
	#__AVAILABILITY_INTERNAL__MAC_10_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

187 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_1


188 
	#__AVAILABILITY_INTERNAL__MAC_10_1
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

189 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_1


190 
	#__AVAILABILITY_INTERNAL__MAC_10_1
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

192 
	#__AVAILABILITY_INTERNAL__MAC_10_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

194 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_0


195 
	#__AVAILABILITY_INTERNAL__MAC_10_0
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

196 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_0


197 
	#__AVAILABILITY_INTERNAL__MAC_10_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

199 
	#__AVAILABILITY_INTERNAL__MAC_10_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

201 
	#__AVAILABILITY_INTERNAL__MAC_NA
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

202 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_1


203 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

205 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

207 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_2


208 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

209 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

211 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

212 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

214 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_3


215 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

216 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

217 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

219 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

220 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

221 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

223 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_4


224 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

225 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

226 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

227 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

229 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

230 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

231 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

232 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL__MAC_10_3


	)

234 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_5


235 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

236 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

237 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

238 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

239 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

241 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

242 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

243 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

244 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_3


	)

245 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_4


	)

247 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_6


248 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

249 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

250 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

251 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

252 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

253 
	#__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

255 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

256 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

257 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

258 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_3


	)

259 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_4


	)

260 
	#__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_5


	)

262 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

263 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

264 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

265 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_3


	)

266 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_4


	)

267 
	#__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_5


	)

268 
	#__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_6


	)

269 
	#__AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

	@/usr/include/AvailabilityMacros.h

85 #i‚de‡
__AVAILABILITYMACROS__


86 
	#__AVAILABILITYMACROS__


	)

92 
	#MAC_OS_X_VERSION_10_0
 1000

	)

93 
	#MAC_OS_X_VERSION_10_1
 1010

	)

94 
	#MAC_OS_X_VERSION_10_2
 1020

	)

95 
	#MAC_OS_X_VERSION_10_3
 1030

	)

96 
	#MAC_OS_X_VERSION_10_4
 1040

	)

97 
	#MAC_OS_X_VERSION_10_5
 1050

	)

98 
	#MAC_OS_X_VERSION_10_6
 1060

	)

105 #i‚de‡
MAC_OS_X_VERSION_MIN_REQUIRED


106 #ifde‡
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__


107 #i‡(
__i386__
 || 
__x86_64__
Ë&& (
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
 < 
MAC_OS_X_VERSION_10_4
)

108 #w¨nög 
Buûdög
 
I¡ñ
 
wôh
 
Mac
 
OS
 
X
 
Dïloymít
 
T¨gë
 < 10.4 
is
 
övÆid
.

109 #ñi‡
__µc64__
 && (
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
 < 
MAC_OS_X_VERSION_10_4
)

110 #w¨nög 
Buûdög
 
µc64
 
wôh
 
Mac
 
OS
 
X
 
Dïloymít
 
T¨gë
 < 10.4 
is
 
övÆid
.

112 
	#MAC_OS_X_VERSION_MIN_REQUIRED
 
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__


	)

114 #i‡
__µc64__
 || 
__i386__
 || 
__x86_64__


115 
	#MAC_OS_X_VERSION_MIN_REQUIRED
 
MAC_OS_X_VERSION_10_4


	)

116 #ñi‡
__¨m__


117 
	#MAC_OS_X_VERSION_MIN_REQUIRED
 
MAC_OS_X_VERSION_10_5


	)

119 
	#MAC_OS_X_VERSION_MIN_REQUIRED
 
MAC_OS_X_VERSION_10_1


	)

127 #i‚de‡
MAC_OS_X_VERSION_MAX_ALLOWED


128 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 > 
MAC_OS_X_VERSION_10_6


129 
	#MAC_OS_X_VERSION_MAX_ALLOWED
 
MAC_OS_X_VERSION_MIN_REQUIRED


	)

131 
	#MAC_OS_X_VERSION_MAX_ALLOWED
 
MAC_OS_X_VERSION_10_6


	)

138 #i‡
MAC_OS_X_VERSION_MAX_ALLOWED
 < 
MAC_OS_X_VERSION_MIN_REQUIRED


139 #îr‹ 
MAC_OS_X_VERSION_MAX_ALLOWED
 
mu°
 
be
 >
MAC_OS_X_VERSION_MIN_REQUIRED


141 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 < 
MAC_OS_X_VERSION_10_0


142 #îr‹ 
MAC_OS_X_VERSION_MIN_REQUIRED
 
mu°
 
be
 >
MAC_OS_X_VERSION_10_0


148 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ >4Ë|| ((__GNUC__ =3Ë&& (
__GNUC_MINOR__
 >1))Ë&& (
MAC_OS_X_VERSION_MIN_REQUIRED
 >= 1020)

149 
	#WEAK_IMPORT_ATTRIBUTE
 
	`__©åibuã__
((
wók_imp‹t
))

	)

150 #ñi‡
deföed
(
__MWERKS__
Ë&& (__MWERKS__ >0x3205Ë&& (
MAC_OS_X_VERSION_MIN_REQUIRED
 >= 1020)

151 
	#WEAK_IMPORT_ATTRIBUTE
 
	`__©åibuã__
((
wók_imp‹t
))

	)

153 
	#WEAK_IMPORT_ATTRIBUTE


	)

159 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ >4Ë|| ((__GNUC__ =3Ë&& (
__GNUC_MINOR__
 >= 1)))

160 
	#DEPRECATED_ATTRIBUTE
 
	`__©åibuã__
((
dïªˇãd
))

	)

162 
	#DEPRECATED_ATTRIBUTE


	)

168 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ >4Ë|| ((__GNUC__ =3Ë&& (
__GNUC_MINOR__
 >= 1)))

169 
	#UNAVAILABLE_ATTRIBUTE
 
	`__©åibuã__
((
u«vaûabÀ
))

	)

171 
	#UNAVAILABLE_ATTRIBUTE


	)

181 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER


	)

189 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED
 
DEPRECATED_ATTRIBUTE


	)

196 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_0_AND_LATER
 
DEPRECATED_ATTRIBUTE


	)

208 #i‡
MAC_OS_X_VERSION_MAX_ALLOWED
 < 
MAC_OS_X_VERSION_10_1


209 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER
 
UNAVAILABLE_ATTRIBUTE


	)

210 #ñi‡
MAC_OS_X_VERSION_MIN_REQUIRED
 < 
MAC_OS_X_VERSION_10_1


211 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER
 
WEAK_IMPORT_ATTRIBUTE


	)

213 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER


	)

222 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_1


223 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED
 
DEPRECATED_ATTRIBUTE


	)

225 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED
 
AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER


	)

234 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_1


235 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_1
 
DEPRECATED_ATTRIBUTE


	)

237 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_1
 
AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER


	)

245 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_1


246 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER
 
DEPRECATED_ATTRIBUTE


	)

248 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER


	)

262 #i‡
MAC_OS_X_VERSION_MAX_ALLOWED
 < 
MAC_OS_X_VERSION_10_2


263 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER
 
UNAVAILABLE_ATTRIBUTE


	)

264 #ñi‡
MAC_OS_X_VERSION_MIN_REQUIRED
 < 
MAC_OS_X_VERSION_10_2


265 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER
 
WEAK_IMPORT_ATTRIBUTE


	)

267 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER


	)

276 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_2


277 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED
 
DEPRECATED_ATTRIBUTE


	)

279 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED
 
AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER


	)

288 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_2


289 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2
 
DEPRECATED_ATTRIBUTE


	)

291 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2
 
AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER


	)

300 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_2


301 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2
 
DEPRECATED_ATTRIBUTE


	)

303 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2
 
AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER


	)

311 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_2


312 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_2_AND_LATER
 
DEPRECATED_ATTRIBUTE


	)

314 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_2_AND_LATER


	)

326 #i‡
MAC_OS_X_VERSION_MAX_ALLOWED
 < 
MAC_OS_X_VERSION_10_3


327 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER
 
UNAVAILABLE_ATTRIBUTE


	)

328 #ñi‡
MAC_OS_X_VERSION_MIN_REQUIRED
 < 
MAC_OS_X_VERSION_10_3


329 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER
 
WEAK_IMPORT_ATTRIBUTE


	)

331 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER


	)

340 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_3


341 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED
 
DEPRECATED_ATTRIBUTE


	)

343 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED
 
AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER


	)

352 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_3


353 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3
 
DEPRECATED_ATTRIBUTE


	)

355 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3
 
AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER


	)

364 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_3


365 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3
 
DEPRECATED_ATTRIBUTE


	)

367 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3
 
AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER


	)

376 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_3


377 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3
 
DEPRECATED_ATTRIBUTE


	)

379 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3
 
AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER


	)

387 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_3


388 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_3_AND_LATER
 
DEPRECATED_ATTRIBUTE


	)

390 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_3_AND_LATER


	)

403 #i‡
MAC_OS_X_VERSION_MAX_ALLOWED
 < 
MAC_OS_X_VERSION_10_4


404 
	#AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER
 
UNAVAILABLE_ATTRIBUTE


	)

405 #ñi‡
MAC_OS_X_VERSION_MIN_REQUIRED
 < 
MAC_OS_X_VERSION_10_4


406 
	#AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER
 
WEAK_IMPORT_ATTRIBUTE


	)

408 
	#AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER


	)

417 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_4


418 
	#AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED
 
DEPRECATED_ATTRIBUTE


	)

420 
	#AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED
 
AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER


	)

429 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_4


430 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4
 
DEPRECATED_ATTRIBUTE


	)

432 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4
 
AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER


	)

441 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_4


442 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4
 
DEPRECATED_ATTRIBUTE


	)

444 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4
 
AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER


	)

453 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_4


454 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4
 
DEPRECATED_ATTRIBUTE


	)

456 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4
 
AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER


	)

465 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_4


466 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4
 
DEPRECATED_ATTRIBUTE


	)

468 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4
 
AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER


	)

476 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_4


477 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_4_AND_LATER
 
DEPRECATED_ATTRIBUTE


	)

479 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_4_AND_LATER


	)

491 #i‡
MAC_OS_X_VERSION_MAX_ALLOWED
 < 
MAC_OS_X_VERSION_10_5


492 
	#AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER
 
UNAVAILABLE_ATTRIBUTE


	)

493 #ñi‡
MAC_OS_X_VERSION_MIN_REQUIRED
 < 
MAC_OS_X_VERSION_10_5


494 
	#AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER
 
WEAK_IMPORT_ATTRIBUTE


	)

496 
	#AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER


	)

505 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_5


506 
	#AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED
 
DEPRECATED_ATTRIBUTE


	)

508 
	#AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED
 
AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER


	)

517 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_5


518 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
DEPRECATED_ATTRIBUTE


	)

520 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER


	)

529 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_5


530 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
DEPRECATED_ATTRIBUTE


	)

532 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER


	)

541 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_5


542 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
DEPRECATED_ATTRIBUTE


	)

544 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER


	)

553 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_5


554 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
DEPRECATED_ATTRIBUTE


	)

556 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER


	)

565 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_5


566 
	#AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
DEPRECATED_ATTRIBUTE


	)

568 
	#AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5
 
AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER


	)

576 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_5


577 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER
 
DEPRECATED_ATTRIBUTE


	)

579 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER


	)

592 #i‡
MAC_OS_X_VERSION_MAX_ALLOWED
 < 
MAC_OS_X_VERSION_10_6


593 
	#AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER
 
UNAVAILABLE_ATTRIBUTE


	)

594 #ñi‡
MAC_OS_X_VERSION_MIN_REQUIRED
 < 
MAC_OS_X_VERSION_10_6


595 
	#AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER
 
WEAK_IMPORT_ATTRIBUTE


	)

597 
	#AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER


	)

606 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_6


607 
	#AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED
 
DEPRECATED_ATTRIBUTE


	)

609 
	#AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED
 
AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER


	)

618 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_6


619 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
DEPRECATED_ATTRIBUTE


	)

621 
	#AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER


	)

630 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_6


631 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
DEPRECATED_ATTRIBUTE


	)

633 
	#AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER


	)

642 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_6


643 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
DEPRECATED_ATTRIBUTE


	)

645 
	#AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER


	)

654 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_6


655 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
DEPRECATED_ATTRIBUTE


	)

657 
	#AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER


	)

666 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_6


667 
	#AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
DEPRECATED_ATTRIBUTE


	)

669 
	#AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER


	)

678 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_6


679 
	#AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
DEPRECATED_ATTRIBUTE


	)

681 
	#AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6
 
AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER


	)

689 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 >
MAC_OS_X_VERSION_10_6


690 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_6_AND_LATER
 
DEPRECATED_ATTRIBUTE


	)

692 
	#DEPRECATED_IN_MAC_OS_X_VERSION_10_6_AND_LATER


	)

	@/usr/include/_structs.h

24 
	~<sys/_°ru˘s.h
>

	@/usr/include/i386/_param.h

29 #i‚de‡
_I386__PARAM_H_


30 
	#_I386__PARAM_H_


	)

32 
	~<i386/_ty≥s.h
>

39 
	#__DARWIN_ALIGNBYTES
 ((
__d¨wö_size_t
Ë- 1)

	)

40 
	#__DARWIN_ALIGN
(
p
Ë((
__d¨wö_size_t
)((*)(__d¨wö_size_t)’Ë+ 
__DARWIN_ALIGNBYTES
Ë&~ __DARWIN_ALIGNBYTES)

	)

42 
	#__DARWIN_ALIGNBYTES32
 ((
__uöt32_t
Ë- 1)

	)

43 
	#__DARWIN_ALIGN32
(
p
Ë((
__d¨wö_size_t
)((*)(__d¨wö_size_t)’Ë+ 
__DARWIN_ALIGNBYTES32
Ë&~ __DARWIN_ALIGNBYTES32)

	)

	@/usr/include/i386/endian.h

66 #i‚de‡
_I386__ENDIAN_H_


67 
	#_I386__ENDIAN_H_


	)

69 
	~<sys/cdefs.h
>

78 
	#_QUAD_HIGHWORD
 1

	)

79 
	#_QUAD_LOWWORD
 0

	)

85 
	#__DARWIN_LITTLE_ENDIAN
 1234

	)

86 
	#__DARWIN_BIG_ENDIAN
 4321

	)

87 
	#__DARWIN_PDP_ENDIAN
 3412

	)

89 
	#__DARWIN_BYTE_ORDER
 
__DARWIN_LITTLE_ENDIAN


	)

91 #if 
deföed
(
KERNEL
Ë|| (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

93 
	#LITTLE_ENDIAN
 
__DARWIN_LITTLE_ENDIAN


	)

94 
	#BIG_ENDIAN
 
__DARWIN_BIG_ENDIAN


	)

95 
	#PDP_ENDIAN
 
__DARWIN_PDP_ENDIAN


	)

97 
	#BYTE_ORDER
 
__DARWIN_BYTE_ORDER


	)

99 
	~<sys/_ídün.h
>

	@/usr/include/i386/types.h

66 #i‚def 
_MACHTYPES_H_


67 
	#_MACHTYPES_H_


	)

69 #i‚de‡
__ASSEMBLER__


70 
	~<i386/_ty≥s.h
>

71 
	~<sys/cdefs.h
>

76 #i‚de‡
_INT8_T


77 
	#_INT8_T


	)

78 
__sig√d
 
	töt8_t
;

80 
	tu_öt8_t
;

81 #i‚de‡
_INT16_T


82 
	#_INT16_T


	)

83 
	töt16_t
;

85 
	tu_öt16_t
;

86 #i‚de‡
_INT32_T


87 
	#_INT32_T


	)

88 
	töt32_t
;

90 
	tu_öt32_t
;

91 #i‚de‡
_INT64_T


92 
	#_INT64_T


	)

93 
	töt64_t
;

95 
	tu_öt64_t
;

97 #i‡
__LP64__


98 
öt64_t
 
	tªgi°î_t
;

100 
öt32_t
 
	tªgi°î_t
;

103 #i‚de‡
_INTPTR_T


104 
	#_INTPTR_T


	)

105 
__d¨wö_öçå_t
 
	töçå_t
;

107 #i‚de‡
_UINTPTR_T


108 
	#_UINTPTR_T


	)

109 
	tuöçå_t
;

112 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

114 
u_öt64_t
 
	tu£r_addr_t
;

115 
u_öt64_t
 
	tu£r_size_t
;

116 
öt64_t
 
	tu£r_ssize_t
;

117 
öt64_t
 
	tu£r_l⁄g_t
;

118 
u_öt64_t
 
	tu£r_ul⁄g_t
;

119 
öt64_t
 
	tu£r_time_t
;

120 
öt64_t
 
	tu£r_off_t
;

121 
	#USER_ADDR_NULL
 ((
u£r_addr_t
Ë0)

	)

122 
	#CAST_USER_ADDR_T
(
a_±r
Ë((
u£r_addr_t
)((
uöçå_t
)◊_±r)))

	)

128 
u_öt64_t
 
	tsysˇŒ_¨g_t
;

130 #i‚de‡
__off£tof


131 
	#__off£tof
(
ty≥
, 
fõld
Ë((
size_t
)(&(—y≥ *)0)->fõld))

	)

	@/usr/include/libkern/_OSByteOrder.h

29 #i‚de‡
_OS__OSBYTEORDER_H


30 
	#_OS__OSBYTEORDER_H


	)

40 
	~<sys/_ty≥s.h
>

43 
	#__DARWIN_OSSw≠C⁄°I¡16
(
x
) \

44 ((
__uöt16_t
)((((__uöt16_t)(
x
) & 0xff00) >> 8) | \

45 (((
__uöt16_t
)(
x
Ë& 0x00ffË<< 8)))

	)

47 
	#__DARWIN_OSSw≠C⁄°I¡32
(
x
) \

48 ((
__uöt32_t
)((((__uöt32_t)(
x
) & 0xff000000) >> 24) | \

49 (((
__uöt32_t
)(
x
) & 0x00ff0000) >> 8) | \

50 (((
__uöt32_t
)(
x
) & 0x0000ff00) << 8) | \

51 (((
__uöt32_t
)(
x
Ë& 0x000000ffË<< 24)))

	)

53 
	#__DARWIN_OSSw≠C⁄°I¡64
(
x
) \

54 ((
__uöt64_t
)((((__uöt64_t)(
x
) & 0xff00000000000000ULL) >> 56) | \

55 (((
__uöt64_t
)(
x
) & 0x00ff000000000000ULL) >> 40) | \

56 (((
__uöt64_t
)(
x
) & 0x0000ff0000000000ULL) >> 24) | \

57 (((
__uöt64_t
)(
x
) & 0x000000ff00000000ULL) >> 8) | \

58 (((
__uöt64_t
)(
x
) & 0x00000000ff000000ULL) << 8) | \

59 (((
__uöt64_t
)(
x
) & 0x0000000000ff0000ULL) << 24) | \

60 (((
__uöt64_t
)(
x
) & 0x000000000000ff00ULL) << 40) | \

61 (((
__uöt64_t
)(
x
Ë& 0x00000000000000ffULLË<< 56)))

	)

63 #i‡
deföed
(
__GNUC__
)

65 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

66 
	~<libkîn/i386/_OSByãOrdî.h
>

69 #i‡
deföed
(
__¨m__
)

70 
	~<libkîn/¨m/OSByãOrdî.h
>

74 
	#__DARWIN_OSSw≠I¡16
(
x
) \

75 (
	`__buûtö_c⁄°™t_p
(
x
Ë? 
	`__DARWIN_OSSw≠C⁄°I¡16
(xË: 
	`_OSSw≠I¡16
(x))

	)

77 
	#__DARWIN_OSSw≠I¡32
(
x
) \

78 (
	`__buûtö_c⁄°™t_p
(
x
Ë? 
	`__DARWIN_OSSw≠C⁄°I¡32
(xË: 
	`_OSSw≠I¡32
(x))

	)

80 
	#__DARWIN_OSSw≠I¡64
(
x
) \

81 (
	`__buûtö_c⁄°™t_p
(
x
Ë? 
	`__DARWIN_OSSw≠C⁄°I¡64
(xË: 
	`_OSSw≠I¡64
(x))

	)

85 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

87 #i‡!
deföed
(
__DARWIN_OS_INLINE
)

88 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

89 
	#__DARWIN_OS_INLINE
 
ölöe


	)

90 #ñi‡
deföed
(
__MWERKS__
Ë|| deföed(
__˝lu•lus
)

91 
	#__DARWIN_OS_INLINE
 
ölöe


	)

93 
	#__DARWIN_OS_INLINE
 
__ölöe__


	)

97 
__DARWIN_OS_INLINE


98 
uöt16_t


99 
	$_OSSw≠I¡16
(

100 
uöt16_t
 
d©a


103  
	`__DARWIN_OSSw≠C⁄°I¡16
(
d©a
);

104 
	}
}

106 
__DARWIN_OS_INLINE


107 
uöt32_t


108 
	$_OSSw≠I¡32
(

109 
uöt32_t
 
d©a


112  
	`__DARWIN_OSSw≠C⁄°I¡32
(
d©a
);

113 
	}
}

115 
__DARWIN_OS_INLINE


116 
uöt64_t


117 
	$_OSSw≠I¡64
(

118 
uöt64_t
 
d©a


121  
	`__DARWIN_OSSw≠C⁄°I¡64
(
d©a
);

122 
	}
}

125 
	#__DARWIN_OSSw≠I¡16
(
x
Ë
	`_OSSw≠I¡16
(x)

	)

127 
	#__DARWIN_OSSw≠I¡32
(
x
Ë
	`_OSSw≠I¡32
(x)

	)

129 
	#__DARWIN_OSSw≠I¡64
(
x
Ë
	`_OSSw≠I¡64
(x)

	)

	@/usr/include/machine/_limits.h

28 #i‚de‡
_BSD_MACHINE__LIMITS_H_


29 
	#_BSD_MACHINE__LIMITS_H_


	)

31 #i‡
deföed
 (
__µc__
Ë|| deföed (
__µc64__
)

32 
	~"µc/_limôs.h
"

33 #ñi‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

34 
	~"i386/_limôs.h
"

35 #ñi‡
deföed
 (
__¨m__
)

36 
	~"¨m/_limôs.h
"

38 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/machine/_structs.h

28 #i‡
deföed
 (
__µc__
Ë|| deföed (
__µc64__
)

29 
	~"µc/_°ru˘s.h
"

30 #ñi‡
deföed
 (
__i386__
Ë|| deföed (
__x86_64__
)

31 
	~"i386/_°ru˘s.h
"

32 #ñi‡
deföed
 (
__¨m__
)

33 
	~"¨m/_°ru˘s.h
"

35 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/machine/_types.h

28 #i‚de‡
_BSD_MACHINE__TYPES_H_


29 
	#_BSD_MACHINE__TYPES_H_


	)

31 #i‡
deföed
 (
__µc__
Ë|| deföed (
__µc64__
)

32 
	~"µc/_ty≥s.h
"

33 #ñi‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

34 
	~"i386/_ty≥s.h
"

35 #ñi‡
deföed
 (
__¨m__
)

36 
	~"¨m/_ty≥s.h
"

38 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/machine/signal.h

28 #i‚de‡
_BSD_MACHINE_SIGNAL_H_


29 
	#_BSD_MACHINE_SIGNAL_H_


	)

31 #i‡
deföed
 (
__µc__
Ë|| deföed (
__µc64__
)

32 
	~"µc/sig«l.h
"

33 #ñi‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

34 
	~"i386/sig«l.h
"

35 #ñi‡
deföed
 (
__¨m__
)

36 
	~"¨m/sig«l.h
"

38 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/ppc/_param.h

29 #i‚def 
_PPC__PARAM_H_


30 
	#_PPC__PARAM_H_


	)

32 
	~<µc/_ty≥s.h
>

39 
	#__DARWIN_ALIGNBYTES
 ((
__d¨wö_size_t
Ë- 1)

	)

40 
	#__DARWIN_ALIGN
(
p
Ë((
__d¨wö_size_t
)((*)(__d¨wö_size_t)’Ë+ 
__DARWIN_ALIGNBYTES
Ë&~ __DARWIN_ALIGNBYTES)

	)

42 
	#__DARWIN_ALIGNBYTES32
 ((
__uöt32_t
Ë- 1)

	)

43 
	#__DARWIN_ALIGN32
(
p
Ë((
__d¨wö_size_t
)((*)(__d¨wö_size_t)’Ë+ 
__DARWIN_ALIGNBYTES32
Ë&~ __DARWIN_ALIGNBYTES32)

	)

	@/usr/include/ppc/endian.h

92 #i‚de‡
_PPC_ENDIAN_H_


93 
	#_PPC_ENDIAN_H_


	)

95 
	~<sys/cdefs.h
>

100 
	#_QUAD_HIGHWORD
 0

	)

101 
	#_QUAD_LOWWORD
 1

	)

107 
	#__DARWIN_LITTLE_ENDIAN
 1234

	)

108 
	#__DARWIN_BIG_ENDIAN
 4321

	)

109 
	#__DARWIN_PDP_ENDIAN
 3412

	)

111 
	#__DARWIN_BYTE_ORDER
 
__DARWIN_BIG_ENDIAN


	)

113 #if 
deföed
(
KERNEL
Ë|| (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

115 
	#LITTLE_ENDIAN
 
__DARWIN_LITTLE_ENDIAN


	)

116 
	#BIG_ENDIAN
 
__DARWIN_BIG_ENDIAN


	)

117 
	#PDP_ENDIAN
 
__DARWIN_PDP_ENDIAN


	)

119 
	#BYTE_ORDER
 
__DARWIN_BYTE_ORDER


	)

121 
	~<sys/_ídün.h
>

	@/usr/include/ppc/types.h

66 #i‚def 
_MACHTYPES_H_


67 
	#_MACHTYPES_H_


	)

69 #i‚de‡
__ASSEMBLER__


70 
	~<µc/_ty≥s.h
>

71 
	~<sys/cdefs.h
>

76 #i‚de‡
_INT8_T


77 
	#_INT8_T


	)

78 
__sig√d
 
	töt8_t
;

80 
	tu_öt8_t
;

81 #i‚de‡
_INT16_T


82 
	#_INT16_T


	)

83 
	töt16_t
;

85 
	tu_öt16_t
;

86 #i‚de‡
_INT32_T


87 
	#_INT32_T


	)

88 
	töt32_t
;

90 
	tu_öt32_t
;

91 #i‚de‡
_INT64_T


92 
	#_INT64_T


	)

93 
	töt64_t
;

95 
	tu_öt64_t
;

97 #i‡
__LP64__


98 
öt64_t
 
	tªgi°î_t
;

100 
öt32_t
 
	tªgi°î_t
;

103 #i‚de‡
_INTPTR_T


104 
	#_INTPTR_T


	)

105 
__d¨wö_öçå_t
 
	töçå_t
;

107 #i‚de‡
_UINTPTR_T


108 
	#_UINTPTR_T


	)

109 
	tuöçå_t
;

112 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

114 
u_öt64_t
 
	tu£r_addr_t
;

115 
u_öt64_t
 
	tu£r_size_t
;

116 
öt64_t
 
	tu£r_ssize_t
;

117 
öt64_t
 
	tu£r_l⁄g_t
;

118 
u_öt64_t
 
	tu£r_ul⁄g_t
;

119 
öt64_t
 
	tu£r_time_t
;

120 
öt64_t
 
	tu£r_off_t
;

121 
	#USER_ADDR_NULL
 ((
u£r_addr_t
Ë0)

	)

122 
	#CAST_USER_ADDR_T
(
a_±r
Ë((
u£r_addr_t
)((
uöçå_t
)◊_±r)))

	)

128 
u_öt64_t
 
	tsysˇŒ_¨g_t
;

130 #i‚de‡
__off£tof


131 
	#__off£tof
(
ty≥
, 
fõld
Ë((
size_t
)(&(—y≥ *)0)->fõld))

	)

	@/usr/include/secure/_common.h

24 #i‚de‡
_SECURE__COMMON_H_


25 
	#_SECURE__COMMON_H_


	)

27 #unde‡
_USE_FORTIFY_LEVEL


28 #i‡
deföed
(
_FORTIFY_SOURCE
) && _FORTIFY_SOURCE > 0

29 #i‡
_FORTIFY_SOURCE
 > 1

30 
	#_USE_FORTIFY_LEVEL
 2

	)

32 
	#_USE_FORTIFY_LEVEL
 1

	)

35 
	#_USE_FORTIFY_LEVEL
 0

	)

38 
	#__d¨wö_obsz0
(
obje˘
Ë
	`__buûtö_obje˘_size
 (obje˘, 0)

	)

39 
	#__d¨wö_obsz
(
obje˘
Ë
	`__buûtö_obje˘_size
 (obje˘, 
_USE_FORTIFY_LEVEL
 > 1)

	)

	@/usr/include/sys/ttycom.h

69 #i‚def 
_SYS_TTYCOM_H_


70 
	#_SYS_TTYCOM_H_


	)

72 
	~<sys/ioccom.h
>

83 
	swösize
 {

84 
	mws_row
;

85 
	mws_cﬁ
;

86 
	mws_xpixñ
;

87 
	mws_ypixñ
;

90 
	#TIOCMODG
 
	`_IOR
('t', 3, Ë

	)

91 
	#TIOCMODS
 
	`_IOW
('t', 4, Ë

	)

92 
	#TIOCM_LE
 0001

	)

93 
	#TIOCM_DTR
 0002

	)

94 
	#TIOCM_RTS
 0004

	)

95 
	#TIOCM_ST
 0010

	)

96 
	#TIOCM_SR
 0020

	)

97 
	#TIOCM_CTS
 0040

	)

98 
	#TIOCM_CAR
 0100

	)

99 
	#TIOCM_CD
 
TIOCM_CAR


	)

100 
	#TIOCM_RNG
 0200

	)

101 
	#TIOCM_RI
 
TIOCM_RNG


	)

102 
	#TIOCM_DSR
 0400

	)

104 
	#TIOCEXCL
 
	`_IO
('t', 13Ë

	)

105 
	#TIOCNXCL
 
	`_IO
('t', 14Ë

	)

107 
	#TIOCFLUSH
 
	`_IOW
('t', 16, Ë

	)

109 
	#TIOCGETA
 
	`_IOR
('t', 19, 
ãrmios
Ë

	)

110 
	#TIOCSETA
 
	`_IOW
('t', 20, 
ãrmios
Ë

	)

111 
	#TIOCSETAW
 
	`_IOW
('t', 21, 
ãrmios
Ë

	)

112 
	#TIOCSETAF
 
	`_IOW
('t', 22, 
ãrmios
Ë

	)

113 
	#TIOCGETD
 
	`_IOR
('t', 26, Ë

	)

114 
	#TIOCSETD
 
	`_IOW
('t', 27, Ë

	)

115 
	#TIOCIXON
 
	`_IO
('t', 129Ë

	)

116 
	#TIOCIXOFF
 
	`_IO
('t', 128Ë

	)

118 
	#TIOCSBRK
 
	`_IO
('t', 123Ë

	)

119 
	#TIOCCBRK
 
	`_IO
('t', 122Ë

	)

120 
	#TIOCSDTR
 
	`_IO
('t', 121Ë

	)

121 
	#TIOCCDTR
 
	`_IO
('t', 120Ë

	)

122 
	#TIOCGPGRP
 
	`_IOR
('t', 119, Ë

	)

123 
	#TIOCSPGRP
 
	`_IOW
('t', 118, Ë

	)

125 
	#TIOCOUTQ
 
	`_IOR
('t', 115, Ë

	)

126 
	#TIOCSTI
 
	`_IOW
('t', 114, Ë

	)

127 
	#TIOCNOTTY
 
	`_IO
('t', 113Ë

	)

128 
	#TIOCPKT
 
	`_IOW
('t', 112, Ë

	)

129 
	#TIOCPKT_DATA
 0x00

	)

130 
	#TIOCPKT_FLUSHREAD
 0x01

	)

131 
	#TIOCPKT_FLUSHWRITE
 0x02

	)

132 
	#TIOCPKT_STOP
 0x04

	)

133 
	#TIOCPKT_START
 0x08

	)

134 
	#TIOCPKT_NOSTOP
 0x10

	)

135 
	#TIOCPKT_DOSTOP
 0x20

	)

136 
	#TIOCPKT_IOCTL
 0x40

	)

137 
	#TIOCSTOP
 
	`_IO
('t', 111Ë

	)

138 
	#TIOCSTART
 
	`_IO
('t', 110Ë

	)

139 
	#TIOCMSET
 
	`_IOW
('t', 109, Ë

	)

140 
	#TIOCMBIS
 
	`_IOW
('t', 108, Ë

	)

141 
	#TIOCMBIC
 
	`_IOW
('t', 107, Ë

	)

142 
	#TIOCMGET
 
	`_IOR
('t', 106, Ë

	)

143 
	#TIOCREMOTE
 
	`_IOW
('t', 105, Ë

	)

144 
	#TIOCGWINSZ
 
	`_IOR
('t', 104, 
wösize
Ë

	)

145 
	#TIOCSWINSZ
 
	`_IOW
('t', 103, 
wösize
Ë

	)

146 
	#TIOCUCNTL
 
	`_IOW
('t', 102, Ë

	)

147 
	#TIOCSTAT
 
	`_IO
('t', 101Ë

	)

148 
	#UIOCCMD
(
n
Ë
	`_IO
('u',ÇË

	)

149 
	#TIOCSCONS
 
	`_IO
('t', 99Ë

	)

150 
	#TIOCCONS
 
	`_IOW
('t', 98, Ë

	)

151 
	#TIOCSCTTY
 
	`_IO
('t', 97Ë

	)

152 
	#TIOCEXT
 
	`_IOW
('t', 96, Ë

	)

153 
	#TIOCSIG
 
	`_IO
('t', 95Ë

	)

154 
	#TIOCDRAIN
 
	`_IO
('t', 94Ë

	)

155 
	#TIOCMSDTRWAIT
 
	`_IOW
('t', 91, Ë

	)

156 
	#TIOCMGDTRWAIT
 
	`_IOR
('t', 90, Ë

	)

157 
	#TIOCTIMESTAMP
 
	`_IOR
('t', 89, 
timevÆ
Ë

	)

159 
	#TIOCDCDTIMESTAMP
 
	`_IOR
('t', 88, 
timevÆ
Ë

	)

161 
	#TIOCSDRAINWAIT
 
	`_IOW
('t', 87, Ë

	)

162 
	#TIOCGDRAINWAIT
 
	`_IOR
('t', 86, Ë

	)

163 
	#TIOCDSIMICROCODE
 
	`_IO
('t', 85Ë

	)

165 
	#TIOCPTYGRANT
 
	`_IO
('t', 84Ë

	)

166 
	#TIOCPTYGNAME
 
	`_IOC
(
IOC_OUT
, 't', 83, 128Ë

	)

167 
	#TIOCPTYUNLK
 
	`_IO
('t', 82Ë

	)

169 
	#TTYDISC
 0

	)

170 
	#TABLDISC
 3

	)

171 
	#SLIPDISC
 4

	)

172 
	#PPPDISC
 5

	)

	@/usr/include/sys/ttydefaults.h

72 #i‚de‡
_SYS_TTYDEFAULTS_H_


73 
	#_SYS_TTYDEFAULTS_H_


	)

78 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

79 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
)

	)

80 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

81 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS8
 | 
HUPCL
)

	)

82 
	#TTYDEF_SPEED
 (
B9600
)

	)

87 
	#CTRL
(
x
Ë(x&037)

	)

88 
	#CEOF
 
	`CTRL
('d')

	)

89 
	#CEOL
 0xf‡

	)

90 
	#CERASE
 0177

	)

91 
	#CINTR
 
	`CTRL
('c')

	)

92 
	#CSTATUS
 
	`CTRL
('t')

	)

93 
	#CKILL
 
	`CTRL
('u')

	)

94 
	#CMIN
 1

	)

95 
	#CQUIT
 034

	)

96 
	#CSUSP
 
	`CTRL
('z')

	)

97 
	#CTIME
 0

	)

98 
	#CDSUSP
 
	`CTRL
('y')

	)

99 
	#CSTART
 
	`CTRL
('q')

	)

100 
	#CSTOP
 
	`CTRL
('s')

	)

101 
	#CLNEXT
 
	`CTRL
('v')

	)

102 
	#CDISCARD
 
	`CTRL
('o')

	)

103 
	#CWERASE
 
	`CTRL
('w')

	)

104 
	#CREPRINT
 
	`CTRL
('r')

	)

105 
	#CEOT
 
CEOF


	)

107 
	#CBRK
 
CEOL


	)

108 
	#CRPRNT
 
CREPRINT


	)

109 
	#CFLUSH
 
CDISCARD


	)

117 #ifde‡
TTYDEFCHARS


118 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

119 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

120 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

121 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


123 #unde‡
TTYDEFCHARS


	@/usr/include/xlocale/_time.h

24 #i‚de‡
_XLOCALE__TIME_H_


25 
	#_XLOCALE__TIME_H_


	)

27 
__BEGIN_DECLS


28 
size_t
 
	$°r·ime_l
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

29 c⁄° 
tm
 * 
__ª°ri˘
, 
loˇÀ_t
)

30 
	$__DARWIN_ALIAS
(
°r·ime_l
Ë
	`__°r·imñike
(3);

31 *
	$°Ωtime_l
(c⁄° * 
__ª°ri˘
, const * __restrict,

32 
tm
 * 
__ª°ri˘
, 
loˇÀ_t
)

33 
	$__DARWIN_ALIAS
(
°Ωtime_l
Ë
	`__°r·imñike
(2);

34 
__END_DECLS


	@/usr/include/i386/_limits.h

22 #i‚def 
_I386__LIMITS_H_


23 
	#_I386__LIMITS_H_


	)

25 
	#__DARWIN_CLK_TCK
 100

	)

	@/usr/include/i386/_structs.h

29 
	~<sys/≠∂ópi›ts.h
>

31 #ifde‡
__√ed_mc⁄ãxt_t


32 #i‚de‡
__√ed_°ru˘_mc⁄ãxt


33 
	#__√ed_°ru˘_mc⁄ãxt


	)

37 #i‡
deföed
(
__√ed_°ru˘_mc⁄ãxt
)

38 
	~<mach/i386/_°ru˘s.h
>

42 #ifde‡
__√ed_°ru˘_mc⁄ãxt


43 #unde‡
__√ed_°ru˘_mc⁄ãxt


45 #i‚de‡
_STRUCT_MCONTEXT32


46 #i‡
__DARWIN_UNIX03


47 
	#_STRUCT_MCONTEXT32
 
__d¨wö_mc⁄ãxt32


	)

48 
	g_STRUCT_MCONTEXT32


50 
_STRUCT_X86_EXCEPTION_STATE32
 
	g__es
;

51 
_STRUCT_X86_THREAD_STATE32
 
	g__ss
;

52 
_STRUCT_X86_FLOAT_STATE32
 
	g__fs
;

55 
	#_STRUCT_MCONTEXT32
 
mc⁄ãxt32


	)

56 
	g_STRUCT_MCONTEXT32


58 
_STRUCT_X86_EXCEPTION_STATE32
 
	ges
;

59 
_STRUCT_X86_THREAD_STATE32
 
	gss
;

60 
_STRUCT_X86_FLOAT_STATE32
 
	gfs
;

65 #i‚de‡
_STRUCT_MCONTEXT64


66 #i‡
__DARWIN_UNIX03


67 
	#_STRUCT_MCONTEXT64
 
__d¨wö_mc⁄ãxt64


	)

68 
	g_STRUCT_MCONTEXT64


70 
_STRUCT_X86_EXCEPTION_STATE64
 
	g__es
;

71 
_STRUCT_X86_THREAD_STATE64
 
	g__ss
;

72 
_STRUCT_X86_FLOAT_STATE64
 
	g__fs
;

75 
	#_STRUCT_MCONTEXT64
 
mc⁄ãxt64


	)

76 
	g_STRUCT_MCONTEXT64


78 
_STRUCT_X86_EXCEPTION_STATE64
 
	ges
;

79 
_STRUCT_X86_THREAD_STATE64
 
	gss
;

80 
_STRUCT_X86_FLOAT_STATE64
 
	gfs
;

86 #ifde‡
__√ed_mc⁄ãxt_t


87 #unde‡
__√ed_mc⁄ãxt_t


88 #i‚de‡
_MCONTEXT_T


89 
	#_MCONTEXT_T


	)

90 #i‡
deföed
(
__LP64__
)

91 
_STRUCT_MCONTEXT64
 *
	tmc⁄ãxt_t
;

92 
	#_STRUCT_MCONTEXT
 
_STRUCT_MCONTEXT64


	)

94 
_STRUCT_MCONTEXT32
 *
	tmc⁄ãxt_t
;

95 
	#_STRUCT_MCONTEXT
 
_STRUCT_MCONTEXT32


	)

100 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

101 #i‚de‡
I386_MCONTEXT_SIZE


102 
	#I386_MCONTEXT_SIZE
 (
mc⁄ãxt
)

	)

	@/usr/include/i386/_types.h

28 #i‚def 
_BSD_I386__TYPES_H_


29 
	#_BSD_I386__TYPES_H_


	)

36 #ifde‡
__GNUC__


37 
__sig√d
 
	t__öt8_t
;

39 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 
	t__öt64_t
;

47 
	t__uöt64_t
;

49 
	t__d¨wö_öçå_t
;

50 
	t__d¨wö_«tuøl_t
;

70 
	t__d¨wö_˘_ru√_t
;

77 
	m__mb°©e8
[128];

78 
	m_mb°©eL
;

79 } 
	t__mb°©e_t
;

81 
__mb°©e_t
 
	t__d¨wö_mb°©e_t
;

83 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__PTRDIFF_TYPE__
)

84 
__PTRDIFF_TYPE__
 
	t__d¨wö_±rdiff_t
;

86 
	t__d¨wö_±rdiff_t
;

89 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__SIZE_TYPE__
)

90 
__SIZE_TYPE__
 
	t__d¨wö_size_t
;

92 
	t__d¨wö_size_t
;

95 #i‡(
__GNUC__
 > 2)

96 
__buûtö_va_li°
 
	t__d¨wö_va_li°
;

98 * 
	t__d¨wö_va_li°
;

101 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__WCHAR_TYPE__
)

102 
__WCHAR_TYPE__
 
	t__d¨wö_wch¨_t
;

104 
__d¨wö_˘_ru√_t
 
	t__d¨wö_wch¨_t
;

107 
__d¨wö_wch¨_t
 
	t__d¨wö_ru√_t
;

109 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__WINT_TYPE__
)

110 
__WINT_TYPE__
 
	t__d¨wö_wöt_t
;

112 
__d¨wö_˘_ru√_t
 
	t__d¨wö_wöt_t
;

115 
	t__d¨wö_˛ock_t
;

116 
__uöt32_t
 
	t__d¨wö_sockÀn_t
;

117 
	t__d¨wö_ssize_t
;

118 
	t__d¨wö_time_t
;

	@/usr/include/i386/signal.h

33 #i‚def 
_I386_SIGNAL_H_


34 
	#_I386_SIGNAL_H_
 1

	)

36 
	~<sys/cdefs.h
>

38 #i‚de‡
_ANSI_SOURCE


39 
	tsig_©omic_t
;

41 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

43 
	~<sys/≠∂ópi›ts.h
>

45 #ifde‡
__APPLE_API_OBSOLETE


54 
	#__√ed_°ru˘_sigc⁄ãxt


	)

55 
	~<i386/_°ru˘s.h
>

	@/usr/include/libkern/i386/_OSByteOrder.h

29 #i‚de‡
_OS__OSBYTEORDERI386_H


30 
	#_OS__OSBYTEORDERI386_H


	)

32 #i‡!
deföed
(
__DARWIN_OS_INLINE
)

33 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

34 
	#__DARWIN_OS_INLINE
 
ölöe


	)

35 #ñi‡
deföed
(
__MWERKS__
Ë|| deföed(
__˝lu•lus
)

36 
	#__DARWIN_OS_INLINE
 
ölöe


	)

38 
	#__DARWIN_OS_INLINE
 
__ölöe__


	)

44 
__DARWIN_OS_INLINE


45 
__uöt16_t


46 
	$_OSSw≠I¡16
(

47 
__uöt16_t
 
_d©a


50  ((
_d©a
 << 8) | (_data >> 8));

51 
	}
}

53 
__DARWIN_OS_INLINE


54 
__uöt32_t


55 
	$_OSSw≠I¡32
(

56 
__uöt32_t
 
_d©a


59 #i‡
	`deföed
(
__Œvm__
)

60  
	`__buûtö_bsw≠32
(
_d©a
);

62 
	`__asm__
 ("bsw≠ %0" : "+r" (
_d©a
));

63  
_d©a
;

65 
	}
}

67 #i‡
deföed
(
__Œvm__
)

68 
__DARWIN_OS_INLINE


69 
__uöt64_t


70 
	$_OSSw≠I¡64
(

71 
__uöt64_t
 
_d©a


74  
	`__buûtö_bsw≠64
(
_d©a
);

75 
	}
}

77 #ñi‡
deföed
(
__i386__
)

78 
__DARWIN_OS_INLINE


79 
__uöt64_t


80 
	$_OSSw≠I¡64
(

81 
__uöt64_t
 
_d©a


84 
	`__asm__
 ("bswap %%eax\n\t"

87 : "+A" (
_d©a
));

88  
_d©a
;

89 
	}
}

90 #ñi‡
deföed
(
__x86_64__
)

91 
__DARWIN_OS_INLINE


92 
__uöt64_t


93 
	$_OSSw≠I¡64
(

94 
__uöt64_t
 
_d©a


97 
	`__asm__
 ("bsw≠ %0" : "+r" (
_d©a
));

98  
_d©a
;

99 
	}
}

101 #îr‹ 
Unknown
 
¨chôe˘uª


	@/usr/include/ppc/_limits.h

22 #i‚def 
_PPC__LIMITS_H_


23 
	#_PPC__LIMITS_H_


	)

25 
	#__DARWIN_CLK_TCK
 100

	)

	@/usr/include/ppc/_structs.h

29 
	~<sys/cdefs.h
>

31 #ifde‡
__√ed_mc⁄ãxt_t


32 #i‚de‡
__√ed_°ru˘_mc⁄ãxt


33 
	#__√ed_°ru˘_mc⁄ãxt


	)

37 #ifde‡
__√ed_mc⁄ãxt64_t


38 #i‚de‡
__√ed_°ru˘_mc⁄ãxt64


39 
	#__√ed_°ru˘_mc⁄ãxt64


	)

43 #i‡
deföed
(
__√ed_°ru˘_mc⁄ãxt
Ë|| deföed(
__√ed_°ru˘_mc⁄ãxt64
)

44 
	~<mach/µc/_°ru˘s.h
>

47 #ifde‡
__√ed_°ru˘_mc⁄ãxt


48 #unde‡
__√ed_°ru˘_mc⁄ãxt


49 #i‚de‡
_STRUCT_MCONTEXT


50 #i‡
__DARWIN_UNIX03


51 
	#_STRUCT_MCONTEXT
 
__d¨wö_mc⁄ãxt


	)

52 
	g_STRUCT_MCONTEXT


54 
_STRUCT_PPC_EXCEPTION_STATE
 
	g__es
;

55 
_STRUCT_PPC_THREAD_STATE
 
	g__ss
;

56 
_STRUCT_PPC_FLOAT_STATE
 
	g__fs
;

57 
_STRUCT_PPC_VECTOR_STATE
 
	g__vs
;

60 
	#_STRUCT_MCONTEXT
 
mc⁄ãxt


	)

61 
	g_STRUCT_MCONTEXT


63 
_STRUCT_PPC_EXCEPTION_STATE
 
	ges
;

64 
_STRUCT_PPC_THREAD_STATE
 
	gss
;

65 
_STRUCT_PPC_FLOAT_STATE
 
	gfs
;

66 
_STRUCT_PPC_VECTOR_STATE
 
	gvs
;

72 #ifde‡
__√ed_°ru˘_mc⁄ãxt64


73 #unde‡
__√ed_°ru˘_mc⁄ãxt64


74 #i‚de‡
_STRUCT_MCONTEXT64


75 #i‡
__DARWIN_UNIX03


76 
	#_STRUCT_MCONTEXT64
 
__d¨wö_mc⁄ãxt64


	)

77 
	g_STRUCT_MCONTEXT64


79 
_STRUCT_PPC_EXCEPTION_STATE64
 
	g__es
;

80 
_STRUCT_PPC_THREAD_STATE64
 
	g__ss
;

81 
_STRUCT_PPC_FLOAT_STATE
 
	g__fs
;

82 
_STRUCT_PPC_VECTOR_STATE
 
	g__vs
;

85 
	#_STRUCT_MCONTEXT64
 
mc⁄ãxt64


	)

86 
	g_STRUCT_MCONTEXT64


88 
_STRUCT_PPC_EXCEPTION_STATE64
 
	ges
;

89 
_STRUCT_PPC_THREAD_STATE64
 
	gss
;

90 
_STRUCT_PPC_FLOAT_STATE
 
	gfs
;

91 
_STRUCT_PPC_VECTOR_STATE
 
	gvs
;

97 #ifde‡
__√ed_mc⁄ãxt_t


98 #unde‡
__√ed_mc⁄ãxt_t


99 #i‚de‡
_MCONTEXT_T


100 
	#_MCONTEXT_T


	)

101 
_STRUCT_MCONTEXT
 *
	tmc⁄ãxt_t
;

105 #ifde‡
__√ed_mc⁄ãxt64_t


106 #unde‡
__√ed_mc⁄ãxt64_t


107 #i‚de‡
_MCONTEXT64_T


108 
	#_MCONTEXT64_T


	)

109 
_STRUCT_MCONTEXT64
 *
	tmc⁄ãxt64_t
;

113 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

114 #i‚de‡
PPC_MCONTEXT_SIZE


115 
	#PPC_MCONTEXT_SIZE
 (
PPC_THREAD_STATE_COUNT
 + 
PPC_FLOAT_STATE_COUNT
 + 
PPC_EXCEPTION_STATE_COUNT
 + 
PPC_VECTOR_STATE_COUNT
Ë* ()

	)

117 #i‚de‡
PPC_MCONTEXT64_SIZE


118 
	#PPC_MCONTEXT64_SIZE
 (
PPC_THREAD_STATE64_COUNT
 + 
PPC_FLOAT_STATE_COUNT
 + 
PPC_EXCEPTION_STATE_COUNT
 + 
PPC_VECTOR_STATE_COUNT
Ë* ()

	)

125 #ifde‡
__√ed_°ru˘_sigc⁄ãxt


126 #unde‡
__√ed_°ru˘_sigc⁄ãxt


127 #i‚de‡
_STRUCT_SIGCONTEXT


128 #i‡
__DARWIN_UNIX03


129 
	#_STRUCT_SIGCONTEXT
 
__d¨wö_sigc⁄ãxt


	)

130 
	g_STRUCT_SIGCONTEXT


132 
	g__sc_⁄°ack
;

133 
	g__sc_mask
;

134 
	g__sc_ú
;

135 
	g__sc_psw
;

136 
	g__sc_•
;

137 *
	g__sc_ªgs
;

140 
	#_STRUCT_SIGCONTEXT
 
sigc⁄ãxt


	)

141 
	g_STRUCT_SIGCONTEXT


143 
	gsc_⁄°ack
;

144 
	gsc_mask
;

145 
	gsc_ú
;

146 
	gsc_psw
;

147 
	gsc_•
;

148 *
	gsc_ªgs
;

161 #ifde‡
__√ed_°ru˘_sigc⁄ãxt32


162 #unde‡
__√ed_°ru˘_sigc⁄ãxt32


163 #i‚de‡
_STRUCT_SIGCONTEXT32


164 #i‡
__DARWIN_UNIX03


165 
	#_STRUCT_SIGCONTEXT32
 
__d¨wö_sigc⁄ãxt32


	)

166 
	g_STRUCT_SIGCONTEXT32


168 
	g__sc_⁄°ack
;

169 
	g__sc_mask
;

170 
	g__sc_ú
;

171 
	g__sc_psw
;

172 
	g__sc_•
;

173 *
	g__sc_ªgs
;

176 
	#_STRUCT_SIGCONTEXT32
 
sigc⁄ãxt32


	)

177 
	g_STRUCT_SIGCONTEXT32


179 
	gsc_⁄°ack
;

180 
	gsc_mask
;

181 
	gsc_ú
;

182 
	gsc_psw
;

183 
	gsc_•
;

184 *
	gsc_ªgs
;

190 #ifde‡
__√ed_°ru˘_sigc⁄ãxt64


191 #unde‡
__√ed_°ru˘_sigc⁄ãxt64


192 #i‚de‡
_STRUCT_SIGCONTEXT64


193 #i‡
__DARWIN_UNIX03


194 
	#_STRUCT_SIGCONTEXT64
 
__d¨wö_sigc⁄ãxt64


	)

195 
	g_STRUCT_SIGCONTEXT64


197 
	g__sc_⁄°ack
;

198 
	g__sc_mask
;

199 
	g__sc_ú
;

200 
	g__sc_psw
;

201 
	g__sc_•
;

202 *
	g__sc_ªgs
;

205 
	#_STRUCT_SIGCONTEXT64
 
sigc⁄ãxt64


	)

206 
	g_STRUCT_SIGCONTEXT64


208 
	gsc_⁄°ack
;

209 
	gsc_mask
;

210 
	gsc_ú
;

211 
	gsc_psw
;

212 
	gsc_•
;

213 *
	gsc_ªgs
;

	@/usr/include/ppc/_types.h

28 #i‚def 
_BSD_PPC__TYPES_H_


29 
	#_BSD_PPC__TYPES_H_


	)

36 #ifde‡
__GNUC__


37 
__sig√d
 
	t__öt8_t
;

39 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 
	t__öt64_t
;

47 
	t__uöt64_t
;

49 
	t__d¨wö_öçå_t
;

50 
	t__d¨wö_«tuøl_t
;

70 
	t__d¨wö_˘_ru√_t
;

77 
	m__mb°©e8
[128];

78 
	m_mb°©eL
;

79 } 
	t__mb°©e_t
;

81 
__mb°©e_t
 
	t__d¨wö_mb°©e_t
;

83 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__PTRDIFF_TYPE__
)

84 
__PTRDIFF_TYPE__
 
	t__d¨wö_±rdiff_t
;

86 
	t__d¨wö_±rdiff_t
;

89 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__SIZE_TYPE__
)

90 
__SIZE_TYPE__
 
	t__d¨wö_size_t
;

92 
	t__d¨wö_size_t
;

95 #i‡(
__GNUC__
 > 2)

96 
__buûtö_va_li°
 
	t__d¨wö_va_li°
;

98 * 
	t__d¨wö_va_li°
;

101 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__WCHAR_TYPE__
)

102 
__WCHAR_TYPE__
 
	t__d¨wö_wch¨_t
;

104 
__d¨wö_˘_ru√_t
 
	t__d¨wö_wch¨_t
;

107 
__d¨wö_wch¨_t
 
	t__d¨wö_ru√_t
;

109 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__WINT_TYPE__
)

110 
__WINT_TYPE__
 
	t__d¨wö_wöt_t
;

112 
__d¨wö_˘_ru√_t
 
	t__d¨wö_wöt_t
;

115 
	t__d¨wö_˛ock_t
;

116 
__uöt32_t
 
	t__d¨wö_sockÀn_t
;

117 
	t__d¨wö_ssize_t
;

118 
	t__d¨wö_time_t
;

	@/usr/include/ppc/signal.h

32 #i‚def 
_PPC_SIGNAL_H_


33 
	#_PPC_SIGNAL_H_
 1

	)

35 
	~<sys/cdefs.h
>

37 #i‚de‡
_ANSI_SOURCE


39 
	tsig_©omic_t
;

41 
	~<sys/≠∂ópi›ts.h
>

43 #ifde‡
__APPLE_API_OBSOLETE


45 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

47 
	#__√ed_°ru˘_sigc⁄ãxt


	)

48 
	#__√ed_°ru˘_sigc⁄ãxt32


	)

49 
	#__√ed_°ru˘_sigc⁄ãxt64


	)

50 
	~<µc/_°ru˘s.h
>

55 
	#SV_SAVE_REGS
 0x1000

	)

69 
	mREGS_SAVED_NONE
,

70 
	mREGS_SAVED_CALLER
,

73 
	mREGS_SAVED_ALL


74 } 
	tªgs_ßved_t
;

	@/usr/include/sys/ioccom.h

64 #i‚def 
_SYS_IOCCOM_H_


65 
	#_SYS_IOCCOM_H_


	)

67 
	~<sys/_ty≥s.h
>

74 
	#IOCPARM_MASK
 0x1ff‡

	)

75 
	#IOCPARM_LEN
(
x
Ë(((xË>> 16Ë& 
IOCPARM_MASK
)

	)

76 
	#IOCBASECMD
(
x
Ë((xË& ~(
IOCPARM_MASK
 << 16))

	)

77 
	#IOCGROUP
(
x
Ë(((xË>> 8Ë& 0xff)

	)

79 
	#IOCPARM_MAX
 (
IOCPARM_MASK
 + 1Ë

	)

81 
	#IOC_VOID
 (
__uöt32_t
)0x20000000

	)

83 
	#IOC_OUT
 (
__uöt32_t
)0x40000000

	)

85 
	#IOC_IN
 (
__uöt32_t
)0x80000000

	)

87 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

89 
	#IOC_DIRMASK
 (
__uöt32_t
)0xe0000000

	)

91 
	#_IOC
(
öout
,
group
,
num
,
Àn
) \

92 (
öout
 | ((
Àn
 & 
IOCPARM_MASK
Ë<< 16Ë| ((
group
Ë<< 8Ë| (
num
))

	)

93 
	#_IO
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), 0)

	)

94 
	#_IOR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_OUT
, (g), (n), —))

	)

95 
	#_IOW
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_IN
, (g), (n), —))

	)

97 
	#_IOWR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_INOUT
, (g), (n), —))

	)

	@/usr/include/mach/i386/_structs.h

32 #i‚def 
_MACH_I386__STRUCTS_H_


33 
	#_MACH_I386__STRUCTS_H_


	)

41 #i‡
__DARWIN_UNIX03


42 
	#_STRUCT_X86_THREAD_STATE32
 
__d¨wö_i386_thªad_°©e


	)

43 
	g_STRUCT_X86_THREAD_STATE32


45 
	g__óx
;

46 
	g__ebx
;

47 
	g__ecx
;

48 
	g__edx
;

49 
	g__edi
;

50 
	g__esi
;

51 
	g__ebp
;

52 
	g__e•
;

53 
	g__ss
;

54 
	g__eÊags
;

55 
	g__eù
;

56 
	g__cs
;

57 
	g__ds
;

58 
	g__es
;

59 
	g__fs
;

60 
	g__gs
;

63 
	#_STRUCT_X86_THREAD_STATE32
 
i386_thªad_°©e


	)

64 
	g_STRUCT_X86_THREAD_STATE32


66 
	góx
;

67 
	gebx
;

68 
	gecx
;

69 
	gedx
;

70 
	gedi
;

71 
	gesi
;

72 
	gebp
;

73 
	ge•
;

74 
	gss
;

75 
	geÊags
;

76 
	geù
;

77 
	gcs
;

78 
	gds
;

79 
	ges
;

80 
	gfs
;

81 
	ggs
;

87 #i‡
__DARWIN_UNIX03


88 
	#_STRUCT_FP_CONTROL
 
__d¨wö_Â_c⁄åﬁ


	)

89 
	g_STRUCT_FP_CONTROL


91 
	g__övÆid
 :1,

92 
	g__dí‹m
 :1,

93 
	g__zdiv
 :1,

94 
	g__ovrÊ
 :1,

95 
	g__undÊ
 :1,

96 
	g__¥ecis
 :1,

98 
	g__pc
 :2,

99 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

100 
	#FP_PREC_24B
 0

	)

101 
	#FP_PREC_53B
 2

	)

102 
	#FP_PREC_64B
 3

	)

104 
	g__rc
 :2,

105 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

106 
	#FP_RND_NEAR
 0

	)

107 
	#FP_RND_DOWN
 1

	)

108 
	#FP_RND_UP
 2

	)

109 
	#FP_CHOP
 3

	)

114 
_STRUCT_FP_CONTROL
 
	t__d¨wö_Â_c⁄åﬁ_t
;

116 
	#_STRUCT_FP_CONTROL
 
Â_c⁄åﬁ


	)

117 
	g_STRUCT_FP_CONTROL


119 
	gövÆid
 :1,

120 
	gdí‹m
 :1,

121 
	gzdiv
 :1,

122 
	govrÊ
 :1,

123 
	gundÊ
 :1,

124 
	g¥ecis
 :1,

126 
	gpc
 :2,

127 
	#FP_PREC_24B
 0

	)

128 
	#FP_PREC_53B
 2

	)

129 
	#FP_PREC_64B
 3

	)

130 
	grc
 :2,

131 
	#FP_RND_NEAR
 0

	)

132 
	#FP_RND_DOWN
 1

	)

133 
	#FP_RND_UP
 2

	)

134 
	#FP_CHOP
 3

	)

138 
_STRUCT_FP_CONTROL
 
	tÂ_c⁄åﬁ_t
;

145 #i‡
__DARWIN_UNIX03


146 
	#_STRUCT_FP_STATUS
 
__d¨wö_Â_°©us


	)

147 
	g_STRUCT_FP_STATUS


149 
	g__övÆid
 :1,

150 
	g__dí‹m
 :1,

151 
	g__zdiv
 :1,

152 
	g__ovrÊ
 :1,

153 
	g__undÊ
 :1,

154 
	g__¥ecis
 :1,

155 
	g__°kÊt
 :1,

156 
	g__îrsumm
 :1,

157 
	g__c0
 :1,

158 
	g__c1
 :1,

159 
	g__c2
 :1,

160 
	g__tos
 :3,

161 
	g__c3
 :1,

162 
	g__busy
 :1;

164 
_STRUCT_FP_STATUS
 
	t__d¨wö_Â_°©us_t
;

166 
	#_STRUCT_FP_STATUS
 
Â_°©us


	)

167 
	g_STRUCT_FP_STATUS


169 
	gövÆid
 :1,

170 
	gdí‹m
 :1,

171 
	gzdiv
 :1,

172 
	govrÊ
 :1,

173 
	gundÊ
 :1,

174 
	g¥ecis
 :1,

175 
	g°kÊt
 :1,

176 
	gîrsumm
 :1,

177 
	gc0
 :1,

178 
	gc1
 :1,

179 
	gc2
 :1,

180 
	gtos
 :3,

181 
	gc3
 :1,

182 
	gbusy
 :1;

184 
_STRUCT_FP_STATUS
 
	tÂ_°©us_t
;

189 #i‡
__DARWIN_UNIX03


190 
	#_STRUCT_MMST_REG
 
__d¨wö_mm°_ªg


	)

191 
	g_STRUCT_MMST_REG


193 
	g__mm°_ªg
[10];

194 
	g__mm°_r§v
[6];

197 
	#_STRUCT_MMST_REG
 
mm°_ªg


	)

198 
	g_STRUCT_MMST_REG


200 
	gmm°_ªg
[10];

201 
	gmm°_r§v
[6];

208 #i‡
__DARWIN_UNIX03


209 
	#_STRUCT_XMM_REG
 
__d¨wö_xmm_ªg


	)

210 
	g_STRUCT_XMM_REG


212 
	g__xmm_ªg
[16];

215 
	#_STRUCT_XMM_REG
 
xmm_ªg


	)

216 
	g_STRUCT_XMM_REG


218 
	gxmm_ªg
[16];

226 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

227 
	#FP_STATE_BYTES
 512

	)

230 #i‡
__DARWIN_UNIX03


231 
	#_STRUCT_X86_FLOAT_STATE32
 
__d¨wö_i386_Êﬂt_°©e


	)

232 
	g_STRUCT_X86_FLOAT_STATE32


234 
	g__Âu_ª£rved
[2];

235 
_STRUCT_FP_CONTROL
 
	g__Âu_fcw
;

236 
_STRUCT_FP_STATUS
 
	g__Âu_fsw
;

237 
__uöt8_t
 
	g__Âu_·w
;

238 
__uöt8_t
 
	g__Âu_r§v1
;

239 
__uöt16_t
 
	g__Âu_f›
;

240 
__uöt32_t
 
	g__Âu_ù
;

241 
__uöt16_t
 
	g__Âu_cs
;

242 
__uöt16_t
 
	g__Âu_r§v2
;

243 
__uöt32_t
 
	g__Âu_dp
;

244 
__uöt16_t
 
	g__Âu_ds
;

245 
__uöt16_t
 
	g__Âu_r§v3
;

246 
__uöt32_t
 
	g__Âu_mxc§
;

247 
__uöt32_t
 
	g__Âu_mxc§mask
;

248 
_STRUCT_MMST_REG
 
	g__Âu_°mm0
;

249 
_STRUCT_MMST_REG
 
	g__Âu_°mm1
;

250 
_STRUCT_MMST_REG
 
	g__Âu_°mm2
;

251 
_STRUCT_MMST_REG
 
	g__Âu_°mm3
;

252 
_STRUCT_MMST_REG
 
	g__Âu_°mm4
;

253 
_STRUCT_MMST_REG
 
	g__Âu_°mm5
;

254 
_STRUCT_MMST_REG
 
	g__Âu_°mm6
;

255 
_STRUCT_MMST_REG
 
	g__Âu_°mm7
;

256 
_STRUCT_XMM_REG
 
	g__Âu_xmm0
;

257 
_STRUCT_XMM_REG
 
	g__Âu_xmm1
;

258 
_STRUCT_XMM_REG
 
	g__Âu_xmm2
;

259 
_STRUCT_XMM_REG
 
	g__Âu_xmm3
;

260 
_STRUCT_XMM_REG
 
	g__Âu_xmm4
;

261 
_STRUCT_XMM_REG
 
	g__Âu_xmm5
;

262 
_STRUCT_XMM_REG
 
	g__Âu_xmm6
;

263 
_STRUCT_XMM_REG
 
	g__Âu_xmm7
;

264 
	g__Âu_r§v4
[14*16];

265 
	g__Âu_ª£rved1
;

268 
	#_STRUCT_X86_FLOAT_STATE32
 
i386_Êﬂt_°©e


	)

269 
	g_STRUCT_X86_FLOAT_STATE32


271 
	gÂu_ª£rved
[2];

272 
_STRUCT_FP_CONTROL
 
	gÂu_fcw
;

273 
_STRUCT_FP_STATUS
 
	gÂu_fsw
;

274 
__uöt8_t
 
	gÂu_·w
;

275 
__uöt8_t
 
	gÂu_r§v1
;

276 
__uöt16_t
 
	gÂu_f›
;

277 
__uöt32_t
 
	gÂu_ù
;

278 
__uöt16_t
 
	gÂu_cs
;

279 
__uöt16_t
 
	gÂu_r§v2
;

280 
__uöt32_t
 
	gÂu_dp
;

281 
__uöt16_t
 
	gÂu_ds
;

282 
__uöt16_t
 
	gÂu_r§v3
;

283 
__uöt32_t
 
	gÂu_mxc§
;

284 
__uöt32_t
 
	gÂu_mxc§mask
;

285 
_STRUCT_MMST_REG
 
	gÂu_°mm0
;

286 
_STRUCT_MMST_REG
 
	gÂu_°mm1
;

287 
_STRUCT_MMST_REG
 
	gÂu_°mm2
;

288 
_STRUCT_MMST_REG
 
	gÂu_°mm3
;

289 
_STRUCT_MMST_REG
 
	gÂu_°mm4
;

290 
_STRUCT_MMST_REG
 
	gÂu_°mm5
;

291 
_STRUCT_MMST_REG
 
	gÂu_°mm6
;

292 
_STRUCT_MMST_REG
 
	gÂu_°mm7
;

293 
_STRUCT_XMM_REG
 
	gÂu_xmm0
;

294 
_STRUCT_XMM_REG
 
	gÂu_xmm1
;

295 
_STRUCT_XMM_REG
 
	gÂu_xmm2
;

296 
_STRUCT_XMM_REG
 
	gÂu_xmm3
;

297 
_STRUCT_XMM_REG
 
	gÂu_xmm4
;

298 
_STRUCT_XMM_REG
 
	gÂu_xmm5
;

299 
_STRUCT_XMM_REG
 
	gÂu_xmm6
;

300 
_STRUCT_XMM_REG
 
	gÂu_xmm7
;

301 
	gÂu_r§v4
[14*16];

302 
	gÂu_ª£rved1
;

306 #i‡
__DARWIN_UNIX03


307 
	#_STRUCT_X86_EXCEPTION_STATE32
 
__d¨wö_i386_ex˚±i⁄_°©e


	)

308 
	g_STRUCT_X86_EXCEPTION_STATE32


310 
	g__å≠no
;

311 
	g__îr
;

312 
	g__Áu…vaddr
;

315 
	#_STRUCT_X86_EXCEPTION_STATE32
 
i386_ex˚±i⁄_°©e


	)

316 
	g_STRUCT_X86_EXCEPTION_STATE32


318 
	gå≠no
;

319 
	gîr
;

320 
	gÁu…vaddr
;

324 #i‡
__DARWIN_UNIX03


325 
	#_STRUCT_X86_DEBUG_STATE32
 
__d¨wö_x86_debug_°©e32


	)

326 
	g_STRUCT_X86_DEBUG_STATE32


328 
	g__dr0
;

329 
	g__dr1
;

330 
	g__dr2
;

331 
	g__dr3
;

332 
	g__dr4
;

333 
	g__dr5
;

334 
	g__dr6
;

335 
	g__dr7
;

338 
	#_STRUCT_X86_DEBUG_STATE32
 
x86_debug_°©e32


	)

339 
	g_STRUCT_X86_DEBUG_STATE32


341 
	gdr0
;

342 
	gdr1
;

343 
	gdr2
;

344 
	gdr3
;

345 
	gdr4
;

346 
	gdr5
;

347 
	gdr6
;

348 
	gdr7
;

356 #i‡
__DARWIN_UNIX03


357 
	#_STRUCT_X86_THREAD_STATE64
 
__d¨wö_x86_thªad_°©e64


	)

358 
	g_STRUCT_X86_THREAD_STATE64


360 
__uöt64_t
 
	g__øx
;

361 
__uöt64_t
 
	g__rbx
;

362 
__uöt64_t
 
	g__rcx
;

363 
__uöt64_t
 
	g__rdx
;

364 
__uöt64_t
 
	g__rdi
;

365 
__uöt64_t
 
	g__rsi
;

366 
__uöt64_t
 
	g__rbp
;

367 
__uöt64_t
 
	g__r•
;

368 
__uöt64_t
 
	g__r8
;

369 
__uöt64_t
 
	g__r9
;

370 
__uöt64_t
 
	g__r10
;

371 
__uöt64_t
 
	g__r11
;

372 
__uöt64_t
 
	g__r12
;

373 
__uöt64_t
 
	g__r13
;

374 
__uöt64_t
 
	g__r14
;

375 
__uöt64_t
 
	g__r15
;

376 
__uöt64_t
 
	g__rù
;

377 
__uöt64_t
 
	g__rÊags
;

378 
__uöt64_t
 
	g__cs
;

379 
__uöt64_t
 
	g__fs
;

380 
__uöt64_t
 
	g__gs
;

383 
	#_STRUCT_X86_THREAD_STATE64
 
x86_thªad_°©e64


	)

384 
	g_STRUCT_X86_THREAD_STATE64


386 
__uöt64_t
 
	gøx
;

387 
__uöt64_t
 
	grbx
;

388 
__uöt64_t
 
	grcx
;

389 
__uöt64_t
 
	grdx
;

390 
__uöt64_t
 
	grdi
;

391 
__uöt64_t
 
	grsi
;

392 
__uöt64_t
 
	grbp
;

393 
__uöt64_t
 
	gr•
;

394 
__uöt64_t
 
	gr8
;

395 
__uöt64_t
 
	gr9
;

396 
__uöt64_t
 
	gr10
;

397 
__uöt64_t
 
	gr11
;

398 
__uöt64_t
 
	gr12
;

399 
__uöt64_t
 
	gr13
;

400 
__uöt64_t
 
	gr14
;

401 
__uöt64_t
 
	gr15
;

402 
__uöt64_t
 
	grù
;

403 
__uöt64_t
 
	grÊags
;

404 
__uöt64_t
 
	gcs
;

405 
__uöt64_t
 
	gfs
;

406 
__uöt64_t
 
	ggs
;

411 #i‡
__DARWIN_UNIX03


412 
	#_STRUCT_X86_FLOAT_STATE64
 
__d¨wö_x86_Êﬂt_°©e64


	)

413 
	g_STRUCT_X86_FLOAT_STATE64


415 
	g__Âu_ª£rved
[2];

416 
_STRUCT_FP_CONTROL
 
	g__Âu_fcw
;

417 
_STRUCT_FP_STATUS
 
	g__Âu_fsw
;

418 
__uöt8_t
 
	g__Âu_·w
;

419 
__uöt8_t
 
	g__Âu_r§v1
;

420 
__uöt16_t
 
	g__Âu_f›
;

423 
__uöt32_t
 
	g__Âu_ù
;

424 
__uöt16_t
 
	g__Âu_cs
;

426 
__uöt16_t
 
	g__Âu_r§v2
;

429 
__uöt32_t
 
	g__Âu_dp
;

430 
__uöt16_t
 
	g__Âu_ds
;

432 
__uöt16_t
 
	g__Âu_r§v3
;

433 
__uöt32_t
 
	g__Âu_mxc§
;

434 
__uöt32_t
 
	g__Âu_mxc§mask
;

435 
_STRUCT_MMST_REG
 
	g__Âu_°mm0
;

436 
_STRUCT_MMST_REG
 
	g__Âu_°mm1
;

437 
_STRUCT_MMST_REG
 
	g__Âu_°mm2
;

438 
_STRUCT_MMST_REG
 
	g__Âu_°mm3
;

439 
_STRUCT_MMST_REG
 
	g__Âu_°mm4
;

440 
_STRUCT_MMST_REG
 
	g__Âu_°mm5
;

441 
_STRUCT_MMST_REG
 
	g__Âu_°mm6
;

442 
_STRUCT_MMST_REG
 
	g__Âu_°mm7
;

443 
_STRUCT_XMM_REG
 
	g__Âu_xmm0
;

444 
_STRUCT_XMM_REG
 
	g__Âu_xmm1
;

445 
_STRUCT_XMM_REG
 
	g__Âu_xmm2
;

446 
_STRUCT_XMM_REG
 
	g__Âu_xmm3
;

447 
_STRUCT_XMM_REG
 
	g__Âu_xmm4
;

448 
_STRUCT_XMM_REG
 
	g__Âu_xmm5
;

449 
_STRUCT_XMM_REG
 
	g__Âu_xmm6
;

450 
_STRUCT_XMM_REG
 
	g__Âu_xmm7
;

451 
_STRUCT_XMM_REG
 
	g__Âu_xmm8
;

452 
_STRUCT_XMM_REG
 
	g__Âu_xmm9
;

453 
_STRUCT_XMM_REG
 
	g__Âu_xmm10
;

454 
_STRUCT_XMM_REG
 
	g__Âu_xmm11
;

455 
_STRUCT_XMM_REG
 
	g__Âu_xmm12
;

456 
_STRUCT_XMM_REG
 
	g__Âu_xmm13
;

457 
_STRUCT_XMM_REG
 
	g__Âu_xmm14
;

458 
_STRUCT_XMM_REG
 
	g__Âu_xmm15
;

459 
	g__Âu_r§v4
[6*16];

460 
	g__Âu_ª£rved1
;

463 
	#_STRUCT_X86_FLOAT_STATE64
 
x86_Êﬂt_°©e64


	)

464 
	g_STRUCT_X86_FLOAT_STATE64


466 
	gÂu_ª£rved
[2];

467 
_STRUCT_FP_CONTROL
 
	gÂu_fcw
;

468 
_STRUCT_FP_STATUS
 
	gÂu_fsw
;

469 
__uöt8_t
 
	gÂu_·w
;

470 
__uöt8_t
 
	gÂu_r§v1
;

471 
__uöt16_t
 
	gÂu_f›
;

474 
__uöt32_t
 
	gÂu_ù
;

475 
__uöt16_t
 
	gÂu_cs
;

477 
__uöt16_t
 
	gÂu_r§v2
;

480 
__uöt32_t
 
	gÂu_dp
;

481 
__uöt16_t
 
	gÂu_ds
;

483 
__uöt16_t
 
	gÂu_r§v3
;

484 
__uöt32_t
 
	gÂu_mxc§
;

485 
__uöt32_t
 
	gÂu_mxc§mask
;

486 
_STRUCT_MMST_REG
 
	gÂu_°mm0
;

487 
_STRUCT_MMST_REG
 
	gÂu_°mm1
;

488 
_STRUCT_MMST_REG
 
	gÂu_°mm2
;

489 
_STRUCT_MMST_REG
 
	gÂu_°mm3
;

490 
_STRUCT_MMST_REG
 
	gÂu_°mm4
;

491 
_STRUCT_MMST_REG
 
	gÂu_°mm5
;

492 
_STRUCT_MMST_REG
 
	gÂu_°mm6
;

493 
_STRUCT_MMST_REG
 
	gÂu_°mm7
;

494 
_STRUCT_XMM_REG
 
	gÂu_xmm0
;

495 
_STRUCT_XMM_REG
 
	gÂu_xmm1
;

496 
_STRUCT_XMM_REG
 
	gÂu_xmm2
;

497 
_STRUCT_XMM_REG
 
	gÂu_xmm3
;

498 
_STRUCT_XMM_REG
 
	gÂu_xmm4
;

499 
_STRUCT_XMM_REG
 
	gÂu_xmm5
;

500 
_STRUCT_XMM_REG
 
	gÂu_xmm6
;

501 
_STRUCT_XMM_REG
 
	gÂu_xmm7
;

502 
_STRUCT_XMM_REG
 
	gÂu_xmm8
;

503 
_STRUCT_XMM_REG
 
	gÂu_xmm9
;

504 
_STRUCT_XMM_REG
 
	gÂu_xmm10
;

505 
_STRUCT_XMM_REG
 
	gÂu_xmm11
;

506 
_STRUCT_XMM_REG
 
	gÂu_xmm12
;

507 
_STRUCT_XMM_REG
 
	gÂu_xmm13
;

508 
_STRUCT_XMM_REG
 
	gÂu_xmm14
;

509 
_STRUCT_XMM_REG
 
	gÂu_xmm15
;

510 
	gÂu_r§v4
[6*16];

511 
	gÂu_ª£rved1
;

515 #i‡
__DARWIN_UNIX03


516 
	#_STRUCT_X86_EXCEPTION_STATE64
 
__d¨wö_x86_ex˚±i⁄_°©e64


	)

517 
	g_STRUCT_X86_EXCEPTION_STATE64


519 
	g__å≠no
;

520 
	g__îr
;

521 
__uöt64_t
 
	g__Áu…vaddr
;

524 
	#_STRUCT_X86_EXCEPTION_STATE64
 
x86_ex˚±i⁄_°©e64


	)

525 
	g_STRUCT_X86_EXCEPTION_STATE64


527 
	gå≠no
;

528 
	gîr
;

529 
__uöt64_t
 
	gÁu…vaddr
;

533 #i‡
__DARWIN_UNIX03


534 
	#_STRUCT_X86_DEBUG_STATE64
 
__d¨wö_x86_debug_°©e64


	)

535 
	g_STRUCT_X86_DEBUG_STATE64


537 
__uöt64_t
 
	g__dr0
;

538 
__uöt64_t
 
	g__dr1
;

539 
__uöt64_t
 
	g__dr2
;

540 
__uöt64_t
 
	g__dr3
;

541 
__uöt64_t
 
	g__dr4
;

542 
__uöt64_t
 
	g__dr5
;

543 
__uöt64_t
 
	g__dr6
;

544 
__uöt64_t
 
	g__dr7
;

547 
	#_STRUCT_X86_DEBUG_STATE64
 
x86_debug_°©e64


	)

548 
	g_STRUCT_X86_DEBUG_STATE64


550 
__uöt64_t
 
	gdr0
;

551 
__uöt64_t
 
	gdr1
;

552 
__uöt64_t
 
	gdr2
;

553 
__uöt64_t
 
	gdr3
;

554 
__uöt64_t
 
	gdr4
;

555 
__uöt64_t
 
	gdr5
;

556 
__uöt64_t
 
	gdr6
;

557 
__uöt64_t
 
	gdr7
;

	@/usr/include/mach/ppc/_structs.h

32 #i‚def 
_MACH_PPC__STRUCTS_H_


33 
	#_MACH_PPC__STRUCTS_H_


	)

35 
	~<sys/cdefs.h
>

43 #i‡
__DARWIN_UNIX03


44 
	#_STRUCT_PPC_THREAD_STATE
 
__d¨wö_µc_thªad_°©e


	)

45 
	g_STRUCT_PPC_THREAD_STATE


47 
	g__§r0
;

48 
	g__§r1
;

49 
	g__r0
;

50 
	g__r1
;

51 
	g__r2
;

52 
	g__r3
;

53 
	g__r4
;

54 
	g__r5
;

55 
	g__r6
;

56 
	g__r7
;

57 
	g__r8
;

58 
	g__r9
;

59 
	g__r10
;

60 
	g__r11
;

61 
	g__r12
;

62 
	g__r13
;

63 
	g__r14
;

64 
	g__r15
;

65 
	g__r16
;

66 
	g__r17
;

67 
	g__r18
;

68 
	g__r19
;

69 
	g__r20
;

70 
	g__r21
;

71 
	g__r22
;

72 
	g__r23
;

73 
	g__r24
;

74 
	g__r25
;

75 
	g__r26
;

76 
	g__r27
;

77 
	g__r28
;

78 
	g__r29
;

79 
	g__r30
;

80 
	g__r31
;

82 
	g__¸
;

83 
	g__xî
;

84 
	g__Ã
;

85 
	g__˘r
;

86 
	g__mq
;

88 
	g__vrßve
;

91 
	#_STRUCT_PPC_THREAD_STATE
 
µc_thªad_°©e


	)

92 
	g_STRUCT_PPC_THREAD_STATE


94 
	g§r0
;

95 
	g§r1
;

96 
	gr0
;

97 
	gr1
;

98 
	gr2
;

99 
	gr3
;

100 
	gr4
;

101 
	gr5
;

102 
	gr6
;

103 
	gr7
;

104 
	gr8
;

105 
	gr9
;

106 
	gr10
;

107 
	gr11
;

108 
	gr12
;

109 
	gr13
;

110 
	gr14
;

111 
	gr15
;

112 
	gr16
;

113 
	gr17
;

114 
	gr18
;

115 
	gr19
;

116 
	gr20
;

117 
	gr21
;

118 
	gr22
;

119 
	gr23
;

120 
	gr24
;

121 
	gr25
;

122 
	gr26
;

123 
	gr27
;

124 
	gr28
;

125 
	gr29
;

126 
	gr30
;

127 
	gr31
;

129 
	g¸
;

130 
	gxî
;

131 
	gÃ
;

132 
	g˘r
;

133 
	gmq
;

135 
	gvrßve
;

139 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

141 #¥agm®
∑ck
(4)

143 #i‡
__DARWIN_UNIX03


144 
	#_STRUCT_PPC_THREAD_STATE64
 
__d¨wö_µc_thªad_°©e64


	)

145 
	g_STRUCT_PPC_THREAD_STATE64


147 
	g__§r0
;

148 
	g__§r1
;

149 
	g__r0
;

150 
	g__r1
;

151 
	g__r2
;

152 
	g__r3
;

153 
	g__r4
;

154 
	g__r5
;

155 
	g__r6
;

156 
	g__r7
;

157 
	g__r8
;

158 
	g__r9
;

159 
	g__r10
;

160 
	g__r11
;

161 
	g__r12
;

162 
	g__r13
;

163 
	g__r14
;

164 
	g__r15
;

165 
	g__r16
;

166 
	g__r17
;

167 
	g__r18
;

168 
	g__r19
;

169 
	g__r20
;

170 
	g__r21
;

171 
	g__r22
;

172 
	g__r23
;

173 
	g__r24
;

174 
	g__r25
;

175 
	g__r26
;

176 
	g__r27
;

177 
	g__r28
;

178 
	g__r29
;

179 
	g__r30
;

180 
	g__r31
;

182 
	g__¸
;

183 
	g__xî
;

184 
	g__Ã
;

185 
	g__˘r
;

187 
	g__vrßve
;

190 
	#_STRUCT_PPC_THREAD_STATE64
 
µc_thªad_°©e64


	)

191 
	g_STRUCT_PPC_THREAD_STATE64


193 
	g§r0
;

194 
	g§r1
;

195 
	gr0
;

196 
	gr1
;

197 
	gr2
;

198 
	gr3
;

199 
	gr4
;

200 
	gr5
;

201 
	gr6
;

202 
	gr7
;

203 
	gr8
;

204 
	gr9
;

205 
	gr10
;

206 
	gr11
;

207 
	gr12
;

208 
	gr13
;

209 
	gr14
;

210 
	gr15
;

211 
	gr16
;

212 
	gr17
;

213 
	gr18
;

214 
	gr19
;

215 
	gr20
;

216 
	gr21
;

217 
	gr22
;

218 
	gr23
;

219 
	gr24
;

220 
	gr25
;

221 
	gr26
;

222 
	gr27
;

223 
	gr28
;

224 
	gr29
;

225 
	gr30
;

226 
	gr31
;

228 
	g¸
;

229 
	gxî
;

230 
	gÃ
;

231 
	g˘r
;

233 
	gvrßve
;

237 #¥agm®
∑ck
()

243 #i‡
__DARWIN_UNIX03


244 
	#_STRUCT_PPC_FLOAT_STATE
 
__d¨wö_µc_Êﬂt_°©e


	)

245 
	g_STRUCT_PPC_FLOAT_STATE


247 
	g__Âªgs
[32];

249 
	g__Âs¸_∑d
;

250 
	g__Âs¸
;

253 
	#_STRUCT_PPC_FLOAT_STATE
 
µc_Êﬂt_°©e


	)

254 
	g_STRUCT_PPC_FLOAT_STATE


256 
	gÂªgs
[32];

258 
	gÂs¸_∑d
;

259 
	gÂs¸
;

263 #¥agm®
∑ck
(4)

265 #i‡
__DARWIN_UNIX03


266 
	#_STRUCT_PPC_VECTOR_STATE
 
__d¨wö_µc_ve˘‹_°©e


	)

267 
	g_STRUCT_PPC_VECTOR_STATE


269 #i‡
deföed
(
__LP64__
)

270 
	g__ßve_vr
[32][4];

271 
	g__ßve_vs¸
[4];

273 
	g__ßve_vr
[32][4];

274 
	g__ßve_vs¸
[4];

276 
	g__ßve_∑d5
[4];

277 
	g__ßve_vrvÆid
;

278 
	g__ßve_∑d6
[7];

281 
	#_STRUCT_PPC_VECTOR_STATE
 
µc_ve˘‹_°©e


	)

282 
	g_STRUCT_PPC_VECTOR_STATE


284 #i‡
deföed
(
__LP64__
)

285 
	gßve_vr
[32][4];

286 
	gßve_vs¸
[4];

288 
	gßve_vr
[32][4];

289 
	gßve_vs¸
[4];

291 
	gßve_∑d5
[4];

292 
	gßve_vrvÆid
;

293 
	gßve_∑d6
[7];

297 #¥agm®
∑ck
()

316 #¥agm®
∑ck
(4)

318 #i‡
__DARWIN_UNIX03


319 
	#_STRUCT_PPC_EXCEPTION_STATE
 
__d¨wö_µc_ex˚±i⁄_°©e


	)

320 
	g_STRUCT_PPC_EXCEPTION_STATE


322 #i‡
deföed
(
__LP64__
)

323 
	g__d¨
;

324 
	g__dsi§
;

325 
	g__ex˚±i⁄
;

326 
	g__∑d0
;

327 
	g__∑d1
[4];

329 
	g__d¨
;

330 
	g__dsi§
;

331 
	g__ex˚±i⁄
;

332 
	g__∑d0
;

333 
	g__∑d1
[4];

337 
	#_STRUCT_PPC_EXCEPTION_STATE
 
µc_ex˚±i⁄_°©e


	)

338 
	g_STRUCT_PPC_EXCEPTION_STATE


340 #i‡
deföed
(
__LP64__
)

341 
	gd¨
;

342 
	gdsi§
;

343 
	gex˚±i⁄
;

344 
	g∑d0
;

345 
	g∑d1
[4];

347 
	gd¨
;

348 
	gdsi§
;

349 
	gex˚±i⁄
;

350 
	g∑d0
;

351 
	g∑d1
[4];

356 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

357 #i‡
__DARWIN_UNIX03


358 
	#_STRUCT_PPC_EXCEPTION_STATE64
 
__d¨wö_µc_ex˚±i⁄_°©e64


	)

359 
	g_STRUCT_PPC_EXCEPTION_STATE64


361 
	g__d¨
;

362 #i‡
deföed
(
__LP64__
)

363 
	g__dsi§
;

364 
	g__ex˚±i⁄
;

365 
	g__∑d1
[4];

367 
	g__dsi§
;

368 
	g__ex˚±i⁄
;

369 
	g__∑d1
[4];

373 
	#_STRUCT_PPC_EXCEPTION_STATE64
 
µc_ex˚±i⁄_°©e64


	)

374 
	g_STRUCT_PPC_EXCEPTION_STATE64


376 
	gd¨
;

377 #i‡
deföed
(
__LP64__
)

378 
	gdsi§
;

379 
	gex˚±i⁄
;

380 
	g∑d1
[4];

382 
	gdsi§
;

383 
	gex˚±i⁄
;

384 
	g∑d1
[4];

390 #¥agm®
∑ck
()

	@
1
.
1
/usr/include
116
2606
autoconf.h
avarice.h
crc16.c
crc16.h
devdescr.cc
gnu_getopt.c
gnu_getopt.h
gnu_getopt1.c
ioreg.cc
ioreg.h
jtag.h
jtag1.h
jtag2.h
jtag2_defs.h
jtag2bp.cc
jtag2io.cc
jtag2misc.cc
jtag2prog.cc
jtag2run.cc
jtag2rw.cc
jtag2usb.cc
jtagbp.cc
jtaggeneric.cc
jtagio.cc
jtagmisc.cc
jtagprog.cc
jtagrun.cc
jtagrw.cc
main.cc
remote.cc
remote.h
utils.cc
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/signal.h
/usr/include/stdarg.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/termios.h
/usr/include/unistd.h
/usr/include/Availability.h
/usr/include/_types.h
/usr/include/_xlocale.h
/usr/include/alloca.h
/usr/include/architecture/i386/math.h
/usr/include/architecture/ppc/math.h
/usr/include/machine/_param.h
/usr/include/machine/endian.h
/usr/include/machine/types.h
/usr/include/netinet6/in6.h
/usr/include/runetype.h
/usr/include/secure/_stdio.h
/usr/include/secure/_string.h
/usr/include/stdint.h
/usr/include/sys/_endian.h
/usr/include/sys/_select.h
/usr/include/sys/_structs.h
/usr/include/sys/_types.h
/usr/include/sys/appleapiopts.h
/usr/include/sys/cdefs.h
/usr/include/sys/errno.h
/usr/include/sys/fcntl.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/signal.h
/usr/include/sys/termios.h
/usr/include/sys/unistd.h
/usr/include/time.h
/usr/include/xlocale/_ctype.h
/usr/include/xlocale/_stdio.h
/usr/include/xlocale/_stdlib.h
/usr/include/xlocale/_string.h
/usr/include/AvailabilityInternal.h
/usr/include/AvailabilityMacros.h
/usr/include/_structs.h
/usr/include/i386/_param.h
/usr/include/i386/endian.h
/usr/include/i386/types.h
/usr/include/libkern/_OSByteOrder.h
/usr/include/machine/_limits.h
/usr/include/machine/_structs.h
/usr/include/machine/_types.h
/usr/include/machine/signal.h
/usr/include/ppc/_param.h
/usr/include/ppc/endian.h
/usr/include/ppc/types.h
/usr/include/secure/_common.h
/usr/include/sys/ttycom.h
/usr/include/sys/ttydefaults.h
/usr/include/xlocale/_time.h
/usr/include/i386/_limits.h
/usr/include/i386/_structs.h
/usr/include/i386/_types.h
/usr/include/i386/signal.h
/usr/include/libkern/i386/_OSByteOrder.h
/usr/include/ppc/_limits.h
/usr/include/ppc/_structs.h
/usr/include/ppc/_types.h
/usr/include/ppc/signal.h
/usr/include/sys/ioccom.h
/usr/include/mach/i386/_structs.h
/usr/include/mach/ppc/_structs.h
